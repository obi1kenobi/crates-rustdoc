{"root":"0:0:1748","crate_version":"1.73.0-nightly\t(33a2c2487\t2023-07-12)","includes_private":false,"index":{"2:12139:24088":{"id":"2:12139:24088","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7832","str::rsplitn":"2:12142:24090"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43660:7821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:31046":{"id":"2:12165:31046","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5440:31711":{"id":"5:5440:31711","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12151:1975":{"id":"2:12151:1975","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11776:7832","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:1975"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43760:7849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12163:31045":{"id":"2:12163:31045","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:31048":{"id":"2:12169:31048","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1748":{"id":"0:0:1748","crate_id":0,"name":"sysroot","span":{"filename":"library/sysroot/src/lib.rs","begin":[1,96],"end":[1,96]},"visibility":"public","docs":null,"links":{},"attrs":["#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]","#![warn(rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":[],"is_stripped":false}}},"2:12186:31053":{"id":"2:12186:31053","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7832"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:31036":{"id":"2:12096:31036","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11984:1406","crate::ops::IndexMut":"2:2982:2167","str::slice_unchecked":"2:12095:31035"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12183:31052":{"id":"2:12183:31052","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7832"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:31056":{"id":"2:12199:31056","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4536:31056"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43855:7843","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:2084":{"id":"2:12201:2084","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4537:2084"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43864:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12202:31057":{"id":"2:12202:31057","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4534:31057"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43873:7844","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:23272":{"id":"5:5444:23272","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12198:23275"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12083:20956":{"id":"2:12083:20956","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11343:7836"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086:24053":{"id":"2:12086:24053","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:31054":{"id":"2:12189:31054","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7832"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:24092":{"id":"2:12107:24092","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7832"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:19730":{"id":"2:12116:19730","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:7832"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12077:31031":{"id":"2:12077:31031","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12127:24084":{"id":"2:12127:24084","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7832"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11599:7823","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12192:31055":{"id":"2:12192:31055","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11737:127","`FromStr`":"2:11736:2453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11736:2453","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11736:2453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:23274":{"id":"2:12197:23274","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:31047":{"id":"2:12167:31047","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12113:24094":{"id":"2:12113:24094","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7832"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12084:31034":{"id":"2:12084:31034","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:28239":{"id":"2:12100:28239","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43532:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:816":{"id":"2:12075:816","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11978:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:28221":{"id":"2:12102:28221","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12103:28223"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43830:7835","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:28193":{"id":"2:12099:28193","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43526:7839","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:31032":{"id":"2:12078:31032","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:20289":{"id":"2:12177:20289","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7832"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12195:23856":{"id":"2:12195:23856","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39626:23992","Self::is_ascii":"2:12194:23269"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39626:23992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:314":{"id":"2:12085:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12086:24053","`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:31050":{"id":"2:12171:31050","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7832"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11801:7827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:24052":{"id":"2:12093:24052","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:24076":{"id":"2:12098:24076","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12097:24075"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12120:19731":{"id":"2:12120:19731","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:7832"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12124:19790":{"id":"2:12124:19790","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11776:7832","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split_whitespace":"2:12102:28221","str::rsplit":"2:12130:24086"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43556:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:23273":{"id":"2:12196:23273","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076:24034":{"id":"2:12076:24034","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5441:31712":{"id":"5:5441:31712","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2006","`String`":"5:7280:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2006","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:23271":{"id":"5:5443:23271","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12197:23274"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5424":{"id":"5:5424","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5425:31708","5:5426:8176","5:5429:31709","5:5432:31710","5:5440:31711","5:5441:31712","5:5442:2309","5:5443:23271","5:5444:23272"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12104:19791":{"id":"2:12104:19791","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43810:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12130:24086":{"id":"2:12130:24086","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11776:7832","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split":"2:12124:19790"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43574:7817","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:24051":{"id":"2:12091:24051","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:28223":{"id":"2:12103:28223","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12102:28221"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43839:7834","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12157:31043":{"id":"2:12157:31043","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11776:7832","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::rmatch_indices":"2:12160:31044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43706:7847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12170:31049":{"id":"2:12170:31049","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426:8176":{"id":"5:5426:8176","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:31037":{"id":"2:12105:31037","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43820:7846","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:20042":{"id":"2:12101:20042","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43542:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:23269":{"id":"2:12194:23269","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12145:31040":{"id":"2:12145:31040","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12180:24095":{"id":"2:12180:24095","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7832"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12148:31041":{"id":"2:12148:31041","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:31033":{"id":"2:12080:31033","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12078:31032"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:24075":{"id":"2:12097:24075","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12098:24076"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:24090":{"id":"2:12142:24090","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11978:418","str::splitn":"2:12139:24088","self::pattern":"2:11776:7832"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43678:7819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:31044":{"id":"2:12160:31044","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11776:7832","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::match_indices":"2:12157:31043"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43724:7848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12074":{"id":"2:12074","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12075:816","2:12076:24034","2:12077:31031","2:12078:31032","2:12080:31033","2:12083:20956","2:12084:31034","2:12085:314","2:12086:24053","2:12087:24049","2:12089:24050","2:12091:24051","2:12093:24052","2:12095:31035","2:12096:31036","2:12097:24075","2:12098:24076","2:12099:28193","2:12100:28239","2:12101:20042","2:12102:28221","2:12103:28223","2:12104:19791","2:12105:31037","2:12106:28194","2:12107:24092","2:12110:24093","2:12113:24094","2:12116:19730","2:12120:19731","2:12124:19790","2:12127:24084","2:12130:24086","2:12133:31038","2:12136:31039","2:12139:24088","2:12142:24090","2:12145:31040","2:12148:31041","2:12151:1975","2:12154:31042","2:12157:31043","2:12160:31044","2:12163:31045","2:12165:31046","2:12167:31047","2:12169:31048","2:12170:31049","2:12171:31050","2:12174:31051","2:12177:20289","2:12180:24095","2:12183:31052","2:12186:31053","2:12189:31054","2:12192:31055","2:12194:23269","2:12195:23856","2:12196:23273","2:12197:23274","2:12198:23275","2:12199:31056","2:12201:2084","2:12202:31057"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12133:31038":{"id":"2:12133:31038","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11776:7832","str::split":"2:12124:19790","prim@char":"1:11978:418","`DoubleEndedIterator`":"2:7304:121","str::rsplit_terminator":"2:12136:31039"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43606:7852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5442:2309":{"id":"5:5442:2309","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12174:31051":{"id":"2:12174:31051","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7832"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12095:31035":{"id":"2:12095:31035","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11984:1406","str::slice_mut_unchecked":"2:12096:31036","crate::ops::Index":"2:2978:2166"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:28194":{"id":"2:12106:28194","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43848:7833","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5429:31709":{"id":"5:5429:31709","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5432:31710":{"id":"5:5432:31710","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:23275":{"id":"2:12198:23275","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:24050":{"id":"2:12089:24050","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:24093":{"id":"2:12110:24093","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7832"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:24049":{"id":"2:12087:24049","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12154:31042":{"id":"2:12154:31042","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11776:7832","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:1975"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43778:7850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:31039":{"id":"2:12136:31039","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11776:7832","str::split":"2:12124:19790","prim@char":"1:11978:418","str::split_terminator":"2:12133:31038"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43624:7851","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5425:31708":{"id":"5:5425:31708","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2006","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2006","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"11:1103:14292":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:2360:2233":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:40482:8154":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:7853:2247":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:8086:15396":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:8907:29178":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:45760:2628":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:6137:2694":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:41647:2109":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:44563:7745":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:7474:15371":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12769:18904":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:2046:2151":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:841:2109":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:21673:2557":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:40176:7955":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:7564:12652":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:6425:2492":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:2693:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:21457:2570":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:43848:7833":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:3111:2314":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:12631:18896":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12711:18901":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:4841:15036":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:46189:2595":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:41774:2109":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:10313:15616":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:2874:14400":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:5838:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11142:2262":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:20803:2561":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:46411:28127":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:42360:7771":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:3834:2334":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:590:28159":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:11327:22718":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4341:12407":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4810:12455":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:8974:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:30941:7975":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:10175:15489":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:11272:15493":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:40124:7843":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:6604:2501":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:8949:15479":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:2809:8193":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:6618:13553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:2162:8219":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:3435:2255":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:6573:9809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:9485:34405":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6724:15351":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:46615:2624":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:11056:15722":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:11290:15494":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:5775:15313":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12840:18908":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11428:15500":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:615:2087":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:22517:2072":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:488:8955":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:7755:2194":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:21549:2551":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:9965:20662":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:3635:14411":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"14:215:14310":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:3222:2305":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:10770:2251":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:10510:2302":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:2164:15586":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10597:15675":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:11160:20555":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:13620:19646":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10544:15673":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:5720:15311":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:614:34504":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:4535:12428":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13591:19644":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:20648:28549":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:11462:2332":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:4664:12439":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:1557:9857":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:2900:14401":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:10445:26766":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:45546:2609":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:20895:2568":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:11179:2512":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:21124:2559":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:10123:15535":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12053:18385":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:6667:14320":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13707:19650":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7073:15363":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:30118:2338":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:5673:15308":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:43724:7848":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:2373:14379":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:2765:8186":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:3383:7905":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"5:3668:31984":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:42353:7763":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:4731:2363":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:39453:7918":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:4906:2414":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:551:2063":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:13991:19676":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:6744:13558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:21790:27806":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:7848:2250":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12552:18890":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:10314:20955":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:12118:18390":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:41638:8209":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:42224:2487":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:1732:8230":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"18:719:19732":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:40072:7960":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:5551:2464":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13847:19661":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:3214:30834":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:11981:1054":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:43855:7843":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:11144:15715":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:1575:9859":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:39439:28442":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:11199:15717":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:9219:7772":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:9192:23401":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:11955:18378":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:40351:8138":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:11696:15737":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:477:26770":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:4928:15051":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:6600:7896":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:7799:15390":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:21987:28089":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"11:365:33299":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:44472:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:8153:2253":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:1489:2117":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:6332:15333":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:5737:13059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:43352:7809":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13448:19637":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:6590:2500":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:8176:15402":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:2848:8202":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:10080:15579":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:4550:12430":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:45566:2574":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6589:8838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:8955:2491":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:6534:2495":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:11600:15507":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:20972:2564":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:32133:20242":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:3025:14404":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:6022:13141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:4466:2388":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10293:15580":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"11:1831:2115":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:4626:12436":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:11983:1376":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:44188:7854":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:9614:33982":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:9010:20243":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:3932:2270":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"18:80:19718":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:8216:2281":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:4043:7752":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:9528:34155":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:22025:28018":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:48061:7733":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:11736:2453":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:7696:30355":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:6850:15355":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:3168:2109":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4587:12433":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:5793:33668":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:875:2136":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"7:79:14148":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:3645:2111":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:3734:2151":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:22451:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:12421:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13566:19643":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:6785:28539":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:40863:8126":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:9399:15485":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:2956:7747":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:9840:15518":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:2703:2071":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:3301:2303":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:42184:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11967:18379":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13957:19672":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:4506:14941":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:4428:12415":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11642:15509":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:13894:19666":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:2959:30957":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:8233:2322":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:42906:28171":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:817:2121":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11241:15730":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:3194:7755":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:46388:28117":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:587:8968":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:1690:9869":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:11084:15687":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"11:736:2113":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:20665:28552":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:7030:2137":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:9225:7770":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4650:12438":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13732:19652":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:10735:21310":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:21208:2555":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:10074:2285":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:7250:8914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7763:15389":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4395:12254":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:12065:18386":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:5920:13133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:12659:18898":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:8771:15473":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:8798:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:12412:18882":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:4233:2109":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:13683:19648":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:25972:2337":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:3154:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:1408:2109":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:43091:8326":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12479:18886":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:13016:18920":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:4762:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:39269:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:7295:13937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:43778:7850":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:9977:15490":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:5382:15299":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:4374:12409":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"11:968:2124":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"18:531:19746":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:4955:12472":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:1536:9855":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:836:2122":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11979:18380":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:11313:8296":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11943:18377":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"9:177:14275":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:10740:23398":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:42651:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:42104:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:14417:19705":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12952:18916":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:898:2114":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:4483:12422":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:8381:2427":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:9665:34097":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:46491:2612":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:21227:2258":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:0:1868":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:44490:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:40919:8132":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:1755:8229":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:3501:27184":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:2692:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"18:564:19748":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:4764:12449":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:7362:15366":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:2293:14348":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"11:2194:33296":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:2755:2547":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:1569:9858":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:1921:2206":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:4704:12442":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:3996:28460":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:2493:2294":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:22004:28020":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:11991:745":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:2541:14386":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:43542:2284":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12618:18895":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:22418:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:40116:2085":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:46881:2596":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:6868:13566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:43532:7838":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:3344:2291":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:8846:2109":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:7305:7875":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:47601:2591":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:4917:12467":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:45843:2588":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:573:8966":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:5042:20217":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2738:1999":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:11155:15725":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:3517:2279":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:7599:14124":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4616:12435":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:6658:15349":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:10800:2253":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:7570:26768":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:1928:656":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:40886:8128":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:44287:8337":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:11329:8298":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:352:2080":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4695:12441":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:40512:8156":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:46915:2645":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:8542:15451":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:2836:8199":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:8838:2470":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:12891:18912":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:11234:15729":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:9143:2544":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:8210:15403":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:2741:7753":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:10745:2247":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:13083:18925":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:9475:15486":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:5807:15314":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"7:0:1553":{"crate_id":7,"path":["unwind"],"kind":"module"},"18:113:19720":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:43526:7839":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:6931:15359":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:9215:7762":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:119:8636":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"14:7:14301":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:4333:7934":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"11:119:33291":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:4895:12465":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:3377:2312":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:872:2112":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:41790:2111":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:12592:18893":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:9939:15528":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:7272:13935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4992:12476":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:10458:15621":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:5843:15315":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:766:19734":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:35:2169":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:3395:15641":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:8186:2282":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:8304:2387":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:43940:7862":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:6175:15324":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:7113:2111":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12526:18888":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11568:15505":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:4378:7935":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:47847:2652":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12424:18883":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:39432:15403":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:3175:2131":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13949:19671":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:5882:15316":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:1115:30899":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:7652:2067":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"14:187:14309":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:42867:7987":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:6357:15335":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:4724:15015":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:30349:8179":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:7586:12654":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:44168:7853":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:2962:14403":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:5967:13135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13862:19663":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:2883:20370":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:8203:2284":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:46259:2651":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11098:15689":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"18:736:19733":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:44588:28201":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:4148:2379":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:47809:2631":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11189:15506":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"11:2174:29996":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:4184:7785":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:4785:15028":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:6900:15358":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13882:19665":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:21912:28209":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:12186:18395":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:6057:14347":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"11:1501:14293":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:11398:20948":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:1580:2131":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:7025:33662":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10609:15676":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:8326:2418":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:12614:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:44307:8335":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:541:8961":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:204:7761":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:12566:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:7313:33546":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:46167:2589":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:20939:2569":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:5858:2486":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:2785:2548":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:8196:2283":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:2600:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:9223:15483":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:32224:8167":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"7:32:14141":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:6977:15361":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:4475:12421":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:2789:8191":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:11252:20281":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:5062:2486":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:11118:15724":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:1590:9860":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"9:0:1861":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:13830:19660":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:9518:15487":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:41705:2432":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:1495:9849":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:4387:7936":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:9434:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:8899:15477":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:22041:28101":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:5948:2270":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12851:18909":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:41436:2324":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:2611:14389":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:5028:15079":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:4809:799":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:5940:15318":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:2967:30958":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:42024:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:6864:33596":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:9211:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:12815:18906":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:11300:20041":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:45945:2553":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:43606:7852":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:6607:13552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:21561:28259":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:97:33316":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11542:15453":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:21102:2258":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:6805:13561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:40223:8272":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:3963:2349":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:1184:15540":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8348:2365":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:7558:12651":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:6015:13140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:11976:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"11:1611:33305":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:9806:15516":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:10322:7819":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:13870:19664":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10883:15642":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:9090:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:30343:7892":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:12878:18911":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:12002:1134":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:7269:7784":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:2919:2000":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:11551:20132":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:6061:26763":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:11796:7829":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:7759:20242":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:1513:9852":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8932:2510":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:4488:2389":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:14163:19686":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:10790:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:7092:30856":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:43991:7865":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:8282:2386":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:2803:14397":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:7382:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:13029:18921":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:47065:2579":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:3315:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:12757:18903":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:6372:15336":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:7883:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:8166:15401":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:9474:7986":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:5051:12481":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:47271:2613":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:7721:2094":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"9:426:14172":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:5119:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:500:8957":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:13574:19631":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:42064:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"11:311:33301":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:40398:28253":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:2715:14393":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:2443:14382":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:1008:31984":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:506:8958":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:779:2134":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:21234:2565":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:8739:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11753:15739":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:40320:2164":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:6692:15350":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"14:221:14311":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:819:2135":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:690:19738":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:5074:12484":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:10110:15564":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:11091:2468":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:3580:2109":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:6197:15325":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:7240:33590":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:4606:12434":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:41573:2328":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:9032:15300":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:5754:2114":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12936:18915":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:7679:15384":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12646:18897":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:11988:643":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:13303:19632":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:1773:2115":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"11:2180:33293":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:1746:28235":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:22583:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:7505:12643":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:5874:8556":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11354:15496":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11815:18370":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:42367:7772":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10390:15589":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:45612:2615":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:21952:2339":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:7370:27421":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:4630:21188":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:582:15468":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:4:1019":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:4401:12412":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"9:393:14171":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:1702:2374":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:41799:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:4944:12470":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:40157:7959":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:23162:2336":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:5745:2489":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:7657:2069":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:10444:15585":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:11924:18376":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:3927:2348":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:2978:2166":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:9706:15491":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:6044:32933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"11:695:2118":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:1048:33292":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:1506:9851":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"9:330:14226":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"10:44:14280":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:3667:2329":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:11416:15499":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:9100:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:5529:8148":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:7445:15369":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:42859:28214":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:6872:15356":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:5301:15280":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:2781:2546":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:2960:7757":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:5890:13131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"18:96:19719":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"18:755:19741":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:9065:20765":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:9022:20160":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:9734:15492":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4389:12411":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:6427:15339":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:919:2117":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13548:19641":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:10910:2194":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:5469:2270":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:43343:7805":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:626:30861":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:5955:13134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:6711:13555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:11999:1505":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13155:15506":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:8659:15470":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:40911:8130":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:13659:15534":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:400:15466":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:1270:2126":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:43334:7806":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:6386:15337":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:10786:15639":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"11:399:33307":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:43454:7814":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:4564:14951":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:13937:19670":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:4469:12420":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:532:8960":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:2926:14402":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12905:18913":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:39238:8204":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:8862:2111":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:43422:7797":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:0:1398":{"crate_id":1,"path":["std"],"kind":"module"},"11:657:2111":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4543:12429":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:12077:18387":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:9850:15519":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:8541:2109":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:2376:2238":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:2663:14391":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:2737:14394":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:7327:2004":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:7609:14125":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:4323:14854":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:11944:27407":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:7732:2129":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:10945:15718":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:40329:2282":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:1681:9868":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8209:2285":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:41587:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:13923:19669":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:13971:19674":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13332:19633":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:4536:14947":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:5406:2460":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:39293:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:2213:2229":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:44008:7866":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:40473:8153":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:41782:2110":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:12372:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:5422:2461":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:6565:9004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4781:12451":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:1479:2116":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:1673:9867":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"11:1838:2130":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:7568:33461":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:4025:2353":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12254:18876":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:8734:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:43409:7796":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:4407:2070":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13697:19649":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:45991:2617":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:474:8953":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"14:202:7873":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:3810:14437":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:7255:2431":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"18:515:19745":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6018:15322":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:11927:20134":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:14015:19679":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:4524:12427":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:3187:27651":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:30365:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:8288:2377":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:8558:2452":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:14403:19704":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:1631:9863":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:3441:14409":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:13914:19668":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:10835:7811":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:6130:13172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:47969:7729":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:13069:18924":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:4735:2367":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:7505:15374":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:41663:2111":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:11483:2334":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:10051:15525":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5799:13124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:14054:19683":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:498:2056":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:45791:2576":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4413:12413":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:20839:2563":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"5:6468:31984":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:6347:15334":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:41723:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:6981:2311":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:41419:2323":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:562:8964":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"18:582:7975":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:2689:14392":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:40150:7958":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:10868:7812":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:8605:15449":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:4142:7940":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:11761:25295":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"15:288:14325":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:12579:18892":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:39152:7921":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:7707:15386":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:8043:15394":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:22091:2340":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:1820:2154":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:547:8962":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:10550:2066":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:14227:19692":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:6619:7897":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:13999:19677":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:40300:7796":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:2688:1998":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:10654:15653":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:6421:2096":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:4193:2270":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:14216:19691":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:3799:2115":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:2963:30956":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:2567:14387":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:8531:2450":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:40892:2312":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:568:8965":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:43810:2281":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:22550:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:4163:2270":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:6809:2550":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"11:1517:14294":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:3371:7901":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:4753:15020":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:22484:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:2332:14377":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:4897:2413":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:494:8956":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:41396:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:11994:743":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:14395:19703":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:9604:15489":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"14:31:14301":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:1045:2124":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:6638:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:2797:8192":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:11776:7832":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:1911:10036":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:12864:18910":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:7168:2107":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:671:19736":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:3729:2333":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"17:14301:19696":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:13981:19675":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:1818:2184":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:6625:2418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:43706:7847":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:933:2120":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:6789:15353":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11726:15738":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12921:18914":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4436:12416":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:12161:18393":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12394:18881":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:4291:12403":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:10253:15560":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:8868:2508":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:11985:1490":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:45658:2581":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:10223:15566":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:10297:2462":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:9160:20276":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:11979:1525":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:7659:8133":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:1591:2133":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:14315:19697":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:44303:8334":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12089:18388":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:6136:12320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6250:15328":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9777:15515":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:1669:31984":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:40412:8149":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:47523:2619":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:5491:2463":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"10:36:33288":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12982:18918":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13055:18923":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:2201:2107":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:2918:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:6128:15323":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:595:8969":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:5068:12483":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6438:15340":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:9866:15520":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:9875:15545":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:4228:2383":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:7530:20333":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:10511:15625":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:5437:2462":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:11045:15686":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:986:2125":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:62:8582":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:2926:2002":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:5587:8139":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:1841:2190":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:4955:2423":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:46727:2578":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:6815:15354":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:4392:2270":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:3180:30867":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:40450:8140":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:32097:2471":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:20635:28256":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:7275:2005":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5025:12479":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:20853:8218":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:3231:7756":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:2982:2167":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:8144:2313":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:10138:20244":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:47865:7721":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"11:2186:33295":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:40342:8137":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:47920:7726":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:4694:2388":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6232:15327":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:47663:2625":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:14007:19678":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4518:12426":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:11992:746":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:11498:15503":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:7041:2481":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:44291:8341":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:5994:13138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:47931:7727":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:40430:8159":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10330:15588":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4800:12454":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11388:15498":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:40380:8146":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:8322:2416":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:8969:20292":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:2105:15602":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:9274:2284":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:43660:7821":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:5590:15303":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:40035:7925":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:9083:15455":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:14037:19681":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:10049:2110":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:44275:8333":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:12669:2139":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:10994:15692":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:2929:2003":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:410:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:1099:30927":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:5277:7789":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:12446:7983":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:45636:2575":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10812:15638":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:8632:15469":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:9474:20952":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:41502:28009":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:2468:2258":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:12017:18383":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:4111:7939":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:10499:15624":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:13905:19667":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:2138:30881":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:5073:20217":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4938:12469":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:9017:20388":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:41561:2327":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:9181:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:256:33962":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:11548:8344":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:2895:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:39335:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:20607:7975":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"18:699:19739":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:579:8967":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10863:15489":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:6484:15343":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:7278:13936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:9913:15530":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:7924:2150":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:30437:28087":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:1500:2118":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"11:760:2115":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:5554:2466":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:7013:2147":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:12333:18879":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:47999:7731":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:4740:12446":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:4039:2355":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:3179:28556":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:5608:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13492:19639":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"11:1818:2109":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"11:332:33303":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:3985:2351":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"18:644:34492":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:10339:15587":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:1638:9864":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:41731:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:1663:9866":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:43839:7834":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:10671:15678":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:42898:28237":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:927:2119":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:46213:2644":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:11599:7823":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:9318:15484":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:4001:2114":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:1982:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:5987:13137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:14205:19690":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:11123:8353":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:46043:2629":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:4908:12466":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:41944:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:10931:15706":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:3186:15636":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:1696:9870":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:11343:7836":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:3510:2256":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:4434:7937":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:10520:15626":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:6775:13559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:3519:15659":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:47725:2646":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:530:33587":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"14:0:1866":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:4362:32001":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:2465:14383":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:10471:15622":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:9655:15490":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:44056:7867":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:42596:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:3744:14419":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:7360:2115":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:5775:13122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:14236:19693":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4729:12445":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:2781:14396":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:40901:8129":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:1545:9856":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8792:2467":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13368:19634":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:10336:7822":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:5363:15298":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:2857:14399":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:14044:19682":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:2167:31010":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:2825:14398":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:40237:2213":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:13043:18922":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:4770:12450":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:7196:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:12303:18877":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:599:34507":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5900:13132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:41984:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:43962:7863":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:7631:15382":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:6270:2114":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4556:12431":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:11315:20317":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"11:1822:2111":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:42888:2447":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:14:1978":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:12826:18907":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"15:394:14337":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:5836:13128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:14197:19689":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:11178:15726":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:7592:15380":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:1527:9854":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:10013:15531":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:4824:12457":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:9188:15482":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:8004:2298":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:7227:28126":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:43372:7808":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:6713:14319":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:43500:7845":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:3139:8205":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8916:2507":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:2830:8198":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:7519:15468":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:9867:2258":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:13125:18928":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:9952:15527":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:6832:8124":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:7494:15373":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:5044:12480":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:10025:2109":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:44145:7871":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:40877:2096":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:44134:7870":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:2853:8203":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"12:0:1864":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:43624:7851":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:660:19735":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:46091:2577":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:2777:8188":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:1558:2109":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10529:15672":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:7407:15367":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:8854:2511":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:11030:26777":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:1470:2113":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8449:2447":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:4328:12406":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:41525:2335":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:44120:7869":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:42642:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:2352:14378":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:7229:8134":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:11949:2095":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:10038:15526":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12004:18382":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"15:327:14330":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:40463:8152":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:41714:8282":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:8252:15404":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:1461:2112":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13179:18931":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11371:15497":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6516:15345":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:5233:31984":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:11767:18368":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:8228:2330":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:11847:7856":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:7855:15392":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:45861:2594":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:5567:15302":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:5916:15317":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:7294:7874":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:4754:12448":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"11:749:2114":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:3058:14406":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:9206:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:7020:22768":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:9887:15539":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:3201:2132":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:2840:8200":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"11:793:2116":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:9899:15535":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:6240:2502":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:7706:2093":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:6303:15330":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:10350:7820":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:12966:18917":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:8315:2433":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:14329:19698":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:10303:15615":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:40131:7956":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:12133:18391":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:47946:7728":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:40029:2085":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:5978:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:1733:9873":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:12106:18389":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:5281:7790":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:6738:8143":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:923:2118":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4685:12440":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:149:14353":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:11258:2474":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:10430:15620":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"10:0:1862":{"crate_id":10,"path":["adler"],"kind":"module"},"18:507:34492":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:9124:2262":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:527:2061":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:10266:15559":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:11888:18374":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:43110:7799":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4973:12474":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:12359:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:956:2123":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:7999:20339":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:4261:7928":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:10377:15591":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:6834:13563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:0:1869":{"crate_id":17,"path":["object"],"kind":"module"},"16:7553:15378":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:14177:19687":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:4568:12432":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:44351:2549":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:12002:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:42626:28234":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:47984:7730":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"8:0:1860":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"18:636:34490":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:1915:2155":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:49867:2572":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:11832:18371":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:9296:15452":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:7038:33679":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:21203:2258":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:854:2110":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:5639:15306":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:42851:7988":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:12346:15681":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:21843:27786":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:6137:2692":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:10969:15720":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:40522:8141":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12727:18902":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:5080:12485":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:9344:34028":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:4941:2270":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:43514:7842":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:4308:2384":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:4996:15071":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:11019:26760":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:9426:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:8902:30357":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:7289:15365":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12377:18880":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:46137:2583":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:2824:8197":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:11989:645":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6156:13173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:11264:15731":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:2210:2228":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:13557:19642":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:1973:15567":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:11034:15721":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:4441:14924":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:1765:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:2691:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:8987:20279":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"9:237:2447":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:2746:8166":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:8420:7828":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:1586:2132":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:10088:20954":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:10716:2417":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:22070:28190":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:8137:2311":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:39313:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:6763:15352":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"18:609:34516":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:7678:2066":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:14189:19688":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13096:18926":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:10935:20252":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:5882:13130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:40280:2226":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:11872:18373":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:5398:15300":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:9716:34017":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:8277:2385":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6317:15331":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:12539:18889":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:2920:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:12457:18885":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:9688:28958":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:728:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:11790:7830":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:11801:7827":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:14350:19700":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:9213:7763":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13109:18927":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:9048:15454":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:9656:30753":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:11109:15723":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:9469:2250":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:43362:7807":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:3220:14407":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:14359:19701":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:11995:1509":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:7128:22715":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:9571:34355":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:14282:19695":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:7376:7893":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6886:15357":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:5381:2270":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:41655:2110":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:3149:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:9095:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:4794:12453":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:10758:20319":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:7256:2210":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:2771:8189":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:3181:23651":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:2760:8187":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:45898:2649":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:11978:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:1649:9865":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:43556:2285":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:10066:15553":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11520:15504":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:11539:7739":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:8138:15399":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:1569:2115":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:6820:13562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:47885:7723":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:10226:2473":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:47874:7722":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:39253:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:4008:28459":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:1666:1092":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"4:0:1859":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:20851:29405":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"5:3719:2150":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:5767:13121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:5008:12477":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:9877:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:30309:2145":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:3580:14410":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:5737:15312":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:11488:8345":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:8824:2469":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:10923:2463":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:5414:33595":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:4868:15039":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:40143:7957":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:7463:14096":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:6761:32021":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4506:12425":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:7529:12647":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:40360:8144":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:2133:15561":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:11210:15727":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:6571:15348":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:22616:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:2556:2295":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:41672:2431":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:9221:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:2399:14380":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:44155:7872":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:9966:15489":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:1979:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:7243:2209":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:45742:2622":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"11:798:2119":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:6461:2499":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:7012:33393":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:4073:2110":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:5342:15297":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:6067:13144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:11036:26762":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:5612:15304":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11007:15691":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:46805:2584":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12354:15679":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4862:12462":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:9030:15364":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:7213:2211":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:10621:15677":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:6786:31999":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:4626:21184":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:1562:2111":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:4603:7949":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:5771:2490":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:4723:12444":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:43574:7817":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11250:15694":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:908:2115":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:6540:15346":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:6705:13554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10199:15568":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:44283:8338":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11164:15716":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:21058:2554":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:9673:26754":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:21452:2562":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:7575:12653":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:8980:2060":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:4304:12404":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:43760:7849":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:653:9016":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:3220:2304":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:3042:14405":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:7331:33796":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:45821:2582":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:10780:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:6726:13557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:21671:2258":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:20650:28551":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"11:1538:14295":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:3209:2130":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12435:18884":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8547:2451":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12691:18900":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:2497:14384":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:4965:15064":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:4323:7933":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:8313:2435":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:47905:7725":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:261:34397":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:3160:7923":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"14:165:14302":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:2689:7754":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"18:574:34492":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:10957:15719":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:6717:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6502:15344":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12792:18905":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6396:15338":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:30913:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:10194:7824":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4315:12405":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:10507:2306":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"11:403:33311":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:5386:2459":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4638:12437":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:43830:7835":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:43435:7813":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:8270:2326":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:40441:8151":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:6629:7898":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:11333:22720":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:4592:14955":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:6384:20209":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"5:2240:31012":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:7739:15387":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:5651:15307":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:4900:15047":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"18:707:7830":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:43383:7798":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:6214:15326":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:2314:14376":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:9044:20255":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:914:2116":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:42669:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:3511:2114":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:12003:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:46645:2630":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:21:684":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:10403:15619":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:7463:15370":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:7860:2251":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:9272:2190":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:6648:9994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:40870:28204":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:5058:12482":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:41824:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:6470:15342":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:7870:2248":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:13513:19640":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13803:19659":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"9:450:14170":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:42876:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:7622:15381":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"9:52:14189":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:7916:2296":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:7632:2258":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:258:31984":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:4560:2406":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:8399:2446":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:11791:18369":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"11:644:2110":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:7546:12649":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:10156:7810":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:10486:15623":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:55:14345":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"11:723:2112":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:6289:15329":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:6348:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:3327:2115":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:582:2083":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:6649:8136":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"11:285:33308":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:1636:8115":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:42144:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:5829:13127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:12001:1563":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:7589:26772":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:2208:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:892:2109":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:5805:13125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:2923:2001":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:11998:1508":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:12671:18899":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"14:40:18370":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:4177:2382":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:3991:2352":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:1439:2111":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:3732:2332":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:9462:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:4872:12463":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4496:12424":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:9590:8309":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:2032:2150":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:8489:2449":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:5372:2458":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:40270:2227":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:6077:13145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13719:19651":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:5067:15094":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:2458:30901":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"11:1852:2132":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:44533:2691":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:7042:2114":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:11977:941":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:6537:2496":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:20667:28554":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:1574:2130":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:554:8963":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:43678:7819":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:8222:2331":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:10069:2184":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:4716:12443":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:1285:2125":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:10832:15634":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:12000:793":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:10568:15632":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:9744:34148":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:42346:7762":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:13795:19658":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:11115:23047":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:7433:15368":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:6598:13551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10148:15563":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4854:12461":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:12577:2692":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:1709:9871":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10249:15573":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:6841:13564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:6185:20290":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:40195:2212":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:5615:2502":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:22103:2343":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:4126:22719":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:10361:15613":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:8841:15475":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:11993:747":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:4156:2380":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11074:15504":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:11558:14334":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:7099:15364":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:11982:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:4456:12418":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13749:19653":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:21110:2558":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:47413:2585":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:44575:7743":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:11220:15728":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:681:19737":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:10229:7817":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4463:12419":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6720:13556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11467:15502":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:22385:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:13854:19662":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:4691:2415":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:1075:15532":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:1565:2114":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11623:15508":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:1782:2174":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:22352:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:11127:15503":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:44311:8353":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:123:8637":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:46235:2650":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"11:667:2117":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"11:630:2109":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:4698:15013":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:5849:13087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:6389:2111":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11992:18381":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"11:2060:2126":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:3977:2350":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:7062:30870":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:45880:2643":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:20986:8218":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:11781:7828":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:13757:19654":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:526:8959":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:5626:15305":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:3299:2302":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:3184:27654":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:43873:7844":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:40370:8145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:9217:7771":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:14341:19699":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:1059:2125":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:12394:29374":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:10914:20362":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:8068:15395":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"13:0:1865":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:6036:13143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:11997:1507":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:14150:19685":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:8810:2468":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:40666:8157":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4929:12468":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:13787:19657":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:7484:15372":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11852:18372":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:8887:2506":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:43820:7846":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:950:2122":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:40044:7961":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4848:12460":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:4256:7927":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"18:0:1870":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4787:12452":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:273:2006":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:481:19743":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:640:2091":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:39446:7934":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:9105:2512":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:3166:7922":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:2519:14385":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"11:1845:2131":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:30543:28086":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:7693:15385":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:21964:28111":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4949:12471":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:43444:7816":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:10117:7823":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:2681:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:5816:2498":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:5527:7896":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:2844:8201":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:10953:2470":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"11:844:2123":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:2217:2230":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:11525:8347":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:7833:15391":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13167:18930":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:5979:13136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:44330:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:8165:2257":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12148:18392":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:11990:748":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:40498:8155":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:2957:31983":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:12502:18887":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6986:15362":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:44299:8340":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:2632:2297":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:7511:12644":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:13604:19645":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:45690:2611":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:3492:2207":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:1892:2205":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:5299:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:358:2081":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:7280:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:2687:30935":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:13427:19635":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:9223:7769":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4678:2346":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:40086:7962":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:2759:14395":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:9171:2207":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:13639:19630":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:7061:33626":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:864:2111":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:1299:2127":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:1068:2126":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:11020:15690":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:624:34500":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:10581:15654":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:1254:2124":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:4420:12414":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:10633:15633":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:2793:8190":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:6915:33763":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"13:110:33364":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:7052:2138":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:0:1863":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:21025:2560":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"11:2168:33298":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6939:15360":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:44482:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:46569:2618":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6171:13174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:40056:27955":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:11960:20768":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:7523:12646":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:10280:15614":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11421:2333":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"0:0:1748":{"crate_id":0,"path":["sysroot"],"kind":"module"},"1:1430:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:45590:2610":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:2388:2244":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:7515:15375":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"11:805:2120":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:1135:30928":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:9821:15517":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:5704:15310":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:9926:15529":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:8472:2448":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:8125:15398":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:44546:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"18:727:19740":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:1500:9850":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:2362:2234":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"11:1121:2127":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:2698:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:44083:7868":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:7900:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11996:1506":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:4368:12408":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:635:2090":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:14259:19694":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:5622:2503":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:521:19742":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:482:8954":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:45720:2616":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:14026:19680":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:39626:23992":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:4047:2357":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11329:15495":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:13771:19655":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:4396:14903":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:3295:14408":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:11235:26774":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:9016:15299":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:4812:2362":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:20801:2258":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:6978:21124":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:3407:2270":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:1603:9862":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:41482:28181":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:10555:15674":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:944:2121":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:8314:2434":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:11591:15506":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:21979:28202":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:5988:8160":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:7739:2193":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:46851:2590":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:2589:14388":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:43977:7864":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4963:12473":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:40190:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:47894:7724":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10845:15635":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:6008:13139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13435:19636":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4984:12475":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:46310:27952":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:6239:33676":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:8872:15476":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:10097:15565":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:2750:2545":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:6316:31984":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:632:2089":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:7525:15376":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:12174:18394":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:4789:2368":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:7753:15388":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:11565:14334":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:5553:15301":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:1717:9872":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:47771:2597":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:40680:8158":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:8711:15471":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:2592:2287":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4887:12464":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"11:1826:2114":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13778:19656":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:5684:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:1520:9853":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6850:13565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:8296:2331":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:8152:15400":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6028:13142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:4035:2354":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:5015:12478":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:3867:14470":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:885:2113":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:2814:8194":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:7539:15377":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:7084:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:2570:26754":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:6456:15341":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:9153:15481":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:44525:2690":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:7584:15379":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:46357:28015":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:48022:7732":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:11285:20044":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:4628:21186":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:6288:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:41538:2326":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:7540:12648":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:4164:2381":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:4020:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:2378:2239":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:3777:14428":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:4476:14935":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:4031:31984":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"13:226:33317":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"9:507:14173":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:5231:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:21104:2556":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"14:160:14301":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:41453:2325":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:5959:15319":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:8794:15474":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:2743:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:4748:12447":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:10161:15562":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:10308:7821":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:491:34524":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:8924:15478":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:4252:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:12605:18894":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:12318:18878":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:46021:2623":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:40096:7963":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:13964:19673":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:2421:14381":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:7652:2140":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:3593:2110":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:4845:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:22715:2342":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:6554:15347":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:2802:8196":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:7908:20342":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:3933:2347":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:39418:7909":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:41904:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"9:357:14186":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:42691:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:7633:2082":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:10267:7818":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:4783:30789":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:40108:7844":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:11984:1406":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:7076:2111":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:5689:15309":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:7225:8135":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:5818:13126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:22682:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:14380:19702":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:2220:31015":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:10417:15590":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:6894:26779":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:40389:8147":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:504:15467":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:39191:7758":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:7665:15383":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"15:0:1867":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:13140:18929":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:44295:8339":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:7994:20340":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4842:12459":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:9118:15480":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:7180:2108":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:9359:28453":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"5:2128:2056":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:12035:18384":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:6688:9977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:9469:7985":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:32137:8252":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:21896:28123":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:8021:15393":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:43464:7815":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:21042:2258":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:8900:2509":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:39379:2101":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4380:12410":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10323:15617":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:7022:2111":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4833:12458":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:40652:2283":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"15:306:14326":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:6153:26778":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:10504:2304":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:7304:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:6796:13560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:8109:2252":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:3076:2168":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:2637:14390":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:5877:13129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:5972:15320":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:4380:2378":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:12365:15680":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:41864:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:6673:20209":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"11:1858:2133":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:11103:2469":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:1843:2191":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:4489:12423":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:2403:1876":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:1595:9861":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12994:18919":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:4814:15033":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:9561:15488":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:7655:2143":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:40207:28126":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5793:13123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:9990:15533":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:39357:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:42586:28172":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:2160:8218":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:3453:2254":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:21928:28128":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:8105:15397":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:30379:28088":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:4620:14959":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:9182:23397":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:7262:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:44279:8336":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"9:486:14169":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:39411:8206":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5863:13088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11905:18375":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:6323:15332":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"11:2049:2125":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:1780:2173":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:7517:12645":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:9442:34435":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:42614:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:4425:32001":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:10402:2467":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"11:1027:14290":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:4733:2366":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2469:7979":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4446:12417":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:3262:2307":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:6160:33755":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:9409:33946":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:10981:15693":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"11:1068:14291":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:1077:2127":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10351:15618":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"18:652:34492":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:22649:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:4032:14587":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:40421:8150":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:8740:15472":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4818:12456":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:3894:14473":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:673:2092":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:5738:2488":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:6671:9979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13673:19647":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"18:538:19747":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:11669:15736":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5994:15321":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:7727:2128":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"11:2033:2124":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:7552:12650":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:11454:15501":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:3260:2306":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:6531:33778":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"5:3235:2133":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10906:15640":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:44363:8354":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:21236:2559":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:22077:2341":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:434:14350":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:2908:2146":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:1543:2270":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:14102:19684":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:1423:2110":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:7121:2111":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:1520:2149":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:5962:2502":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12566:18891":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:4616:2352":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:7843:2249":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:13456:19638":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:43106:27816":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:11564:8346":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:7266:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:43283:28454":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:8997:15450":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:2819:8195":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:10810:23043":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:5100:15103":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"11:1012:2126":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:10799:15637":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:20620:28256":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:43864:2085":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}