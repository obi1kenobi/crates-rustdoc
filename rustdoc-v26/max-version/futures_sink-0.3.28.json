{"root":"0:0:1720","crate_version":"0.3.28","includes_private":true,"index":{"0:31:1703":{"id":"0:31:1703","crate_id":0,"name":"poll_close","span":{"filename":"futures-sink/src/lib.rs","begin":[158,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:24124":{"id":"2:12116:24124","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8135"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11:128":{"id":"0:11:128","crate_id":0,"name":"Error","span":{"filename":"futures-sink/src/lib.rs","begin":[54,4],"end":[54,15]},"visibility":"default","docs":"The type of value produced by the sink when an error occurs.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"2:12052:2079":{"id":"2:12052:2079","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41396:179","prim@char":"1:11888:419","self::pattern":"2:11712:8135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12025:1708":{"id":"2:12025:1708","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5383:31907":{"id":"5:5383:31907","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1719","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:1719","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:128":{"id":"0:44:128","crate_id":0,"name":"Error","span":{"filename":"futures-sink/src/lib.rs","begin":[191,8],"end":[191,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32020:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:12:1672":{"id":"0:12:1672","crate_id":0,"name":"poll_ready","span":{"filename":"futures-sink/src/lib.rs","begin":[68,4],"end":[68,95]},"visibility":"default","docs":"Attempts to prepare the `Sink` to receive a value.\n\nThis method must be called and return `Poll::Ready(Ok(()))` prior to\neach call to `start_send`.\n\nThis method returns `Poll::Ready` once the underlying sink is ready to\nreceive data. If this method returns `Poll::Pending`, the current task\nis registered to be notified (via `cx.waker().wake_by_ref()`) when `poll_ready`\nshould be called again.\n\nIn most cases, if the sink encounters an error, the sink will\npermanently be unable to receive items.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:22:1696":{"id":"0:22:1696","crate_id":0,"name":"poll_flush","span":{"filename":"futures-sink/src/lib.rs","begin":[130,4],"end":[132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12049:23519":{"id":"2:12049:23519","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:128":{"id":"0:37:128","crate_id":0,"name":"Error","span":{"filename":"futures-sink/src/lib.rs","begin":[169,8],"end":[169,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32020:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12022:2208":{"id":"2:12022:2208","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12043:2256":{"id":"2:12043:2256","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12010":{"id":"2:12010","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12011:811","2:12012:2039","2:12013:31230","2:12014:31231","2:12016:31232","2:12019:23981","2:12020:31233","2:12021:314","2:12022:2208","2:12023:2249","2:12025:1708","2:12027:24084","2:12029:1714","2:12031:31234","2:12032:31235","2:12033:24107","2:12034:24108","2:12035:28660","2:12036:28633","2:12037:20012","2:12038:28655","2:12039:28644","2:12040:22423","2:12041:31236","2:12042:28661","2:12043:2256","2:12046:23517","2:12049:23519","2:12052:2079","2:12056:2038","2:12060:22422","2:12063:24116","2:12066:24118","2:12069:31237","2:12072:31238","2:12075:24120","2:12078:24122","2:12081:31239","2:12084:31240","2:12087:1937","2:12090:31241","2:12093:31242","2:12096:31243","2:12099:31244","2:12101:31245","2:12103:31246","2:12105:31247","2:12106:31248","2:12107:31249","2:12110:31250","2:12113:21334","2:12116:24124","2:12119:31251","2:12122:31252","2:12125:31253","2:12128:31254","2:12130:23365","2:12131:23985","2:12132:23366","2:12133:23362","2:12134:23361","2:12135:31255","2:12137:2448","2:12138:31256"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:41:1703":{"id":"0:41:1703","crate_id":0,"name":"poll_close","span":{"filename":"futures-sink/src/lib.rs","begin":[185,8],"end":[187,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["_",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:24120":{"id":"2:12075:24120","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8135","str::rsplitn":"2:12078:24122"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43461:8124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12056:2038":{"id":"2:12056:2038","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41396:179","prim@char":"1:11888:419","self::pattern":"2:11712:8135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"futures-sink/src/lib.rs","begin":[212,4],"end":[239,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sink","id":"0:9:1660","args":{"angle_bracketed":{"args":[{"type":{"generic":"Item"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:2741:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sink","id":"0:9:1660","args":{"angle_bracketed":{"args":[{"type":{"generic":"Item"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"5:280:1719","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:52:128","0:53:1672","0:54:1688","0:55:1696","0:56:1703"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:42":{"id":"0:42","crate_id":0,"name":null,"span":{"filename":"futures-sink/src/lib.rs","begin":[190,4],"end":[210,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sink","id":"0:9:1660","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::collections::VecDeque","id":"5:4321:245","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:44:128","0:45:1672","0:46:1688","0:47:1696","0:48:1703"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12034:24108":{"id":"2:12034:24108","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12033:24107"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12090:31241":{"id":"2:12090:31241","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11712:8135","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::matches":"2:12087:1937"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43579:8153","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12020:31233":{"id":"2:12020:31233","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12011:811":{"id":"2:12011:811","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11888:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:23517":{"id":"2:12046:23517","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:1696":{"id":"0:47:1696","crate_id":0,"name":"poll_flush","span":{"filename":"futures-sink/src/lib.rs","begin":[203,8],"end":[205,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["_",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12072:31238":{"id":"2:12072:31238","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11712:8135","str::split":"2:12060:22422","prim@char":"1:11888:419","str::split_terminator":"2:12069:31237"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43425:8154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:31246":{"id":"2:12103:31246","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12021:314":{"id":"2:12021:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12022:2208","`u8`":"1:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12031:31234":{"id":"2:12031:31234","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11894:1397","str::slice_mut_unchecked":"2:12032:31235","crate::ops::Index":"2:2981:1999"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12069:31237":{"id":"2:12069:31237","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11712:8135","str::split":"2:12060:22422","prim@char":"1:11888:419","`DoubleEndedIterator`":"2:7240:121","str::rsplit_terminator":"2:12072:31238"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43407:8155","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12084:31240":{"id":"2:12084:31240","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:31243":{"id":"2:12096:31243","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11712:8135","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::match_indices":"2:12093:31242"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43525:8151","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12131:23985":{"id":"2:12131:23985","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39552:23980","Self::is_ascii":"2:12130:23365"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39552:23980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:128":{"id":"0:52:128","crate_id":0,"name":"Error","span":{"filename":"futures-sink/src/lib.rs","begin":[213,8],"end":[213,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"Sink","id":"0:9:1660","args":{"angle_bracketed":{"args":[{"type":{"generic":"Item"}}],"bindings":[]}}}}}}}},"0:19:128":{"id":"0:19:128","crate_id":0,"name":"Error","span":{"filename":"futures-sink/src/lib.rs","begin":[120,4],"end":[120,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"Sink","id":"0:9:1660","args":{"angle_bracketed":{"args":[{"type":{"generic":"Item"}}],"bindings":[]}}}}}}}},"2:12038:28655":{"id":"2:12038:28655","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12039:28644"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43631:8138","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:31256":{"id":"2:12138:31256","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4533:31256"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43674:8147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:31255":{"id":"2:12135:31255","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4535:31255"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43656:8146","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12042:28661":{"id":"2:12042:28661","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43649:8136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1672":{"id":"0:20:1672","crate_id":0,"name":"poll_ready","span":{"filename":"futures-sink/src/lib.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12037:20012":{"id":"2:12037:20012","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43343:2617","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:23366":{"id":"2:12132:23366","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:1688":{"id":"0:54:1688","crate_id":0,"name":"start_send","span":{"filename":"futures-sink/src/lib.rs","begin":[222,8],"end":[224,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["item",{"generic":"Item"}]],"output":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12081:31239":{"id":"2:12081:31239","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:9:1660":{"id":"0:9:1660","crate_id":0,"name":"Sink","span":{"filename":"futures-sink/src/lib.rs","begin":[52,0],"end":[117,1]},"visibility":"public","docs":"A `Sink` is a value into which other values can be sent, asynchronously.\n\nBasic examples of sinks include the sending side of:\n\n- Channels\n- Sockets\n- Pipes\n\nIn addition to such \"primitive\" sinks, it's typical to layer additional\nfunctionality, such as buffering, on top of an existing sink.\n\nSending to a sink is \"asynchronous\" in the sense that the value may not be\nsent in its entirety immediately. Instead, values are sent in a two-phase\nway: first by initiating a send, and then by polling for completion. This\ntwo-phase setup is analogous to buffered writing in synchronous code, where\nwrites often succeed immediately, but internally are buffered and are\n*actually* written only upon flushing.\n\nIn addition, the `Sink` may be *full*, in which case it is not even possible\nto start the sending process.\n\nAs with `Future` and `Stream`, the `Sink` trait is built from a few core\nrequired methods, and a host of default methods for working in a\nhigher-level way. The `Sink::send_all` combinator is of particular\nimportance: you can use it to send an entire stream to a sink, which is\nthe simplest way to ultimately consume a stream.","links":{},"attrs":["#[must_use = \"sinks do nothing unless polled\"]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:11:128","0:12:1672","0:13:1688","0:14:1696","0:15:1703"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":["0:42","0:24","0:49","0:35","0:16"]}}},"5:5398:31910":{"id":"5:5398:31910","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12033:24107":{"id":"2:12033:24107","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12034:24108"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:128":{"id":"0:27:128","crate_id":0,"name":"Error","span":{"filename":"futures-sink/src/lib.rs","begin":[144,4],"end":[144,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Deref","id":"2:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Sink","id":"0:9:1660","args":{"angle_bracketed":{"args":[{"type":{"generic":"Item"}}],"bindings":[]}}}}}}}},"0:53:1672":{"id":"0:53:1672","crate_id":0,"name":"poll_ready","span":{"filename":"futures-sink/src/lib.rs","begin":[215,8],"end":[220,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12060:22422":{"id":"2:12060:22422","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11712:8135","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::split_whitespace":"2:12038:28655","str::rsplit":"2:12066:24118"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43357:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1703":{"id":"0:56:1703","crate_id":0,"name":"poll_close","span":{"filename":"futures-sink/src/lib.rs","begin":[233,8],"end":[238,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:1672":{"id":"0:45:1672","crate_id":0,"name":"poll_ready","span":{"filename":"futures-sink/src/lib.rs","begin":[193,8],"end":[195,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["_",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:31245":{"id":"2:12101:31245","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12134:23361":{"id":"2:12134:23361","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5400:2641":{"id":"5:5400:2641","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:1696":{"id":"0:14:1696","crate_id":0,"name":"poll_flush","span":{"filename":"futures-sink/src/lib.rs","begin":[103,4],"end":[103,95]},"visibility":"default","docs":"Flush any remaining output from this sink.\n\nReturns `Poll::Ready(Ok(()))` when no buffered items remain. If this\nvalue is returned then it is guaranteed that all previous values sent\nvia `start_send` have been flushed.\n\nReturns `Poll::Pending` if there is more work left to do, in which\ncase the current task is scheduled (via `cx.waker().wake_by_ref()`) to wake up when\n`poll_flush` should be called again.\n\nIn most cases, if the sink encounters an error, the sink will\npermanently be unable to receive items.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12019:23981":{"id":"2:12019:23981","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11279:8139"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12016:31232":{"id":"2:12016:31232","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12014:31231"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1720":{"id":"0:0:1720","crate_id":0,"name":"futures_sink","span":{"filename":"futures-sink/src/lib.rs","begin":[1,0],"end":[240,1]},"visibility":"public","docs":"Asynchronous sinks\n\nThis crate contains the `Sink` trait which allows values to be sent\nasynchronously.","links":{},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:32:1710","0:9:1660"],"is_stripped":false}}},"2:12133:23362":{"id":"2:12133:23362","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12032:31235":{"id":"2:12032:31235","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11894:1397","crate::ops::IndexMut":"2:2985:2000","str::slice_unchecked":"2:12031:31234"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:1696":{"id":"0:30:1696","crate_id":0,"name":"poll_flush","span":{"filename":"futures-sink/src/lib.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:31249":{"id":"2:12107:31249","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8135"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11737:8130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12128:31254":{"id":"2:12128:31254","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11673:127","`FromStr`":"2:11672:2784"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11672:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11672:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5382":{"id":"5:5382","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5383:31907","5:5384:8444","5:5387:31908","5:5390:31909","5:5398:31910","5:5399:31911","5:5400:2641","5:5401:23364","5:5402:23363"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:29:1688":{"id":"0:29:1688","crate_id":0,"name":"start_send","span":{"filename":"futures-sink/src/lib.rs","begin":[150,4],"end":[152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["item",{"generic":"Item"}]],"output":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:31242":{"id":"2:12093:31242","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11712:8135","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::rmatch_indices":"2:12096:31243"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43507:8150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12063:24116":{"id":"2:12063:24116","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11535:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:31248":{"id":"2:12106:31248","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1688":{"id":"0:21:1688","crate_id":0,"name":"start_send","span":{"filename":"futures-sink/src/lib.rs","begin":[126,4],"end":[128,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["item",{"generic":"Item"}]],"output":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:1703":{"id":"0:48:1703","crate_id":0,"name":"poll_close","span":{"filename":"futures-sink/src/lib.rs","begin":[207,8],"end":[209,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["_",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:31252":{"id":"2:12122:31252","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8135"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:1688":{"id":"0:39:1688","crate_id":0,"name":"start_send","span":{"filename":"futures-sink/src/lib.rs","begin":[175,8],"end":[179,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["item",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23:1703":{"id":"0:23:1703","crate_id":0,"name":"poll_close","span":{"filename":"futures-sink/src/lib.rs","begin":[134,4],"end":[136,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5390:31909":{"id":"5:5390:31909","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1672":{"id":"0:28:1672","crate_id":0,"name":"poll_ready","span":{"filename":"futures-sink/src/lib.rs","begin":[146,4],"end":[148,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12130:23365":{"id":"2:12130:23365","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:28644":{"id":"2:12039:28644","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12038:28655"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43640:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:2448":{"id":"2:12137:2448","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4536:2448"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43665:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12012:2039":{"id":"2:12012:2039","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:1696":{"id":"0:40:1696","crate_id":0,"name":"poll_flush","span":{"filename":"futures-sink/src/lib.rs","begin":[181,8],"end":[183,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["_",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5402:23363":{"id":"5:5402:23363","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12134:23361"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12013:31230":{"id":"2:12013:31230","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12036:28633":{"id":"2:12036:28633","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43333:8141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:31247":{"id":"2:12105:31247","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12035:28660":{"id":"2:12035:28660","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43327:8142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:31250":{"id":"2:12110:31250","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8135"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"futures-sink/src/lib.rs","begin":[119,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sink","id":"0:9:1660","args":{"angle_bracketed":{"args":[{"type":{"generic":"Item"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:2741:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sink","id":"0:9:1660","args":{"angle_bracketed":{"args":[{"type":{"generic":"Item"}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"S"}}},"items":["0:19:128","0:20:1672","0:21:1688","0:22:1696","0:23:1703"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5399:31911":{"id":"5:5399:31911","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:280:1719","`String`":"5:7241:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1719","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12125:31253":{"id":"2:12125:31253","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8135"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12029:1714":{"id":"2:12029:1714","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5384:8444":{"id":"5:5384:8444","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:31244":{"id":"2:12099:31244","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"futures-sink/src/lib.rs","begin":[168,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sink","id":"0:9:1660","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:6695:244","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:37:128","0:38:1672","0:39:1688","0:40:1696","0:41:1703"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:13:1688":{"id":"0:13:1688","crate_id":0,"name":"start_send","span":{"filename":"futures-sink/src/lib.rs","begin":[89,4],"end":[89,79]},"visibility":"default","docs":"Begin the process of sending a value to the sink.\nEach call to this function must be preceded by a successful call to\n`poll_ready` which returned `Poll::Ready(Ok(()))`.\n\nAs the name suggests, this method only *begins* the process of sending\nthe item. If the sink employs buffering, the item isn't fully processed\nuntil the buffer is fully flushed. Since sinks are designed to work with\nasynchronous I/O, the process of actually writing out the data to an\nunderlying object takes place asynchronously. **You *must* use\n`poll_flush` or `poll_close` in order to guarantee completion of a\nsend**.\n\nImplementations of `poll_ready` and `start_send` will usually involve\nflushing behind the scenes in order to make room for new messages.\nIt is only necessary to call `poll_flush` if you need to guarantee that\n*all* of the items placed into the `Sink` have been sent.\n\nIn most cases, if the sink encounters an error, the sink will\npermanently be unable to receive items.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["item",{"generic":"Item"}]],"output":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12014:31231":{"id":"2:12014:31231","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5401:23364":{"id":"5:5401:23364","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12133:23362"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:1672":{"id":"0:38:1672","crate_id":0,"name":"poll_ready","span":{"filename":"futures-sink/src/lib.rs","begin":[171,8],"end":[173,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["_",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:1710":{"id":"0:32:1710","crate_id":0,"name":"if_alloc","span":{"filename":"futures-sink/src/lib.rs","begin":[164,0],"end":[164,12]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12040:22423":{"id":"2:12040:22423","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43611:2614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:24122":{"id":"2:12078:24122","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11888:419","str::splitn":"2:12075:24120","self::pattern":"2:11712:8135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43479:8122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12027:24084":{"id":"2:12027:24084","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:1937":{"id":"2:12087:1937","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11712:8135","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::matches":"2:12087:1937"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43561:8152","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12119:31251":{"id":"2:12119:31251","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8135"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12113:21334":{"id":"2:12113:21334","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8135"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:1703":{"id":"0:15:1703","crate_id":0,"name":"poll_close","span":{"filename":"futures-sink/src/lib.rs","begin":[116,4],"end":[116,95]},"visibility":"default","docs":"Flush any remaining output and close this sink, if necessary.\n\nReturns `Poll::Ready(Ok(()))` when no buffered items remain and the sink\nhas been successfully closed.\n\nReturns `Poll::Pending` if there is more work left to do, in which\ncase the current task is scheduled (via `cx.waker().wake_by_ref()`) to wake up when\n`poll_close` should be called again.\n\nIf this function encounters an error, the sink should be considered to\nhave failed permanently, and no more `Sink` methods should be called.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12041:31236":{"id":"2:12041:31236","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43621:8149","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5387:31908":{"id":"5:5387:31908","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:2249":{"id":"2:12023:2249","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"futures-sink/src/lib.rs","begin":[139,0],"end":[161,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"2:2911:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:2741:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:2898:117","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Sink","id":"0:9:1660","args":{"angle_bracketed":{"args":[{"type":{"generic":"Item"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sink","id":"0:9:1660","args":{"angle_bracketed":{"args":[{"type":{"generic":"Item"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"P"}}],"bindings":[]}}}},"items":["0:27:128","0:28:1672","0:29:1688","0:30:1696","0:31:1703"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:46:1688":{"id":"0:46:1688","crate_id":0,"name":"start_send","span":{"filename":"futures-sink/src/lib.rs","begin":[197,8],"end":[201,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["item",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:1696":{"id":"0:55:1696","crate_id":0,"name":"poll_flush","span":{"filename":"futures-sink/src/lib.rs","begin":[226,8],"end":[231,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:41530:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:12501:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44291:195","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:9:1660","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12066:24118":{"id":"2:12066:24118","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11712:8135","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::split":"2:12060:22422"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43375:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:8427:2780":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:1197:2477":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4960:12698":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:6776:13768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:22425:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:42476:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:7846:22199":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:2362:2572":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:6431:15538":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:42153:8068":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:474:9180":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:47721:8050":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:7821:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:9380:15714":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:6553:10035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:47648:2979":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5071:12709":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:11641:18477":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:4294:12629":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"11:326:33186":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:11195:19962":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:11461:8582":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:42449:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:1078:32013":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:1454:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"9:502:14381":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:44104:8569":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:40338:8417":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:7321:2133":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:45622:2909":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12403:18998":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:2636:30980":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:2616:14592":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:44131:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:7781:2582":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:7485:12854":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:40347:8418":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:2720:14596":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:3060:2645":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:32020:1712":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:47072:2940":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:9295:30622":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:22392:2436":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:2589:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:2348:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:6597:2140":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:9228:34366":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:8651:14547":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:9641:15737":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:32060:8488":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"0:9:1660":{"crate_id":0,"path":["futures_sink","Sink"],"kind":"trait"},"2:41631:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:5910:2832":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:20768:28938":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:20564:30264":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:40083:8237":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:11220:15914":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:9670:15749":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:9148:34357":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:32147:8435":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:7568:14332":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:40324:28487":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4773:12676":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13865:19788":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:8800:2043":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:2116:30737":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:40121:2545":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:526:9186":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"7:32:14349":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:10692:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:2337:14580":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:44283:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:8925:21337":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:2372:2577":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"11:1071:33205":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:41831:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:11145:22767":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:40356:8427":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:9826:15744":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:13721:19778":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:5370:2792":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:41309:29348":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:5686:2818":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:45367:2901":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:13821:19785":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6376:15535":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:4574:25393":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:1614:10107":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:5643:15505":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:47747:8052":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:10010:2618":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:43407:8155":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:8360:15670":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:12646:19014":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:7257:20398":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:1058:30802":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:8907:20382":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:7148:2152":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:11893:1367":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:9098:15685":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:40677:28674":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:21854:28204":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:2749:8434":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:4019:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:11090:15707":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"11:1688:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:13612:19769":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:10354:15817":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:2189:30739":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:9609:22622":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:11891:1049":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:6935:15558":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:4698:12667":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"15:198:14527":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:5320:2789":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:21083:2591":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:8147:2618":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:1667:1087":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:12419:18999":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:8214:15602":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:12330:27903":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:10478:15866":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:4508:2737":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:44376:2165":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:9946:15772":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:11393:2665":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"14:202:8176":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:6369:2460":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:2932:1998":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"13:110:33251":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:8858:15682":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13024:19724":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:4400:15105":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7016:33513":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:7786:2583":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:4782:29882":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:2839:1990":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:6327:15531":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:10840:15696":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:3129:20288":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:6332:23135":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:11308:20983":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:5642:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:5719:2820":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"11:1009:2478":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:6520:15544":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:9409:15715":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:13399:19754":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:13121:19730":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4797:12679":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:7318:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:7590:2432":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:11237:25381":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:7411:15566":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:8170:15600":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:280:1719":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:10516:15861":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:43245:8119":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:1080:2480":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"11:97:33185":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12634:19013":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:1042:32015":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:9696:15733":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:3510:2135":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12522:19006":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4999:12702":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:1519:10096":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:8356:8131":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:7198:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:43621:8149":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:45561:2955":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:2933:15811":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:7595:8402":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:9038:34350":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:6767:15551":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:8141:2617":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:41711:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:5976:15519":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4991:12701":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:20982:2591":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:5386:14547":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:8485:2782":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:4436:2720":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:5926:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:47675:8046":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:20804:2893":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:10272:8125":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:8825:2836":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:5886:15515":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:3585:14613":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:5798:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:6990:2130":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:44092:8576":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:41203:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:2346:2567":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:10705:15904":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:2827:1988":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:4681:2697":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:3142:15816":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"9:481:14377":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:45792:2944":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:6460:15540":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:2741:1706":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:11210:20018":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:9157:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:40196:2560":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:41581:2465":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:10257:15814":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:22524:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:11484:8579":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:7258:14144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:4251:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:6544:15545":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:11732:8132":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:2905:14604":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:7164:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:43525:8151":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:5067:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:13744:19779":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12496:19004":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11136:15911":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:7693:2527":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10527:15897":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:947:2474":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6179:15523":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:12358:18995":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:6024:33075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:4609:12660":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10569:15864":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:21088:2881":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:9062:2595":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6662:15548":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:45822:2950":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:633:30812":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13651:19772":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:9153:8077":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:43357:2618":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:11011:15652":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:4818:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:44152:2875":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:2169:31989":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:6814:13771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:5179:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:5439:2794":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:355:2444":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:21900:28227":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:9424:15716":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"11:2060:2477":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:10691:15903":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:20909:2895":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:12194:18985":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:21431:2877":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:43375:8120":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6598:13761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:1787:15751":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:783:2487":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:35:2132":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:901:2135":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:30836:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:21718:28070":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:40206:2559":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:42160:8069":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:1650:10109":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:21945:29857":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6785:13769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:844:2465":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:1525:10097":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10428:15894":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:4737:2699":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:40424:8423":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:5693:15508":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:5570:2833":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:43674:8147":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:9381:2583":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"18:707:8133":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:1924:2539":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:3547:2466":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:2812:1984":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:1382:2043":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"9:52:14397":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:10130:8127":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:7471:23098":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:653:9243":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:30466:28292":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"11:2219:2131":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:6294:30887":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:975:15731":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:21443:30262":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:39192:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:6016:13351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:7942:2630":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6442:15539":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:39216:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:361:2445":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:11060:15705":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:41479:2762":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:5798:13334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:1555:10101":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4629:12662":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:43946:8174":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:6057:13353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"9:234:2778":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:1721:2705":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:494:9183":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:6474:15541":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:10416:15893":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:9151:8068":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:42683:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:47610:2958":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:45699:2976":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:10092:8113":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:9043:2842":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:4803:12680":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:6296:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:20922:2591":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:4875:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:1540:14501":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:5000:15273":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13842:19786":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:11913:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:6865:25618":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:10580:15898":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"11:2076:2478":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:43255:8117":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:4392:12637":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:481:19825":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:1432:2470":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4492:12649":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:30266:2126":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:501:2421":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:12357:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:6578:2139":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:4789:15230":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:6361:15534":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:11969:18970":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:9098:23120":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:12902:19718":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:42913:27637":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:2404:14583":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:1756:8470":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:4327:15056":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:5563:2832":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"18:652:34374":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:3622:30887":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:10000:20973":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:242:34365":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:4760:2693":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:4898:12691":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:4366:2603":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:4406:2435":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:1622:10108":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:5528:8416":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:3673:2496":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:6307:15529":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:3163:31023":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:11484:18466":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:5908:2603":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11410:18460":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:487:15666":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:5785:13333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:8838:29286":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12536:19007":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:9853:15797":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:10334:15688":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"11:1879:2486":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13194:19736":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:40277:8406":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:6367:2043":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:5779:13332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:7335:33499":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:7467:15569":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:45521:2943":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:43173:8111":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1995:2497":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:8420:15672":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:10635:15891":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:4207:2465":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4344:12633":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:2319:14579":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:21966:2671":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:44364:2153":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:8072:15594":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:9877:21781":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:1588:10104":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:113:19803":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:6400:15537":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:20938:2880":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:20596:30612":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:5354:2791":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:5987:8428":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:8410:2779":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:46370:2945":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:41243:2655":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:11912:1126":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:2706:2124":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:9028:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:8075:2643":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6943:15559":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:755:19823":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:564:19830":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:43153:8112":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:12085:18978":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:5239:8095":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:3208:2638":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:6819:15553":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4559:12657":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:7588:2159":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:6008:13350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:40022:8241":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:11895:1481":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:9038:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13419:19756":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:3383:2588":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:44080:8571":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:680:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:5755:13330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:4941:12695":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:22458:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:3939:2683":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:40367:8419":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:11168:2804":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4571:12658":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:3158:2483":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13101:19713":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"11:0:1828":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:880:2465":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:587:9195":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12006:18972":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:13698:19777":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:1034:15735":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:4932:15253":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:10722:21555":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:47706:8049":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:21107:2591":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:1589:2485":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4980:12700":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:6919:33287":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:11717:8131":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12293:18990":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12461:19002":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"11:1866:2484":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13066:19728":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:573:9193":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:11339:18456":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:2780:1976":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:1728:10117":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:579:9194":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:41530:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"18:736:19815":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:4970:12699":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:46652:2917":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"18:609:34404":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:10660:15705":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:7528:22781":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:40034:8147":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:2696:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:265:30887":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:6022:15521":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:9374:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"18:96:19802":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:9028:15684":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:7519:15574":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:5557:15500":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:4845:12685":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:3815:14640":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:47695:8048":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:10826:21424":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:9386:20974":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:4854:2745":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:4322:8211":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:2509:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:3276:2133":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:3440:2540":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:4624:15161":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:42695:2778":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11459:18464":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:1404:2467":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:888:2468":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"18:515:19827":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:9188:34355":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:123:8866":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:7529:15575":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:45681:2970":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:47464:2952":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"9:445:14378":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:2387:1840":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:9577:15732":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:1463:2495":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13443:19759":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:9081:2874":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:22293:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:41462:2466":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:10743:15692":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:8748:2799":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:10804:8115":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"18:614:34379":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:11299:18454":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:21879:28214":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:9161:8076":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12318:18992":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:44108:8570":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:43163:8110":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11446:18463":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:719:19814":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:532:9187":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:11892:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:11879:18965":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:766:19816":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:1561:2465":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:10165:8120":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:1422:2469":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:13803:19783":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:4439:12642":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:9218:15688":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:1931:653":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:13564:19768":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4486:12648":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:10226:20978":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:8960:20399":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:30041:2669":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:5104:15305":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:7488:15571":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:1978:15769":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:13344:19749":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:3911:2680":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:9933:15774":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:10761:15693":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:7838:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12799:19715":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:8134:2616":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:8792:2841":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:9453:15718":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:2470:14586":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:10682:2584":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:40163:2546":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:20841:2894":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:43778:8167":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:11854:20354":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:482:9181":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:22326:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:2817:1985":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:2869:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:2161:8459":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:1692:10113":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:14:1940":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:40050:8146":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:5677:15507":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:4:1014":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:40102:8233":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:20579:30609":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:1821:2517":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:7798:2584":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:4398:12479":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:8242:2718":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:8082:1660":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:8256:15648":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:10798:15694":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:6201:15524":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:8220:2717":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:7136:2131":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:46716:2972":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"11:1859:2483":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:22491:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:3995:28811":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:7089:2043":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:618:2451":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:45844:2956":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:9370:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:10068:15850":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:11243:21837":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:2522:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:2208:2561":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:3132:22204":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:8286:2696":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:1242:2480":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:42421:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:9443:15717":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:11783:8159":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:30232:2125":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:40459:2616":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:10440:15895":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:4576:25395":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:4553:12656":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:10026:15849":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:7211:2542":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:665:2043":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:5935:13342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:3382:8187":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:13033:19725":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:40726:8401":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:4590:12659":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:43884:8171":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:40389:8420":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:5616:15503":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:40246:2503":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"7:0:1543":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:1514:10095":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:9155:8078":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:10681:15902":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:46682:2923":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:9557:15688":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:6757:2876":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:11911:1553":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"10:36:33179":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12224:18986":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:43301:8148":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10885:15698":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:40399:8421":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:13667:19774":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:43935:8173":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:530:2426":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:8180:15601":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:6674:8411":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:4564:2683":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:42658:8257":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:3300:14611":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:13469:19762":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:2981:1999":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:41751:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:7767:15588":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:3150:2485":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:4449:12643":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:46158:28352":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:5065:12708":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:43210:8100":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:39998:8238":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:4176:2714":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:8598:15678":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:8718:15654":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:7266:8178":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:11672:2784":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:2758:1978":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:6587:13760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"19:0:1031":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:9362:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:6768:8393":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:3157:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:45746:2879":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:21803:28330":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"11:744:2468":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4757:12674":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:21332:2886":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:5724:15510":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:6164:33304":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:42666:29852":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:39341:8191":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:595:9196":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:41332:2666":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:7293:15564":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:39280:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:4920:12693":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:3983:2685":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:4578:25397":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:6999:2043":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:5305:15482":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:12770:19714":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:11904:740":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:41871:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:3163:2006":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:2898:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:11279:8139":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:1736:10118":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4641:12663":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:8948:23149":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"18:538:19829":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:11355:18457":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:7616:2431":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:4790:12678":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:9566:15689":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:9526:8545":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:585:2447":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:5717:13269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:21952:2672":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13763:19780":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:43561:8152":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:4702:15215":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:9734:15746":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13411:19755":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4719:12669":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4947:12696":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:46606:2911":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:41454:2465":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:5862:13338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:11909:1495":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:40306:8414":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:6061:14550":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:8736:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:8918:2425":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:2916:30776":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12307:18991":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:11535:8126":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:43989:8157":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:3152:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:9796:15750":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:6133:20366":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:7241:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:20536:8246":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:2515:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:11899:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:10712:2586":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:11910:789":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:2502:14587":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:47732:8051":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13812:19784":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10545:15703":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"18:80:19801":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:5032:12705":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:13356:19750":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:9159:8075":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:7538:12862":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:13257:19742":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:3782:2665":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:11628:18476":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:3881:2678":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:5058:12707":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:9748:15688":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:4423:12640":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:5834:8785":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:43792:8168":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:9822:15757":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:6585:2051":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:6685:13762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"11:1847:2135":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:47572:2924":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:8806:2838":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:10989:15703":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:10589:15899":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:2524:14588":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:7491:12855":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:1657:10110":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11615:18475":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:1413:2468":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:4845:2744":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:21916:28341":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:11726:8133":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:6800:13770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:44076:8568":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:3975:2135":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:2692:2161":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:6917:2643":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"11:1561:14502":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:8843:30329":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4288:12628":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:7532:12861":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4466:12645":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:211:2167":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:4255:8205":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11721:18959":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:43656:8146":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5022:12704":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:40057:8234":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:4074:26960":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:676:2456":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:8109:15596":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:7571:2591":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:40076:8236":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:1048:2477":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:9498:15733":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:6696:15549":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:10462:2431":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:10923:15700":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:11585:18473":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:10125:15828":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:8195:15650":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:12542:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:4679:2694":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:12510:19005":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:4568:15153":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:0:816":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11234:18451":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:39236:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:930:2472":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:4969:15266":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:20729:2890":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:1544:2603":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:20770:8459":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:6132:15522":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:11372:2663":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:40487:8426":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:4104:2711":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:8389:15671":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:9068:34364":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:1844:2523":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:6097:3017":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:49668:2899":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:2744:2160":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:815:2488":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:9866:15764":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:6764:30926":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7837:15590":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:10203:8121":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:10555:15862":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:5797:33461":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:41380:2659":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:2426:14584":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:11265:8534":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:6569:9065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:9138:15686":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:21:681":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:6739:30903":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:4642:2719":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5829:13297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:40670:8395":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:3135:22203":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:13857:19787":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:10419:2638":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:39258:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:10615:15890":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:12835:19716":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:2879:14603":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:2906:30799":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:44164:8589":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:46212:28356":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:7029:33281":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:2344:2566":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:45347:2936":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:4110:8217":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12576:19010":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:44096:8574":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:11901:742":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:9108:34353":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:40042:2449":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10491:15865":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:5920:15516":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:12308:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:7259:2762":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:2963:2009":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4431:12641":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"11:867:2476":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:12345:18994":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:3266:15834":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:43969:8156":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:42167:8077":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:40012:8240":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:4307:12630":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:43084:28662":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:11898:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:13324:19747":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"7:79:14356":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:21978:2674":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:40268:8405":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:917:2469":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:4167:2603":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:10823:15695":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:1715:10116":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:10865:2801":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:8047:2585":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:13169:19734":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:10270:15812":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:10505:15896":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4882:1001":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:7503:12857":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:46446:2957":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:47770:8053":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:10052:15829":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4726:12670":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:7498:15572":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:8968:15563":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:4990:23108":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:5764:2828":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:39302:2002":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:6218:15525":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:11054:2595":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:6293:15528":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11282:18453":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:43184:8102":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:5630:15504":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:1716:2133":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:4857:12687":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:4499:12650":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:2668:14594":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:4183:8090":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:2312:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:2931:14605":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12388:18997":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:40069:8235":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:5035:2816":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:8788:15680":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:2594:14591":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:2546:14589":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:20577:30607":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:9592:29803":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:46014:2971":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:9973:15773":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"14:40:18453":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:22260:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"11:359:33182":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:10657:2580":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"11:119:33184":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:8249:2766":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:638:2454":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:11027:21534":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:47823:8056":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:9350:34356":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:42174:8078":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9523:15728":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:9340:15691":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:4137:2603":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:46292:2939":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:44334:2017":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:40149:8508":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:42433:28350":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:42917:8103":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:2908:30777":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:39379:8200":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:2832:20980":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:420:14553":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4667:12665":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:3370:8183":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:6188:2832":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:2512:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:2746:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:13292:19744":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:13240:19740":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:11905:1499":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:10050:23142":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:6628:10062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"14:0:1830":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"14:7:14508":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:43236:8116":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:5077:12710":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:7255:8177":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11502:18467":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:531:19828":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12033:18974":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:11907:1497":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:11889:1515":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:42031:2817":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:11069:15706":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:6558:15546":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:30864:8246":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:6890:15556":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"12:0:1829":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:13791:19782":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:4005:30887":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:4757:15222":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:154:14556":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:9907:15799":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:11319:18455":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:8103:2590":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:11573:18472":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4851:12686":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"15:0:1831":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:4042:2158":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12138:18982":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:8838:2839":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:11500:14535":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"9:0:1826":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:5779:15512":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13145:19732":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:1062:2478":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:635:2453":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"11:731:2467":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:3899:14676":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:8762:2800":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:8156:15599":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12178:18984":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:11372:18458":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:1213:2479":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:4433:8215":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:43343:2617":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:1700:10114":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8870:2840":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:11468:23005":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:11391:18459":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:10626:15900":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"11:305:33198":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:2967:14606":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:7520:12859":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"11:828:2473":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"13:0:1823":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:11894:1397":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:1630:588":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:3753:2133":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:45938:2910":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:10598:15702":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:5818:2816":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:3170:2637":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:2788:1983":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"18:644:34374":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:9147:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:8670:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:44084:8573":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:6390:15536":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:9545:15726":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:4540:15149":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"11:757:2135":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:2518:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:7103:15563":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:7859:15591":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:2922:1995":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6488:15542":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:1532:10098":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:11870:21541":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:10402:15881":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12959:19721":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:2242:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:5998:15520":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:8171:2653":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:11903:744":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:43857:8170":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:5900:13341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:9617:15725":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:2905:2102":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:12382:8252":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:1351:2465":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2695:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:5693:2819":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:2477:2626":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:1895:2538":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:46111:28357":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:1577:2483":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:10080:15851":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:2694:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:44389:29848":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:6876:15555":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:2805:1987":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:7161:8404":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:10377:15815":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:21862:28359":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:41538:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:11449:8063":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:7443:14304":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:599:34383":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:13376:19752":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8730:2798":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:3925:2681":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:3210:2639":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:41597:2043":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:1594:10105":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:30288:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:43144:8108":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:41394:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:13309:19745":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:3644:2043":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:7052:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:11434:18462":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12372:18996":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"14:187:14516":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:43425:8154":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:9986:15801":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:3465:2612":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:44088:8572":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:4125:2713":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:7803:15589":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:41289:28200":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:2833:1989":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:863:2489":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5967:13345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:5385:2793":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:12607:19012":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:8025:15592":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4932:12694":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:12331:18993":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:5051:12706":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:768:2133":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:11162:20358":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:7252:14143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:6755:13767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:2574:2619":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:5712:2135":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"18:590:29870":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:689:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12158:18983":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:7635:15581":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:6575:15547":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:2540:2627":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:2550:22622":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:521:19824":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:2572:14590":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:45413:2942":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:6085:2018":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:21559:2591":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:21839:29354":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:0:1389":{"crate_id":1,"path":["std"],"kind":"module"},"14:160:14508":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:11902:18967":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:1846:2524":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:6706:13765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:7743:15586":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:7572:2446":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:1947:15745":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:11109:15708":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:7366:15565":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:7711:15585":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:1916:2162":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:6868:33293":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:41512:2763":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:39970:8239":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:20594:30610":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:7275:14145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:40473:8425":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:8260:2747":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:1733:8471":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:3521:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:45459:2908":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:13332:19748":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:10053:8126":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:21561:2883":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8319:2758":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:4836:12684":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:47800:8055":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:41911:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"11:1050:14497":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:10422:2634":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:4007:28809":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:488:9182":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:11688:22784":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:7263:2021":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:10357:22779":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:8047:15593":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:8823:15681":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:6047:13352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:6830:13773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:40315:8415":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:11653:18478":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:3640:14614":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:4865:12688":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:9322:34368":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:12894:19717":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"11:821:2472":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:41991:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:6116:12544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6651:10036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:10771:8114":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:10452:15868":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:8784:2465":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:10857:15697":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:2206:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:30272:8447":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:55:14546":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:9981:2517":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:7555:12864":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:2378:14582":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:6485:2826":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:10209:2793":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:39176:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13181:19735":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13159:19733":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:5015:12703":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:5857:13337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:2360:2571":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:11900:745":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:535:33472":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:7862:2496":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12483:19003":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:10283:15813":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:6446:30887":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:40133:29340":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:20984:2882":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:1564:10102":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:3534:2465":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:12980:19722":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:2800:1982":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:7509:15573":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:5988:13347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:7015:26954":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:9985:2466":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:7572:33341":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:2694:14595":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:2448:14585":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:3446:14612":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:10258:8122":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:8129:15597":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:10416:2636":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"11:1634:33196":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:11938:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:4371:12634":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:47686:8047":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:7544:12863":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"11:675:2470":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:4546:12655":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4478:12647":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:2298:14551":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11993:18971":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:12433:19000":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:8250:2765":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:1682:10112":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:4688:12666":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7557:15577":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:9469:15719":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:30302:28358":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:3142:2004":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:13689:19776":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:5502:2797":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:5880:13340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:1609:10106":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6854:15554":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:3688:2497":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:6691:13763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:6248:2135":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:10967:15702":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:11844:18963":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13219:19738":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:6009:22770":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:491:34393":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"18:507:34374":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:6136:13381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:11887:936":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:959:2476":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:8256:15603":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13211:19737":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:3182:30663":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:6907:21461":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:4751:12673":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:47402:2918":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:8955:20380":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:8683:15653":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:40116:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:7757:15587":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:45491:2938":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:40438:8424":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:9772:15752":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8469:2781":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:7030:31010":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11520:18468":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"18:636:34380":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:40408:8422":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:7022:2491":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:7937:20397":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:39961:8203":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:5974:13346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:10670:21538":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:2087:31019":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:11888:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:8979:34349":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:13488:19764":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:1228:2478":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:41671:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:3047:14608":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:7044:2043":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:20760:2887":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:1539:10099":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:3124:2484":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13461:19761":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:8443:15673":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:991:2477":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:8208:2657":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:1366:2466":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:43631:8138":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:4845:15238":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:10142:15853":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:7591:2494":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:7526:12860":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:7595:2434":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:2784:1979":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:7659:2458":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:2774:1977":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:8264:2749":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:13367:19751":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6254:15527":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"11:2198:30284":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:10314:2798":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:3987:2686":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:43327:8142":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:43763:8166":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10721:15869":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:4377:8213":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:6578:13759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:2077:2421":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:43809:8169":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:4872:15241":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:3782:14631":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:12236:18987":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:6373:2822":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:3872:14673":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:46528:2905":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:3677:2664":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:11493:14535":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:40255:2615":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:5708:15509":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:7437:15567":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10735:15906":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:6717:14523":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:25847:2668":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:2867:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:20869:2888":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:13082:19729":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:7626:15580":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:20549:30264":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:41791:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:568:9192":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"0:32:1710":{"crate_id":0,"path":["futures_sink","if_alloc"],"kind":"module"},"18:690:19820":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:43333:8141":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"11:399:33201":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:44112:8588":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:12512:2018":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:12295:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:42713:29847":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:1873:2485":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:47785:8054":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:10286:8123":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:11003:2799":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:4911:12692":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:8573:15677":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:5247:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:1821:2128":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:43649:8136":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6848:13774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:11015:2800":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:8226:2708":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4619:12661":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:8490:15674":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:1071:2479":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:1752:10119":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:1594:2486":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13265:19743":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:9839:15743":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:39365:28503":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"5:5191:30887":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:7181:2544":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:5418:33462":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:3247:2634":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:1637:8384":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:5773:13331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:44100:8575":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"11:703:2471":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:10822:2527":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:9488:15734":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:10039:15807":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:7509:22765":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:40693:8397":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:41445:1661":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:2763:1975":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:5594:15502":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:780:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:554:9190":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"11:2087:2479":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:2506:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:3030:14607":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:6668:10039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4732:12671":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:9275:34342":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:2691:1705":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:13499:19765":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:12550:19008":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:4639:2746":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"9:174:14481":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:44347:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:3079:2003":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:5367:14549":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:10647:21791":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:42393:28203":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13777:19781":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:1546:10100":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:3325:2644":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:46416:2951":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:2768:1974":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:40699:2644":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11770:18960":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4404:12638":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8215:2716":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11859:2459":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:20879:8459":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:247:34339":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"9:388:14379":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:2753:1973":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:9813:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:3063:14609":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:8124:2615":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:13053:19727":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:5809:13335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:9886:15771":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"14:165:14509":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:6605:2749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5959:13344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4538:12654":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:22227:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:11902:743":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:5485:2139":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"8:0:1825":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:21665:28073":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:39114:2010":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"18:0:1834":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:40226:8100":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:7791:2580":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:47666:8045":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:45644:2915":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:43640:8137":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:12915:19719":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:867:2043":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:4037:14790":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:43135:8109":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:45892:2904":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"0:0:1720":{"crate_id":0,"path":["futures_sink"],"kind":"module"},"17:10465:15867":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:7509:12858":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:42898:8561":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:5032:15281":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:11800:18962":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:39982:28338":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:2163:8460":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:2642:14593":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12126:18981":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13433:19758":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:7202:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6336:15532":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"11:60:33200":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:2264:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:45990:2922":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:7677:2526":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:8154:2614":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:4743:12672":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:9721:15747":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:2204:33192":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:2856:1994":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:2469:2591":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:3169:2008":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:541:9188":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:10936:15701":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:9596:15730":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:7460:15667":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:43479:8122":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"11:279:33188":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9534:15727":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:43611:2614":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:386:15665":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:12059:18976":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:2847:1992":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:6821:13772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:40684:2460":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:4047:2466":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:6728:15550":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11037:15704":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:13316:19746":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:8753:15679":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:10712:15905":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:4890:12690":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:8909:2617":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:4331:12632":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:500:9184":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:10649:15901":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:7065:33407":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:7165:8403":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:4256:2715":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:6671:14524":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:44291:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:9265:15689":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"11:783:14495":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:41606:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12113:18980":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13453:19760":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:8548:15676":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:3184:2486":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"11:840:2474":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:3775:30887":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:926:2471":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:9624:27721":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"18:624:34386":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:9312:15690":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:4728:15217":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:11712:8135":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:7211:2022":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:42498:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:43921:8172":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:43223:8101":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13426:19757":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:42458:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:9959:15800":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:2407:30795":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:6151:13382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:1576:10103":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:4328:2709":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:2317:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:2764:14598":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:7195:29340":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:2211:2562":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:963:30887":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:45543:2949":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"11:393:33204":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:22590:2673":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:10316:15810":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:3615:2660":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:10092:15852":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:7543:15576":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:7578:14333":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:10138:2803":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"18:727:19822":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:46036:2977":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:40296:8413":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"11:1524:14500":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:7077:15562":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13506:19766":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:1785:2507":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:4321:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:2742:14597":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:8931:15651":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:953:2475":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:9117:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:7596:15579":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4707:12668":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:43461:8124":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4827:12683":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:2151:589":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:8912:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:45437:2902":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:8982:20067":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:2792:1981":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:6724:13766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:44326:2016":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:6607:2141":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:39372:8212":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:43956:8175":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:7244:33354":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:8310:15669":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:8776:2801":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:6700:13764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:3875:2679":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:10303:15809":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"11:1852:2133":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:119:8865":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:7014:2135":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:5402:14545":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:3401:2587":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:8521:15675":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:3995:2688":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:20742:2891":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"17:10897:15699":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:11424:8580":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:47324:2946":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5816:13336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:3292:2623":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:6002:13349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:5071:15296":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:6236:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:13135:19731":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:23037:2667":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:39358:15602":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:7665:2481":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:1612:30887":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"18:660:19817":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:8854:2837":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:7932:23130":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:7449:15568":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:4416:12639":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:11461:23133":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:4808:795":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:39955:2449":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:3225:14610":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:40708:8398":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:13385:19753":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:911:2133":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:4521:12652":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:8893:2821":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:8953:15683":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:9178:15687":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"11:859:2475":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:46866:2906":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:10835:2794":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:13516:19767":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:22359:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:5334:2790":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:3249:2635":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:40718:8399":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:11821:15854":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:5944:15517":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:5747:13329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:5346:15499":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:8337:2777":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4767:12675":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:21827:2670":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"14:31:14508":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:43579:8153":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:11737:8130":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:4510:15143":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:11500:8581":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:4096:2710":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"18:681:19819":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:7588:15578":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:7697:15584":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11813:15856":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:10244:8124":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:8142:15598":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:7854:2628":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:3168:2636":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:4445:15126":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:7005:2490":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13639:19771":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:4952:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:9917:15796":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:2786:14599":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:2830:14601":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9683:15748":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:3117:2465":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:2912:30775":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:1709:10115":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:1572:2133":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:4386:8214":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:6180:30903":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:4818:15235":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:0:1833":{"crate_id":17,"path":["object"],"kind":"module"},"2:43507:8150":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"14:215:14517":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:562:15667":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:6101:22783":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:2929:1997":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:12592:19011":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:2985:2000":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:4821:12682":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:10942:22778":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:12501:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:11924:18968":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:875:2467":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:9120:23013":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:7632:29287":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:41345:2657":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:8166:2661":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:2354:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:9895:15770":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:41368:2658":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:9876:15798":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"15:180:14526":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:3129:31018":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"13:226:33252":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:1668:10111":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:10652:25378":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:45592:2903":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:2822:1986":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:922:2470":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11600:18474":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6351:15533":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:9033:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:43665:2449":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:4336:30892":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:10948:22777":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:6482:2825":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:5741:15511":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7042:33471":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:2808:14600":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:7497:12856":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12563:19009":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:11091:2842":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:40286:8412":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:13659:19773":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:41226:2654":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:4914:2603":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:7317:33337":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:9653:15763":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:9512:15729":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:9107:2540":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:2843:1991":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:9405:8254":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:41470:2043":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:7230:9141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13477:19763":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:43741:8165":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:8090:15595":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"11:1091:14498":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:30360:28365":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6506:15543":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:3088:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:5947:13343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4383:12636":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:3933:2682":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:4480:15137":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:4414:2719":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:4399:30892":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:7808:2581":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:21771:28329":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:7644:2457":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11886:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:4903:2754":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:10847:21545":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:11532:18469":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:32056:21272":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:21114:2889":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:7224:2543":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:9149:8069":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:21116:2885":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12259:18988":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:8496:2783":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:699:19821":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:2614:2629":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:1843:2043":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:5811:15513":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:6545:9231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5843:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:643:2455":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:6586:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11556:18471":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:6981:15560":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:22557:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:11891:18966":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:1783:2506":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:39161:2001":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:857:2466":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:9803:2591":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10670:15892":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:5571:15501":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:41589:2466":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4653:12664":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:6695:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:3749:14622":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:11422:18461":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:5870:13339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:7478:15570":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:9142:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:44273:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:13041:19726":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:5586:8407":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:5235:8094":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:4112:2712":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8387:2778":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:12072:18977":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:42674:8256":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:547:9189":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:43265:8118":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:11258:18452":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11193:15913":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"10:44:14486":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:506:9185":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4377:12635":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:46189:28326":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:13625:19770":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4813:12681":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:5995:13348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:40376:8408":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13015:19723":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:7081:2043":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:41260:2656":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:10015:15848":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:7670:2482":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:5963:15518":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:574:34374":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11163:15912":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"18:582:8246":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:11906:1496":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"11:452:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:3931:2603":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11785:18961":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:43315:8145":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11471:18465":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"15:219:14531":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:7060:30733":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12282:18989":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:42705:29846":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:1919:15785":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:45391:2937":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:3234:2012":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:11331:2664":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:41521:8518":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:5021:23108":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:4761:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:936:2473":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:1443:2471":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:9003:20390":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:45662:2921":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:6904:15557":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"11:638:2465":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:5655:15506":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13249:19741":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"14:221:14518":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:4784:12677":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4509:12651":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:9410:8255":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6110:13380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:5847:15514":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4318:12631":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:3680:2663":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8479:2465":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:42403:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:3449:22042":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:11035:8588":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:11861:18964":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:47214:2912":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:11832:15855":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4527:12653":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4459:12644":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:6793:15552":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:554:2428":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:0:1832":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:21004:2885":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:6535:33352":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"2:20990:2884":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:6977:2811":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"18:671:19818":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:39334:2005":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"11:1144:2480":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:2245:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:2470:2020":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:1565:2043":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:11072:20014":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:47862:8057":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:10104:15808":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:4141:8218":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:11946:18969":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:3355:2603":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:8667:14545":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12449:19001":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:4596:15157":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:9628:15724":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"11:1126:14499":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:10628:2748":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:13678:19775":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"9:352:14394":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:2684:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:12923:19720":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:4683:2698":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:2796:1980":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:1747:28327":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:5380:2603":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:11908:1498":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:62:8811":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:6721:27836":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:480:22625":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:39552:23980":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:2926:1996":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:8283:15668":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:2215:2563":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:2911:1637":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:6990:15561":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:9184:2523":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:1568:2135":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:4904:15249":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:10702:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:46060:2978":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:45968:2916":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:40448:8409":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"11:1035:2479":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:1583:2484":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"11:1839:2465":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:2701:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"11:2192:33195":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:3973:2684":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:4332:8212":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:5556:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:2603:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:7697:21272":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:21337:2896":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:11249:8532":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"11:652:2466":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12019:18973":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:7338:2134":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:39075:2013":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:4260:8206":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:1981:2496":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:8234:2662":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:6621:23135":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"11:816:2469":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12046:18975":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"11:2212:33193":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:41951:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:1908:10262":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:2357:14581":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:0:1824":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:6538:2830":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:5499:2795":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:8632:15649":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11544:18470":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:11837:21463":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:5468:2603":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"9:421:14380":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:10000:15847":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:12098:18979":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:10931:22775":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:11225:20011":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:6409:2829":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:9478:15736":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:12622:15705":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:3197:2011":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13879:19789":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:6552:2831":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"9:325:14433":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"10:0:1827":{"crate_id":10,"path":["adler"],"kind":"module"},"16:6243:33348":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4472:12646":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:6236:15526":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:8675:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13233:19739":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:8160:2662":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:4681:2677":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:3458:2589":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:9961:2465":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:7669:15582":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:7683:15583":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:12597:2129":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:8091:2586":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:4602:8227":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:8251:2764":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:2851:1993":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:47526:2973":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:2862:14602":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:562:9191":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:7240:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:21787:29865":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6321:15530":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}