{"root":"0:0:1666","crate_version":"0.2.4","includes_private":true,"index":{"1:12125:33645":{"id":"1:12125:33645","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:11888:419","self::pattern":"1:11712:4248"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:5059","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:3220":{"id":"0:18:3220","crate_id":0,"name":"XID_Start_table","span":{"filename":"src/tables.rs","begin":[822,4],"end":[1489,6]},"visibility":{"restricted":{"parent":"0:15:1644","path":"::tables::derived_property"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"static":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"primitive":"char"},{"primitive":"char"}]}}}},"mutable":false,"expr":"_"}}},"0:7:1643":{"id":"0:7:1643","crate_id":0,"name":"tables","span":{"filename":"src/tables.rs","begin":[13,0],"end":[1494,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#![allow(missing_docs, non_upper_case_globals, non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:15:1644","0:8:1645","0:9:1778"],"is_stripped":false}}},"1:12019:31236":{"id":"1:12019:31236","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11279:5063"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12138:33648":{"id":"1:12138:33648","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4533:33648"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43674:4801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"6:5387:34299":{"id":"6:5387:34299","crate_id":6,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"6:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"6:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"6:5401:30749":{"id":"6:5401:30749","crate_id":6,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12133:30747"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"6:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12033:31352":{"id":"1:12033:31352","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12034:31353"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12039:4371":{"id":"1:12039:4371","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12038:4373"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43640:5082","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12049:30903":{"id":"1:12049:30903","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:11888:419","self::pattern":"1:11712:4248"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:5059","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12137:4765":{"id":"1:12137:4765","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4536:4765"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43665:4766","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12134:30746":{"id":"1:12134:30746","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12027:26114":{"id":"1:12027:26114","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12087:3482":{"id":"1:12087:3482","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11712:4248","`DoubleEndedIterator`":"1:7240:121","prim@char":"5:11888:419","str::matches":"1:12087:3482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43561:5077","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12036:24079":{"id":"1:12036:24079","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43333:5070","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12013:4122":{"id":"1:12013:4122","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12063:4372":{"id":"1:12063:4372","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:11888:419","self::pattern":"1:11712:4248"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11535:5011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12025:26113":{"id":"1:12025:26113","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12041:33628":{"id":"1:12041:33628","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43621:5074","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12023:26112":{"id":"1:12023:26112","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12113:29803":{"id":"1:12113:29803","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:11888:419","self::pattern":"1:11712:4248"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12078:31366":{"id":"1:12078:31366","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"5:11888:419","str::splitn":"1:12075:31364","self::pattern":"1:11712:4248"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43479:4993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:5059","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12020:33625":{"id":"1:12020:33625","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1666":{"id":"0:0:1666","crate_id":0,"name":"unicode_xid","span":{"filename":"src/lib.rs","begin":[11,0],"end":[92,1]},"visibility":"public","docs":"Determine if a `char` is a valid identifier for a parser and/or lexer according to\n[Unicode Standard Annex #31](http://www.unicode.org/reports/tr31/) rules.\n\n```rust\nextern crate unicode_xid;\n\nuse unicode_xid::UnicodeXID;\n\nfn main() {\n    let ch = 'a';\n    println!(\"Is {} a valid start of an identifier? {}\", ch, UnicodeXID::is_xid_start(ch));\n}\n```\n\n# features\n\nunicode-xid supports a `no_std` feature. This eliminates dependence\non std, and instead uses equivalent functions from core.\n","links":{},"attrs":["#![forbid(unsafe_code)]","#![deny(missing_docs)]","#![doc(html_logo_url = \"https://unicode-rs.github.io/unicode-rs_sm.png\",\nhtml_favicon_url = \"https://unicode-rs.github.io/unicode-rs_sm.png\")]","#![no_std]","#![feature(test, unicode_internals)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1643","0:6-0:8:1645","0:20:1648"],"is_stripped":false}}},"1:12107:33641":{"id":"1:12107:33641","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:11888:419","self::pattern":"1:11712:4248"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11737:5058","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1654":{"id":"0:21:1654","crate_id":0,"name":"is_xid_start","span":{"filename":"src/lib.rs","begin":[63,4],"end":[63,34]},"visibility":"default","docs":"Returns whether the specified character satisfies the 'XID_Start'\nUnicode property.\n\n'XID_Start' is a Unicode Derived Property specified in\n[UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\nmostly similar to ID_Start but modified for closure under NFKx.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"1:12066:31362":{"id":"1:12066:31362","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11712:4248","`DoubleEndedIterator`":"1:7240:121","prim@char":"5:11888:419","str::split":"1:12060:30332"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43375:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:5059","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12012:3555":{"id":"1:12012:3555","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1648":{"id":"0:20:1648","crate_id":0,"name":"UnicodeXID","span":{"filename":"src/lib.rs","begin":[56,0],"end":[72,1]},"visibility":"public","docs":"Methods for determining if a character is a valid identifier character.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:21:1654","0:22:1658"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:23"]}}},"1:12081:33631":{"id":"1:12081:33631","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12116:31368":{"id":"1:12116:31368","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:11888:419","self::pattern":"1:11712:4248"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:5059","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12038:4373":{"id":"1:12038:4373","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12039:4371"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43631:5073","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12011:811":{"id":"1:12011:811","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"5:11888:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12037:26938":{"id":"1:12037:26938","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43343:5069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12052:3596":{"id":"1:12052:3596","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41396:179","prim@char":"5:11888:419","self::pattern":"1:11712:4248"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12075:31364":{"id":"1:12075:31364","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"5:11888:419","self::pattern":"1:11712:4248","str::rsplitn":"1:12078:31366"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43461:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12106:33640":{"id":"1:12106:33640","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[74,0],"end":[92,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnicodeXID","id":"0:20:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"char"},"items":["0:24:1654","0:25:1658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12040:30333":{"id":"1:12040:30333","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43611:5072","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12110:33642":{"id":"1:12110:33642","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:11888:419","self::pattern":"1:11712:4248"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12090:33633":{"id":"1:12090:33633","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11712:4248","`DoubleEndedIterator`":"1:7240:121","prim@char":"5:11888:419","str::matches":"1:12087:3482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43579:5078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:5059","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12122:33644":{"id":"1:12122:33644","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:11888:419","self::pattern":"1:11712:4248"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"6:5383:34298":{"id":"6:5383:34298","crate_id":6,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"6:280:10641","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"6:6990:10727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"6:280:10641","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"6:6990:10727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:1644":{"id":"0:15:1644","crate_id":0,"name":"derived_property","span":{"filename":"src/tables.rs","begin":[39,0],"end":[39,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:16:1787","0:17:1665","0:18:3220","0:19:1664"],"is_stripped":false}}},"1:12060:30332":{"id":"1:12060:30332","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11712:4248","`DoubleEndedIterator`":"1:7240:121","prim@char":"5:11888:419","str::split_whitespace":"1:12038:4373","str::rsplit":"1:12066:31362"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43357:4995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12016:33624":{"id":"1:12016:33624","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12014:33623"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"6:5382":{"id":"6:5382","crate_id":6,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["6:5383:34298","6:5384:4652","6:5387:34299","6:5390:34300","6:5398:34301","6:5399:34302","6:5400:4859","6:5401:30749","6:5402:30748"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12014:33623":{"id":"1:12014:33623","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"6:5390:34300":{"id":"6:5390:34300","crate_id":6,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"6:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"6:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1645":{"id":"0:8:1645","crate_id":0,"name":"UNICODE_VERSION","span":{"filename":"src/tables.rs","begin":[17,0],"end":[17,56]},"visibility":"public","docs":"The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-xid is based on.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"tuple":[{"primitive":"u64"},{"primitive":"u64"},{"primitive":"u64"}]},"expr":"_","value":null,"is_literal":false}}},"1:12128:33646":{"id":"1:12128:33646","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11673:127","`FromStr`":"1:11672:4501"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11672:4501","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11672:4501","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12096:33635":{"id":"1:12096:33635","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11712:4248","`DoubleEndedIterator`":"1:7240:121","prim@char":"5:11888:419","str::match_indices":"1:12093:33634"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43525:5080","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:5059","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:9:1778":{"id":"0:9:1778","crate_id":0,"name":"bsearch_range_table","span":{"filename":"src/tables.rs","begin":[19,0],"end":[37,1]},"visibility":{"restricted":{"parent":"0:7:1643","path":"::tables"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["c",{"primitive":"char"}],["r",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"primitive":"char"},{"primitive":"char"}]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12072:33630":{"id":"1:12072:33630","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11712:4248","str::split":"1:12060:30332","prim@char":"5:11888:419","str::split_terminator":"1:12069:33629"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43425:5075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:5059","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12010":{"id":"1:12010","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12011:811","1:12012:3555","1:12013:4122","1:12014:33623","1:12016:33624","1:12019:31236","1:12020:33625","1:12021:314","1:12022:31333","1:12023:26112","1:12025:26113","1:12027:26114","1:12029:26115","1:12031:33626","1:12032:33627","1:12033:31352","1:12034:31353","1:12035:25411","1:12036:24079","1:12037:26938","1:12038:4373","1:12039:4371","1:12040:30333","1:12041:33628","1:12042:4028","1:12043:22777","1:12046:30901","1:12049:30903","1:12052:3596","1:12056:3554","1:12060:30332","1:12063:4372","1:12066:31362","1:12069:33629","1:12072:33630","1:12075:31364","1:12078:31366","1:12081:33631","1:12084:33632","1:12087:3482","1:12090:33633","1:12093:33634","1:12096:33635","1:12099:33636","1:12101:33637","1:12103:33638","1:12105:33639","1:12106:33640","1:12107:33641","1:12110:33642","1:12113:29803","1:12116:31368","1:12119:33643","1:12122:33644","1:12125:33645","1:12128:33646","1:12130:30750","1:12131:31239","1:12132:30751","1:12133:30747","1:12134:30746","1:12135:33647","1:12137:4765","1:12138:33648"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:16:1787":{"id":"0:16:1787","crate_id":0,"name":"XID_Continue_table","span":{"filename":"src/tables.rs","begin":[40,4],"end":[816,6]},"visibility":{"restricted":{"parent":"0:15:1644","path":"::tables::derived_property"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"static":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"primitive":"char"},{"primitive":"char"}]}}}},"mutable":false,"expr":"_"}}},"1:12029:26115":{"id":"1:12029:26115","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12069:33629":{"id":"1:12069:33629","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11712:4248","str::split":"1:12060:30332","prim@char":"5:11888:419","`DoubleEndedIterator`":"1:7240:121","str::rsplit_terminator":"1:12072:33630"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43407:5076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12084:33632":{"id":"1:12084:33632","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:5059","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12035:25411":{"id":"1:12035:25411","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43327:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12032:33627":{"id":"1:12032:33627","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:11894:1397","crate::ops::IndexMut":"1:2985:4731","str::slice_unchecked":"1:12031:33626"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12119:33643":{"id":"1:12119:33643","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:11888:419","self::pattern":"1:11712:4248"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:5059","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17:1665":{"id":"0:17:1665","crate_id":0,"name":"XID_Continue","span":{"filename":"src/tables.rs","begin":[818,4],"end":[820,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["c",{"primitive":"char"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12132:30751":{"id":"1:12132:30751","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"6:5384:4652":{"id":"6:5384:4652","crate_id":6,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"6:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"6:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1658":{"id":"0:25:1658","crate_id":0,"name":"is_xid_continue","span":{"filename":"src/lib.rs","begin":[84,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-0:8:1645":{"id":"0:6-0:8:1645","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,0],"end":[48,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tables::UNICODE_VERSION","name":"UNICODE_VERSION","id":"0:8:1645","glob":false}}},"1:12046:30901":{"id":"1:12046:30901","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"5:11888:419","self::pattern":"1:11712:4248"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12022:31333":{"id":"1:12022:31333","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"6:5400:4859":{"id":"6:5400:4859","crate_id":6,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"6:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"6:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12042:4028":{"id":"1:12042:4028","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43649:5081","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12130:30750":{"id":"1:12130:30750","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1654":{"id":"0:24:1654","crate_id":0,"name":"is_xid_start","span":{"filename":"src/lib.rs","begin":[76,4],"end":[81,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12056:3554":{"id":"1:12056:3554","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41396:179","prim@char":"5:11888:419","self::pattern":"1:11712:4248"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:5059","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12099:33636":{"id":"1:12099:33636","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12031:33626":{"id":"1:12031:33626","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:11894:1397","str::slice_mut_unchecked":"1:12032:33627","crate::ops::Index":"1:2981:4730"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1664":{"id":"0:19:1664","crate_id":0,"name":"XID_Start","span":{"filename":"src/tables.rs","begin":[1491,4],"end":[1493,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["c",{"primitive":"char"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12043:22777":{"id":"1:12043:22777","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:11888:419","self::pattern":"1:11712:4248"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12133:30747":{"id":"1:12133:30747","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"6:5402:30748":{"id":"6:5402:30748","crate_id":6,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12134:30746"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"6:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12093:33634":{"id":"1:12093:33634","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11712:4248","`DoubleEndedIterator`":"1:7240:121","prim@char":"5:11888:419","str::rmatch_indices":"1:12096:33635"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43507:5079","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:5057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12135:33647":{"id":"1:12135:33647","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4535:33647"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43656:4802","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12131:31239":{"id":"1:12131:31239","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39552:23287","Self::is_ascii":"1:12130:30750"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39552:23287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12034:31353":{"id":"1:12034:31353","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12033:31352"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"6:5398:34301":{"id":"6:5398:34301","crate_id":6,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"6:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"6:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12021:314":{"id":"1:12021:314","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12022:31333","`u8`":"5:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12101:33637":{"id":"1:12101:33637","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1658":{"id":"0:22:1658","crate_id":0,"name":"is_xid_continue","span":{"filename":"src/lib.rs","begin":[71,4],"end":[71,37]},"visibility":"default","docs":"Returns whether the specified `char` satisfies the 'XID_Continue'\nUnicode property.\n\n'XID_Continue' is a Unicode Derived Property specified in\n[UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\nmostly similar to 'ID_Continue' but modified for closure under NFKx.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"1:12105:33639":{"id":"1:12105:33639","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"6:5399:34302":{"id":"6:5399:34302","crate_id":6,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"6:280:10641","`String`":"6:7241:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"6:280:10641","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"6:6990:10727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"6:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12103:33638":{"id":"1:12103:33638","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:2905:11032":{"crate_id":6,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"7:6800:16082":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:7224:10771":{"crate_id":6,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"7:1736:12430":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:44283:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:3975:10695":{"crate_id":6,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:9813:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"18:12033:21287":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:7044:3560":{"crate_id":6,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"19:719:22127":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:1981:10722":{"crate_id":6,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"18:10080:18164":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:41479:4917":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:3124:10712":{"crate_id":6,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:1351:4762":{"crate_id":6,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:10209:10522":{"crate_id":5,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"19:755:22136":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:9734:18059":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"7:6136:15693":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:43656:4802":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:5370:10967":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"7:1532:12410":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:1034:18048":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:3249:10837":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:9577:18045":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:7321:10696":{"crate_id":6,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"18:12980:22035":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:21862:23665":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"13:0:3510":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:11091:10526":{"crate_id":5,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:40069:4804":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:43674:4801":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:4540:17462":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:689:111":{"crate_id":6,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:1544:4758":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"7:6587:16072":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:8858:17995":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:4510:17456":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"7:4688:14978":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:6361:17847":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:1310:10546":{"crate_id":4,"path":["test","types","NamePadding"],"kind":"enum"},"5:8220:10899":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:1078:34404":{"crate_id":6,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:2550:27470":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:11879:21278":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:13121:22043":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"18:10527:18210":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:6009:30495":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:1846:10754":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"12:1852:10696":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:42695:10954":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:2911:4729":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:13698:22090":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"18:12449:21314":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"12:675:10698":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:3152:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"15:160:16821":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:4737:10881":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:1747:23634":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:7211:10770":{"crate_id":6,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"21:176:22161":{"crate_id":21,"path":["getopts","OptGroup"],"kind":"struct"},"5:8427:10956":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"17:3872:16986":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:4074:32693":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:4761:389":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:40399:4892":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:6728:17863":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:12512:5141":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:5235:11052":{"crate_id":6,"path":["alloc","slice","Concat"],"kind":"trait"},"1:43792:5099":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:2515:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:40206:4846":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"5:11393:10856":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:40034:4801":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"7:5755:15642":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:2851:4727":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"7:1514:12407":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:12915:22032":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:13101:22026":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:5594:17815":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:43084:25413":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:30288:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:7767:17901":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"12:1540:16814":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:6236:206":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:40042:4766":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:6097:11014":{"crate_id":6,"path":["alloc","task","Wake"],"kind":"trait"},"5:6101:30507":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:12372:21309":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"18:13612:22082":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:13135:22044":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:40347:4889":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:2208:10773":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"17:7652:198":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:43579:5078":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:10835:10968":{"crate_id":5,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"7:1692:12425":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:6520:17857":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:4042:4769":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:45367:10204":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:3060:10844":{"crate_id":5,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"5:11210:29280":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"7:532:11499":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"1:41538:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"18:9478:18049":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:4578:32555":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:618:10673":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"12:783:16808":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:211:11039":{"crate_id":6,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"19:564:22143":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:948:10566":{"crate_id":4,"path":["test","helpers","metrics","Metric"],"kind":"struct"},"1:20909:10198":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:7257:29552":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"1:4255:4774":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"7:1700:12426":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:8283:17981":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:2922:3532":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:6764:33318":{"crate_id":6,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:10865:10974":{"crate_id":5,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:30360:23671":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:12295:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:2684:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"5:8912:107":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:47686:10170":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:11535:5011":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:5305:17795":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:5367:16862":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:13625:22083":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:43425:5075":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:11653:20791":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6597:11081":{"crate_id":6,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:11500:5087":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"18:8389:17984":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"1:41911:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:10692:130":{"crate_id":5,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:5998:17833":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:9312:18003":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:12330:22878":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"12:1561:16815":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:13169:22047":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"7:1682:12424":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:4845:17551":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"7:488:11494":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"6:1422:10697":{"crate_id":6,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:43301:5068":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:20549:28109":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"18:8753:17992":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:4602:4796":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:5346:17812":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:41470:3560":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"7:4890:15002":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:6146:194":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:20564:28109":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:2701:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:9370:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:42421:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:1667:1087":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"5:10948:30501":{"crate_id":5,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:967:10575":{"crate_id":4,"path":["test","options","BenchMode"],"kind":"enum"},"1:9142:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"5:1844:10753":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"17:2470:16899":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:9386:29686":{"crate_id":5,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:5000:17586":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:7743:17899":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:5741:17824":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"0:16:1787":{"crate_id":0,"path":["unicode_xid","tables","derived_property","XID_Continue_table"],"kind":"static"},"7:587:11507":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"17:4327:17369":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"0:17:1665":{"crate_id":0,"path":["unicode_xid","tables","derived_property","XID_Continue"],"kind":"function"},"5:11493:16848":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:6327:17844":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"18:12307:21304":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:11888:419":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"5:857:4763":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:1253:29170":{"crate_id":4,"path":["test","time","TimeThreshold"],"kind":"struct"},"5:8264:10931":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:7659:10680":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:8319:10939":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:9108:36739":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:1042:34406":{"crate_id":6,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"7:7275:16457":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"7:4439:14954":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"4:532:10577":{"crate_id":4,"path":["test","stats","Stats"],"kind":"trait"},"1:1637:4637":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"7:1519:12408":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:4596:17470":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:11783:5090":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:2242:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:8250:4920":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:11015:10973":{"crate_id":5,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:47526:10276":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:43640:5082":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:11859:10681":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"18:13309:22058":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:43135:4992":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:6981:17873":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"7:5870:15651":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:42913:22292":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"21:161:22160":{"crate_id":21,"path":["getopts","Opt"],"kind":"struct"},"1:45938:10213":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"18:10142:18166":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:30302:23664":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"7:7578:16645":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:43375:4999":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:8496:10959":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"7:7544:15175":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"14:110:35641":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:7781:3624":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"7:6110:15692":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:154:16869":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:5380:4758":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:2448:16898":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:3673:10722":{"crate_id":6,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:20990:10187":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"7:5857:15649":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:22227:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:45844:10259":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:13211:22050":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"12:840:10702":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:45746:10182":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"19:515:22140":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"7:4797:14991":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:7255:11059":{"crate_id":6,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:3973:10866":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:8838:11008":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:2362:10782":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"1:40356:4899":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"12:2192:35585":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"18:12894:22030":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"18:12072:21290":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"7:4499:14962":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:7572:35731":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:44273:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:3622:33277":{"crate_id":6,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:1163:29180":{"crate_id":4,"path":["test","term","terminfo","parm","FormatState"],"kind":"enum"},"1:42683:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:9876:18111":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:7635:17894":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:7571:10800":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"7:1622:12420":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:40121:4848":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:11072:29274":{"crate_id":5,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:46716:10275":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"7:4667:14977":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:7042:35859":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:11909:1495":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"1:2981:4730":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:2967:16919":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"1:39365:23870":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"7:7568:16644":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"7:5959:15656":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:42433:23655":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:39341:4695":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:10258:4993":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:4112:10894":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"18:11193:18226":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:3615:10851":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"7:4331:14944":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:12923:22033":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"7:4821:14994":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:11461:30618":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"7:6116:14856":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:3939:10865":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:40389:4891":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:8521:17988":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"7:5995:15660":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:7846:30290":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:4576:32553":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:46370:10248":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"18:8667:16858":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"5:2346:10777":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:8736:186":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"18:11011:17965":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"18:13477:22076":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:5334:10965":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"1:2812:4718":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:43921:5103":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:6296:166":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:953:10703":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:2691:3530":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:3749:16935":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:2744:4618":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:2746:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:9153:4960":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:11899:643":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"5:10314:10971":{"crate_id":5,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"7:5717:15581":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1382:3560":{"crate_id":6,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:8103:10799":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"1:46292:10242":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:4183:4773":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:6488:17855":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:7528:30505":{"crate_id":5,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:3547:4763":{"crate_id":6,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:10000:29685":{"crate_id":5,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:3401:10796":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:43525:5080":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:7437:17880":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:635:10675":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"7:4307:14942":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:10334:18001":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:39114:4741":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"7:1555:12413":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:10138:10976":{"crate_id":5,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:3440:4813":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"5:5179:190":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"7:4521:14964":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:21978:4509":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"12:2219:10691":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:6819:17866":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:2469:10800":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:8142:17911":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:42917:5016":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:40324:23861":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:7697:17897":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"18:13488:22077":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"12:1859:10711":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"18:12318:21305":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:3208:10840":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:21900:23533":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"18:8256:17961":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"1:4260:4775":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"18:13024:22037":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:13033:22038":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"19:531:22141":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:1821:4687":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"8:79:16668":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:5910:10525":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:3088:95":{"crate_id":6,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:3157:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:3458:10798":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"7:5071:15021":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"19:80:22114":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"18:10761:18006":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"18:8931:17964":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"4:313:29215":{"crate_id":4,"path":["test","formatters","json","EscapedString"],"kind":"struct"},"17:8156:17912":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:40050:4802":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"19:652:36758":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:880:4762":{"crate_id":6,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:20869:10191":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:4782:27632":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:1058:33191":{"crate_id":6,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:9592:27475":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:7529:17888":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:6538:11001":{"crate_id":5,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:8160:10853":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:5402:16858":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:1916:4688":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:917:10527":{"crate_id":4,"path":["test","event","CompletedTest"],"kind":"struct"},"4:1002:10514":{"crate_id":4,"path":["test","options","ColorConfig"],"kind":"enum"},"7:4698:14979":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:12496:21317":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:39961:4770":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"18:12536:21320":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:12308:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:4760:10875":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:11832:18168":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"5:8226:10890":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"18:12138:21295":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:9985:4763":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:3142:4735":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"7:4392:14949":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:1269:10568":{"crate_id":4,"path":["test","time","TestTimeOptions"],"kind":"struct"},"1:2932:3535":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:5724:17823":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:11912:1126":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"19:548:141":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:32060:4692":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:7029:35671":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:4096:10892":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:7862:10722":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:4336:33282":{"crate_id":6,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:11027:29836":{"crate_id":5,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"7:4371:14946":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:6254:17840":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:21952:4508":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:7572:10671":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:3047:16921":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"18:11410:20773":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"18:13041:22039":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"1:9609:27470":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:6400:17850":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"18:12019:21286":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"17:7016:35901":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:10931:30499":{"crate_id":5,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:8356:5057":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:1064:10515":{"crate_id":4,"path":["test","options","Options"],"kind":"struct"},"5:4679:10876":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:10545:18016":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:3170:10839":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:5686:10989":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"18:13219:22051":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:20841:10197":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:43255:5004":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:47666:10168":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"18:8310:17982":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"18:10923:18013":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"7:4318:14943":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:11910:789":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"6:3117:4762":{"crate_id":6,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"18:13744:22092":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:8968:17876":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"7:1650:12421":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"7:5077:15022":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"7:7258:16456":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:46606:10214":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:2087:33413":{"crate_id":6,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"7:4707:14980":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:3987:10868":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:7052:198":{"crate_id":6,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:43621:5074":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"7:5779:15644":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:21088:10184":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:9151:4959":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"7:562:11503":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"5:10416:10838":{"crate_id":5,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"18:11446:20776":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"12:393:35594":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"18:8651:16860":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:888:10694":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"18:9933:18087":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:20770:4669":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:7449:17881":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:930:10700":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:44104:5049":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"15:187:16829":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"15:215:16830":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:11339:20769":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:39998:4807":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:3925:10863":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:5811:17826":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:8251:4919":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:1783:10736":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"1:43989:5062":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:11195:29226":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:43649:5081":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:1454:198":{"crate_id":6,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"19:707:5060":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:3132:30295":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:11893:1367":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"5:2614:10831":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:5643:17818":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"21:125:22155":{"crate_id":21,"path":["getopts","HasArg"],"kind":"enum"},"18:9959:18113":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:41512:4918":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:5719:10991":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"18:10681:18215":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:4818:17548":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"7:4991:15013":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:780:96":{"crate_id":6,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"7:4527:14965":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:2312:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"18:11090:18020":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:11249:4985":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:9155:4961":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:11461:5088":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:10104:18121":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:8180:17914":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:13433:22071":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4167:4758":{"crate_id":6,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"7:4911:15004":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:2985:4731":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:41462:4763":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:7837:17903":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:30266:4657":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"19:660:22130":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:40102:4800":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:10822:10757":{"crate_id":5,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:41711:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"19:624:36770":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:10272:4998":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:4406:4703":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"7:7443:16616":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:12542:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:4436:10902":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:13777:22094":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:10270:18125":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:7148:10692":{"crate_id":6,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:6061:16863":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:46446:10260":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"19:736:22128":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:1787:18064":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"12:1634:35586":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:44347:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:9159:4962":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"12:1879:10714":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"18:12085:21291":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:10628:10930":{"crate_id":5,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"7:5058:15019":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:47324:10249":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:9424:18029":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4399:33282":{"crate_id":6,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:43184:5008":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:6442:17852":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"7:6685:16074":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:5439:10968":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"1:41581:4762":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"7:4882:1001":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:1443:10699":{"crate_id":6,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"7:1525:12409":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:5021:30594":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:8260:10929":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"12:1071:35595":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"19:681:22132":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:43315:5067":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:6132:17835":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:2372:10787":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"18:9488:18047":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"12:1126:16812":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:41243:4906":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"7:62:11121":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"7:1564:12414":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"4:1056:10533":{"crate_id":4,"path":["test","options","RunStrategy"],"kind":"enum"},"1:39192:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:7591:4868":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"12:757:10695":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:40438:4895":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:5247:120":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"18:10660:18018":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"12:991:10705":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"18:13399:22067":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:3266:18147":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:1985:184":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:10702:119":{"crate_id":5,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:2780:4711":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:3355:4758":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"18:12178:21297":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:7211:3537":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:9526:5025":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"18:9443:18030":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:2151:589":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:9117:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:1716:10696":{"crate_id":6,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:198:16840":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"18:8953:17996":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"18:9895:18083":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:20577:28619":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:8234:10853":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:2317:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:6460:17853":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:8166:10852":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:9081:11012":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:13181:22048":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:10462:10659":{"crate_id":5,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:8762:10973":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"7:4459:14956":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:3534:4762":{"crate_id":6,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"14:0:3511":{"crate_id":14,"path":["std_detect"],"kind":"module"},"18:8971:129":{"crate_id":18,"path":["object","read","any","File"],"kind":"struct"},"18:8360:17983":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"1:11726:5060":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:7164:102":{"crate_id":6,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:3753:10696":{"crate_id":6,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"18:10465:18180":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:9218:18001":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:12236:21300":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"7:4559:14969":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:40022:4810":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:7015:32687":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:8825:11005":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:1387:10550":{"crate_id":4,"path":["test","types","TestDescAndFn"],"kind":"struct"},"5:10647:29981":{"crate_id":5,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"7:7538:15174":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:6876:17868":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:39302:4733":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"19:599:36767":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:40196:4845":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:7669:17895":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:9839:18056":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"7:4538:14966":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"19:507:36758":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:30864:3528":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:3184:10714":{"crate_id":6,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:783:10715":{"crate_id":6,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"12:2212:35583":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:30466:23598":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:6474:17854":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:44326:5139":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:40226:4872":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:46212:23662":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"7:573:11505":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"1:39372:4781":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"18:975:18044":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:45892:10207":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"12:1839:4762":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:7089:3560":{"crate_id":6,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:11641:20790":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"18:10798:18007":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"18:13316:22059":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"7:4960:15010":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:11901:742":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"1:40133:26450":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"15:221:16831":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"7:6830:16085":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"8:0:1543":{"crate_id":8,"path":["unwind"],"kind":"module"},"5:9038:219":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:11243:30017":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:7136:10691":{"crate_id":6,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:6575:17860":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:0:3514":{"crate_id":17,"path":["gimli"],"kind":"module"},"18:12646:21327":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"7:123:11176":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:40708:4862":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:47706:10172":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:12113:21293":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:2319:16892":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"7:1609:12418":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"7:5935:15654":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"18:8548:17989":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"7:6569:11377":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"12:1144:10708":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:11168:10977":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:4332:4781":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:44376:5145":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"18:9068:36749":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"7:6057:15665":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:7626:17893":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:3983:10867":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"21:18:10515":{"crate_id":21,"path":["getopts","Options"],"kind":"struct"},"17:3782:16944":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:3680:10854":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:9098:17998":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:47862:10180":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:12501:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:4386:4783":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"18:0:3515":{"crate_id":18,"path":["object"],"kind":"module"},"1:41631:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:5708:17822":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:9512:18042":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"7:4726:14982":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"18:9907:18112":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:4872:17554":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:5944:17830":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"7:1539:12411":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:420:16866":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"1:21827:4504":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:21771:23636":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:6943:17872":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:2768:4710":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:7478:17883":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"19:491:36777":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"1:20742:10194":{"crate_id":1,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"1:7240:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:44291:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:3163:4737":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"0:20:1648":{"crate_id":0,"path":["unicode_xid","UnicodeXID"],"kind":"trait"},"1:41831:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:20879:4669":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"18:11544:20783":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"18:10857:18010":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"15:40:20766":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"7:6691:16075":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"18:10569:18177":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"7:5065:15020":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:21004:10188":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:10657:10790":{"crate_id":5,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:5926:206":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:43265:5005":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:2786:16912":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:7081:3560":{"crate_id":6,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:21337:10199":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:7259:4917":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"5:10652:32536":{"crate_id":5,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"7:4827:14995":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"7:4590:14971":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"18:13812:22097":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:8286:10878":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:8730:10971":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"18:12059:21289":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"7:4344:14945":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"12:2087:10707":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:55:16859":{"crate_id":17,"path":["gimli","endianity","Endianity"],"kind":"trait"},"5:7932:30615":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:7590:10660":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"7:1752:12431":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:2749:4681":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:7411:17879":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"7:5900:15653":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:9295:28795":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"5:5385:10522":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"17:7244:35743":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"10:481:16689":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:3292:10825":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:6294:33277":{"crate_id":6,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"11:0:3508":{"crate_id":11,"path":["adler"],"kind":"module"},"1:25847:4503":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"18:13082:22042":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"10:352:16706":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"7:5947:15655":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"10:502:16693":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"18:11434:20775":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"1:2695:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:3995:25738":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:13419:22069":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:13053:22040":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:2898:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:2518:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:44112:5112":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:2616:16905":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"12:97:35575":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"18:13376:22065":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:2784:4713":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"7:4773:14988":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:1931:653":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"6:7181:10772":{"crate_id":6,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:46682:10226":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:44092:5056":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:43333:5070":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"12:1873:10713":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:44389:27574":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"12:652:4763":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"7:6578:16071":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:2574:10821":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:2905:16917":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:6336:17845":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:10092:4996":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"12:119:35574":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:11891:1049":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"6:1413:10694":{"crate_id":6,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:7519:17887":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:9534:18040":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"7:7497:15168":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"19:96:22115":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:6671:16837":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:10721:18182":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:45990:10225":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:11615:20788":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"7:1709:12427":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:9120:30566":{"crate_id":5,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"18:11136:18224":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"12:452:142":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"7:7555:15176":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"7:5785:15645":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:9981:10747":{"crate_id":5,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:8134:4896":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"1:42498:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"5:7509:30490":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:21718:23290":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:11946:21282":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"6:7195:26450":{"crate_id":6,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:8918:10653":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:43407:5076":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:42031:4929":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:13344:22062":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"7:4466:14957":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:0:1389":{"crate_id":5,"path":["std"],"kind":"module"},"17:8256:17916":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"12:305:35588":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:39379:4760":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:875:10693":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:9098:30606":{"crate_id":5,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"5:8171:10850":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"18:13265:22056":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:23037:4502":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:8469:10957":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"5:2867:210":{"crate_id":5,"path":["std","io","error","Result"],"kind":"typedef"},"5:4990:30594":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11717:5057":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:4845:10926":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"7:7485:15166":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"10:52:16709":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:5798:70":{"crate_id":6,"path":["alloc","sync","Arc"],"kind":"struct"},"1:44088:5052":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:4256:10897":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:6621:30620":{"crate_id":5,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"12:279:35578":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:9157:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:3521:163":{"crate_id":6,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"7:6776:16080":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"18:10505:18209":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"7:5862:15650":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:5557:17813":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:6307:17842":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:11911:1553":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"6:5642:232":{"crate_id":6,"path":["alloc","string","ToString"],"kind":"trait"},"18:12419:21312":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"12:638:4762":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:10491:18178":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:2696:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"18:10052:18142":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:44076:5048":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"18:9886:18084":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:12592:21324":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"6:1314:94":{"crate_id":6,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:9653:18076":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"7:4423:14952":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:8907:29541":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"7:1546:12412":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:10885:18011":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"6:2908:33166":{"crate_id":6,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:40376:4877":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:11913:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"12:1050:16810":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:32056:22568":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"19:590:27597":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:4328:10891":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:13015:22036":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:11889:1515":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"12:731:10693":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:2822:4720":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:40083:4806":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"18:13194:22049":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:5556:206":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:43969:5061":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:10244:4997":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:7060:33122":{"crate_id":6,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:7644:10679":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:44100:5055":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:12126:21294":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"12:399:35591":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:4480:17450":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"7:7491:15167":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:8124:4882":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"5:9043:10526":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"7:4941:15007":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"7:6700:16076":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:41345:4909":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"7:6545:11543":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"12:816:10697":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"7:4743:14984":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"4:1241:29172":{"crate_id":4,"path":["test","time","TestSuiteExecTime"],"kind":"struct"},"18:487:17979":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"5:7821:130":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"5:643:10677":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:39280:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"12:326:35576":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:20938:10183":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:46111:23663":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:45561:10258":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:7471:30584":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:0:3513":{"crate_id":16,"path":["addr2line"],"kind":"module"},"7:6553:12347":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:10478:18179":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"18:11585:20786":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"7:6605:10931":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:13385:22066":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:12597:5144":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"18:10125:18141":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:4914:4758":{"crate_id":6,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:1287:10545":{"crate_id":4,"path":["test","types","TestType"],"kind":"enum"},"7:6047:15664":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:501:10649":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:8129:17910":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:5655:17819":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:5987:4900":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"18:13803:22096":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:5616:17816":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:11905:1499":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"1:40670:4855":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:11162:29522":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:8893:10992":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"11:36:35569":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:2808:16913":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"18:13689:22089":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:39258:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"7:6814:16083":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:4400:17418":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:45413:10245":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:8047:17906":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:39334:4736":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:7266:11060":{"crate_id":6,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:21561:10186":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:11037:18017":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:6376:17848":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:9498:18046":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:6890:17869":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:11003:10972":{"crate_id":5,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:6236:17839":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:13426:22070":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"7:4653:14976":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:8242:10900":{"crate_id":5,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:2926:3533":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"5:911:10696":{"crate_id":5,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:20804:10196":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:41597:3560":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:21559:10800":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"7:4857:14999":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"18:12483:21316":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"8:32:16661":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:9340:18004":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:1982:185":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:39358:17915":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:47675:10169":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:8147:4995":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"5:917:10697":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:11837:29826":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:2502:16900":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"7:4294:14941":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:10050:30624":{"crate_id":5,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"7:4999:15014":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"7:4836:14996":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"7:6651:12348":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:47747:10175":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:8748:10972":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"12:0:3509":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"7:500:11496":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"5:3129:29501":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"15:7:16821":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:3881:10860":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:3446:16925":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"23:0:3519":{"crate_id":23,"path":["unicode_width"],"kind":"module"},"5:676:10678":{"crate_id":5,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:6332:30620":{"crate_id":5,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"7:4629:14974":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"18:10068:18163":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:8410:10955":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:963:33277":{"crate_id":6,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:32147:4702":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:3688:10723":{"crate_id":6,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:2512:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"5:901:10695":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:2879:16916":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:3169:4739":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:6351:17846":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:6558:17859":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:7030:33404":{"crate_id":6,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:44108:5050":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:2788:4717":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:40076:4805":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"18:11902:21280":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:39236:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:3163:33417":{"crate_id":6,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:42666:27578":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"7:4932:15006":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:4007:25719":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:40306:4885":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"19:766:22129":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:2211:4674":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"17:6431:17851":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"7:7230:11453":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:9596:18043":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:6586:217":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4005:33277":{"crate_id":6,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:5886:17828":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"18:9557:18001":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:40315:4886":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"7:7509:15170":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"12:1688:144":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:7241:224":{"crate_id":6,"path":["alloc","string","String"],"kind":"struct"},"1:42476:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"7:4571:14970":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:11898:642":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"18:13332:22061":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:11163:18225":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"1:44096:5054":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"12:2076:10706":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"9:0:3506":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"5:1821:10747":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"7:4803:14992":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:21107:10800":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:7595:4869":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:2077:10649":{"crate_id":6,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:11060:18018":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"0:0:1666":{"crate_id":0,"path":["unicode_xid"],"kind":"module"},"7:4546:14967":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:219:16844":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:46189:23631":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"7:7520:15171":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:2764:16911":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"18:8490:17987":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:2509:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"19:609:36788":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:5570:11003":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"7:4288:14940":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:2933:18124":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:12576:21323":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:638:10676":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:12959:22034":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:554:10656":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"18:12522:21319":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:8843:28341":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:2694:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:4414:10901":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:7677:10756":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"19:113:22116":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:2694:16908":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:43741:5096":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:10286:4994":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:361:10670":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:3197:4742":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:8091:10795":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"1:20922:10800":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"5:7697:22568":{"crate_id":5,"path":["std","error","private","Internal"],"kind":"struct"},"5:6757:11013":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"12:60:35590":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:7498:17885":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:12345:21307":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:11234:20764":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:40338:4888":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:12461:21315":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:7670:10710":{"crate_id":5,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"18:9853:18110":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:7460:17980":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"12:1524:16813":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:6552:11002":{"crate_id":5,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:3995:10870":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:8792:11010":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:1404:10693":{"crate_id":6,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:3150:10713":{"crate_id":6,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:43884:5102":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:2792:4715":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"21:0:3517":{"crate_id":21,"path":["getopts"],"kind":"module"},"7:547:11501":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"18:11422:20774":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:8675:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:41380:4911":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:7543:17889":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:4932:17566":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:43857:5101":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"18:11220:18227":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:2354:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:9033:218":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:10053:5011":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:2357:16894":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"1:2856:4728":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:5563:10525":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"18:9721:18060":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:7293:17877":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:5693:17821":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:8025:17905":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:44164:5114":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"18:247:36725":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:7488:17884":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:2337:16893":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:2832:29691":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:2344:4660":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"5:4104:10893":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:0:286":{"crate_id":6,"path":["alloc"],"kind":"module"},"5:9374:129":{"crate_id":5,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:1995:10723":{"crate_id":6,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:11308:29693":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:6999:3560":{"crate_id":6,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"7:5816:15648":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:1433:144":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:10635:18204":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:43327:5071":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"18:8598:17991":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"12:2198:28129":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"19:727:22135":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:2827:4722":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"7:1728:12429":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:22260:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:6904:17870":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:42658:4977":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:4019:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:7022:10719":{"crate_id":6,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:4904:17562":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"7:4845:14997":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:879:10512":{"crate_id":4,"path":["test","bench","Bencher"],"kind":"struct"},"17:6717:16836":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:45459:10211":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:46528:10208":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:10626:18213":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"7:5015:15015":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"18:10377:18128":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"18:10823:18008":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"5:9003:29546":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"7:4509:14963":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:43173:5002":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:40012:4809":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:42898:5041":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"18:8443:17986":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"1:45792:10247":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:43561:5077":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"18:11069:18019":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:8249:4921":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:12433:21313":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:9038:36736":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:1565:3560":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"18:11502:20780":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:6369:4856":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"4:1072:10580":{"crate_id":4,"path":["test","stats","Summary"],"kind":"struct"},"5:922:10698":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"18:11258:20765":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"18:9275:36728":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:13257:22055":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:2843:4725":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"18:10039:18120":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:6935:17871":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:10580:18211":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"21:143:22157":{"crate_id":21,"path":["getopts","Occur"],"kind":"enum"},"17:4728:17530":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:9469:18032":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:0:1442":{"crate_id":4,"path":["test"],"kind":"module"},"1:43665:4766":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:12799:22028":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:47770:10176":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:6535:35741":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:2763:4499":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"7:6598:16073":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:45437:10205":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"7:5022:15016":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:1071:10707":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:10203:5000":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:6022:17834":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:3247:10836":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:47721:10173":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:8269:128":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"5:11035:5112":{"crate_id":5,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"7:4478:14959":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:10010:4995":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"5:8208:4909":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"18:13443:22072":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"18:11600:20787":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"7:6008:15662":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"19:699:22134":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:7005:10718":{"crate_id":6,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:21945:27583":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:9877:26482":{"crate_id":5,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"21:207:5077":{"crate_id":21,"path":["getopts","Matches"],"kind":"struct"},"19:582:3528":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:42705:27572":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"18:8573:17990":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"1:49668:10202":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:3210:10841":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"12:828:10701":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"18:9566:18002":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:41203:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:1756:4684":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"7:6024:35466":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"7:1594:12417":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:6865:32664":{"crate_id":5,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:20594:28622":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:1733:4685":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:43631:5073":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:40116:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:2758:4500":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:3182:28941":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"20:0:1031":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"1:22392:4506":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:40459:4896":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"18:13857:22100":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"19:0:3516":{"crate_id":19,"path":["memchr"],"kind":"module"},"19:636:36764":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:10165:4999":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:4789:17543":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:11500:16848":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:7467:17882":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:11906:1496":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"1:22557:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:11054:10804":{"crate_id":5,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:44084:5053":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"12:359:35572":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:40163:4821":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"7:4553:14968":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:11907:1497":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"5:7937:29551":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"18:10416:18206":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"7:1668:12423":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"18:1919:18098":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:11854:29518":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:11484:5085":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:5586:4876":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:5354:10966":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"1:40277:4875":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"7:5974:15658":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:7366:17878":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:1924:10768":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"1:39970:4808":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:926:10699":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:1577:10711":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:9228:36751":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:45391:10240":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:2506:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"18:13249:22054":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:5485:11080":{"crate_id":6,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:4808:795":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:42403:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:43507:5079":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"18:10092:18165":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:4322:4780":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:11688:30508":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"18:10705:18217":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:32020:4690":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:40408:4893":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:3911:10862":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:11355:20770":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:2603:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:20536:3528":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"0:18:3220":{"crate_id":0,"path":["unicode_xid","tables","derived_property","XID_Start_table"],"kind":"static"},"1:39161:4732":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"18:9641:18050":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:7588:4767":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:11770:21273":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:5502:10523":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"18:3142:18129":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:47648:10282":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:2540:10829":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:1242:10708":{"crate_id":6,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"7:494:11495":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"1:40699:4860":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:959:10704":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:13461:22074":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:21:681":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:11737:5058":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:13842:22099":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:21916:23647":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:6917:4854":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:1612:33277":{"crate_id":6,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:1213:10707":{"crate_id":6,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"18:9748:18001":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:12388:21310":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:9149:4958":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:1182:29177":{"crate_id":4,"path":["test","term","terminfo","parm","Flags"],"kind":"struct"},"5:1895:10767":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"7:6002:15661":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:9523:18041":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:20579:28621":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:3383:10797":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"5:4564:10865":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:11908:1498":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"7:595:11508":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"5:3465:10819":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"10:0:3507":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"17:3585:16926":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"1:41751:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:22590:4507":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:2668:16907":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:39552:23287":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:6907:29824":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:11924:21281":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:10840:18009":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:7632:26396":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:7791:10790":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:21443:28107":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"18:9822:18070":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:585:10672":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:2116:33126":{"crate_id":6,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:2796:4714":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:2215:10774":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"18:10402:18194":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:22359:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:41791:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"18:13356:22063":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:2245:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:11887:936":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"5:8784:4762":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:10743:18005":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:3168:10838":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:11424:5086":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:2963:4740":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:7014:10695":{"crate_id":6,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"12:1843:3560":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:42713:27573":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:7065:35795":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:1768:610":{"crate_id":5,"path":["std","env"],"kind":"module"},"10:421:16692":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:9803:10800":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:10589:18212":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:10226:29689":{"crate_id":5,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"19:614:36763":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:4508:10919":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"18:11628:20789":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"18:12331:21306":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:633:33202":{"crate_id":6,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"18:10354:18130":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"18:13324:22060":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:4037:17103":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"7:6016:15663":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:4639:10928":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:2741:3531":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:47695:10171":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:10747:128":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"1:7161:4871":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"7:6724:16078":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"7:4609:14972":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:2833:4723":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:4141:4787":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"18:9986:18114":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:7942:10832":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:43763:5097":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:5764:10999":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:731:142":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:1093:29118":{"crate_id":4,"path":["test","term","terminfo","TermInfo"],"kind":"struct"},"1:2929:3534":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:21787:27591":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:13066:22041":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:4321:245":{"crate_id":6,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:12357:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"18:9380:18027":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:2753:4498":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"7:4790:14990":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"7:119:11175":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"1:21966:4505":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"18:9670:18062":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"18:9917:18109":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:11900:745":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"1:3317:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"6:2189:33128":{"crate_id":6,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:6868:35683":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:46158:23660":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:1231:10534":{"crate_id":4,"path":["test","time","TestExecTime"],"kind":"struct"},"18:10691:18216":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:14:3483":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:6446:33277":{"crate_id":6,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"7:1721:10887":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:2805:4721":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"18:8979:36735":{"crate_id":18,"path":["object","read","any","FileInternal"],"kind":"enum"},"18:9545:18039":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:9028:167":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"18:12634:21326":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"18:8909:5069":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"17:7509:17886":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:2692:4697":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"5:7854:10830":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"18:13763:22093":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:7803:17902":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:45822:10253":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"18:13159:22046":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:9410:4975":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:13639:22084":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:5677:17820":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:6248:10695":{"crate_id":6,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:46416:10254":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:3129:33412":{"crate_id":6,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:2161:4669":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:3300:16924":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:680:231":{"crate_id":6,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:480:30488":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"18:12510:21318":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:22326:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:30232:4656":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:2931:16918":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:535:35860":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:41871:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:40718:4864":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"18:10440:18208":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11672:4501":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:936:10701":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"18:10598:18015":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"19:671:22131":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"18:9028:17997":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:7786:10792":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"19:521:22137":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:2800:4716":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:20760:10190":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"18:11861:21277":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:2470:4468":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:4445:17439":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:11279:5063":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:2206:129":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"7:6706:16077":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"19:644:36758":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:40286:4883":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:11895:1481":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"17:2546:16902":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:45644:10218":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:8082:10843":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"17:8090:17908":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:43343:5069":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"18:12006:21285":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:8075:4854":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"5:10422:10836":{"crate_id":5,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:6919:35677":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:6854:17867":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:11938:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:5071:17609":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"18:13667:22087":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:8806:11007":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:1432:10698":{"crate_id":6,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:867:3560":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:43935:5104":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"10:234:10954":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"7:579:11506":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"1:43144:4990":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"18:12550:21321":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:10670:29840":{"crate_id":5,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"12:1035:10707":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:42449:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:6506:17856":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:35:10732":{"crate_id":6,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:5834:11095":{"crate_id":6,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:21114:10192":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:2720:16909":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"7:4875:15001":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:6243:35737":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:40677:25420":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"18:11573:20785":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"19:538:22142":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"12:1009:10706":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:7318:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:9405:4974":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"12:821:10700":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:11892:312":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"5:1048:10705":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:20982:10800":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:6133:29528":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"4:200:29061":{"crate_id":4,"path":["test","console","OutputLocation"],"kind":"enum"},"0:8:1645":{"crate_id":0,"path":["unicode_xid","tables","UNICODE_VERSION"],"kind":"constant"},"17:5797:35849":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:6321:17843":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"7:6848:16086":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:21116:10188":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"18:8420:17985":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"1:39075:4744":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:1329:10547":{"crate_id":4,"path":["test","types","TestName"],"kind":"enum"},"17:3899:16989":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:41454:4762":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"18:13469:22075":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:42153:4959":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:45543:10252":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"18:13233:22052":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:1370:10549":{"crate_id":4,"path":["test","types","TestDesc"],"kind":"struct"},"17:5571:17814":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:8387:10954":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"18:13651:22085":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"7:4398:14791":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:11904:740":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"1:11265:4987":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:5191:33277":{"crate_id":6,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:7198:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:5712:10695":{"crate_id":6,"path":["alloc","string","Drain"],"kind":"struct"},"18:9178:18000":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"18:11282:20766":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"1:45347:10239":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:40487:4898":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:1080:10708":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"12:2060:10705":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"0:7:1643":{"crate_id":0,"path":["unicode_xid","tables"],"kind":"module"},"17:2572:16903":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"18:11821:18167":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"17:2830:16914":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:42393:23511":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"7:5747:15641":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:2817:4719":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:7202:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:45592:10206":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:3135:30294":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:7596:17892":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:3815:16953":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:3644:3560":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:7693:10757":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:6768:4851":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:21854:23512":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"18:11459:20777":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"4:1016:10516":{"crate_id":4,"path":["test","options","OutputFormat"],"kind":"enum"},"12:665:3560":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:6662:17861":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:40448:4879":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"18:10000:18160":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"12:744:10694":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"5:6188:10525":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:3677:10855":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"7:4952:15009":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"7:5843:15610":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:10712:10795":{"crate_id":5,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"18:9628:18037":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:2522:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"12:1091:16811":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:2642:16906":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:7838:119":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"7:4898:15003":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:5920:17829":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:7798:10793":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"1:40424:4894":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:3875:10861":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:41445:3559":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"18:11299:20767":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:42160:4958":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:2912:33164":{"crate_id":6,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:11372:10854":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"7:4641:14975":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:4125:10895":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:9796:18063":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4137:4758":{"crate_id":6,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:7077:17875":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:2426:16897":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:12607:21325":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"17:5418:35850":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"4:1353:10548":{"crate_id":4,"path":["test","types","TestId"],"kind":"struct"},"1:6585:3568":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:6390:17849":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:10942:30502":{"crate_id":5,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:180:16839":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:5239:11053":{"crate_id":6,"path":["alloc","slice","Join"],"kind":"trait"},"7:5829:15609":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:8479:4762":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"1:8670:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:11145:30492":{"crate_id":5,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:8776:10974":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"18:12259:21301":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:3370:4694":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"7:5988:15659":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:4574:32551":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:46036:10280":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:2869:128":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"4:1038:10517":{"crate_id":4,"path":["test","options","RunIgnored"],"kind":"enum"},"1:41368:4910":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:43163:5001":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"18:10015:18161":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:11468:30558":{"crate_id":5,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:11449:11027":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"5:9184:10753":{"crate_id":5,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:2839:4724":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:7683:17896":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"7:5798:15646":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:46866:10209":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"18:10735:18219":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:41589:4763":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"18:9265:18002":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"18:13821:22098":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:45681:10273":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"7:4751:14985":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:6695:244":{"crate_id":6,"path":["alloc","vec","Vec"],"kind":"struct"},"5:10847:29846":{"crate_id":5,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:10771:5009":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"18:13879:22102":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:4110:4786":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:47072:10243":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:3158:10711":{"crate_id":6,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:2774:4712":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:648:29055":{"crate_id":4,"path":["test","term","terminfo","TerminfoTerminal"],"kind":"struct"},"17:2742:16910":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"7:4377:14947":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"7:5032:15017":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"18:12622:18018":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"18:11520:20781":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"18:12046:21288":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:5528:4887":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:9147:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"5:947:10702":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:39982:23645":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"7:5051:15018":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"7:5809:15647":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:760:10535":{"crate_id":4,"path":["test","types","TestFn"],"kind":"enum"},"1:30272:4658":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:8870:11009":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4207:4762":{"crate_id":6,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:11993:21284":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:2477:10828":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"7:4813:14993":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:5908:4758":{"crate_id":6,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:21879:23520":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:7757:17900":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"7:1588:12416":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:3775:33277":{"crate_id":6,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"7:482:11493":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"7:4947:15008":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"18:12194:21298":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"21:221:22154":{"crate_id":21,"path":["getopts","Fail"],"kind":"enum"},"2:0:443":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:6578:11080":{"crate_id":6,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:7859:17904":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"18:11372:20771":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"6:2407:33184":{"crate_id":6,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:43210:4872":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:8215:10898":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:5468:4758":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"7:1614:12419":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"21:94:22159":{"crate_id":21,"path":["getopts","ParsingStyle"],"kind":"enum"},"5:6085:5141":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:0:497":{"crate_id":1,"path":["core"],"kind":"module"},"1:3510:10695":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"18:13367:22064":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:21839:26490":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"7:506:11497":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"18:10026:18162":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"18:8195:17963":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"1:45662:10224":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:6367:3560":{"crate_id":6,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"10:325:16745":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:3325:4860":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"18:1978:18082":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:2594:16904":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"12:859:10703":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:5630:17817":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"18:13292:22057":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"12:1866:10712":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:42167:4960":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:8854:11006":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"0:15:1644":{"crate_id":0,"path":["unicode_xid","tables","derived_property"],"kind":"module"},"17:4624:17474":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:7616:10659":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"5:10682:10793":{"crate_id":5,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:5035:10988":{"crate_id":6,"path":["alloc","rc","Weak"],"kind":"struct"},"18:12902:22031":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:8800:3560":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:39176:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"7:6628:12374":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:11556:20784":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"1:9161:4963":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"18:9409:18028":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"15:0:3512":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"18:11471:20778":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"4:1123:29202":{"crate_id":4,"path":["test","term","terminfo","parm","States"],"kind":"enum"},"5:11902:743":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"18:11319:20768":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:11712:4248":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"18:10989:18016":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"6:2636:33374":{"crate_id":6,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"18:11785:21274":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:2378:16895":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:43357:4995":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:9961:4762":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:3276:10696":{"crate_id":6,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:8072:17907":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:6201:17837":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:44334:5140":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:21431:4988":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:45968:10219":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:3933:10864":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"7:1657:12422":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:927:10528":{"crate_id":4,"path":["test","event","TestEvent"],"kind":"enum"},"18:9322:36753":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:7808:10791":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"10:388:16691":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:43956:5106":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"18:9148:36743":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"18:9772:18065":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:40255:4882":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:5386:16860":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"7:4472:14958":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:3225:16923":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"7:6821:16084":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:13453:22073":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:47402:10221":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"10:445:16690":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:46652:10220":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"18:10303:18122":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:4568:17466":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:4683:10880":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:44364:5147":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"12:867:10704":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:21083:10800":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"18:12293:21303":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"18:10428:18207":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:6674:4881":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"18:10897:18012":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:41951:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"18:10712:18218":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:47785:10177":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:11894:1397":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"5:8141:5069":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"18:9946:18085":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:4642:10901":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:46060:10281":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:2589:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:8109:17909":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:2404:16896":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"0:9:1778":{"crate_id":0,"path":["unicode_xid","tables","bsearch_range_table"],"kind":"function"},"5:1785:10737":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"18:12224:21299":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:844:4762":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:4757:17535":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"6:2916:33165":{"crate_id":6,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:8955:29540":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"18:8823:17994":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:562:17980":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"7:4486:14960":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:11732:5059":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:3079:4734":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:39955:4766":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"18:12770:22027":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:41530:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"18:8788:17993":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:8170:17913":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"18:11721:21272":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:43809:5100":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:5976:17832":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"7:5967:15657":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:41289:23509":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"0:19:1664":{"crate_id":0,"path":["unicode_xid","tables","derived_property","XID_Start"],"kind":"function"},"5:1583:10712":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:45622:10212":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:40296:4884":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"18:8683:17966":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:5779:17825":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:3382:4693":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:43946:5105":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:7595:10662":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"1:41394:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"5:5067:191":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"17:6793:17865":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"18:9866:18077":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:2906:33188":{"crate_id":6,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:10722:29855":{"crate_id":5,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:22491:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:1630:588":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:21665:23293":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"18:13411:22068":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:7665:10709":{"crate_id":5,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"18:13721:22091":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"7:6668:12351":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:46014:10274":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"7:4732:14983":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:10257:18127":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:8982:29288":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:8154:5072":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"17:7588:17891":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"18:11813:18169":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"18:12358:21308":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"18:9138:17999":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:863:10717":{"crate_id":6,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:8337:10953":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"18:13516:22080":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:20596:28624":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"18:12563:21322":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:5847:17827":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:4854:10927":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:6767:17864":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"18:11844:21276":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:1366:4763":{"crate_id":6,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:2298:16864":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"1:45521:10246":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:9381:10792":{"crate_id":5,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:229:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:1195:29186":{"crate_id":4,"path":["test","term","terminfo","parm","FormatOp"],"kind":"enum"},"6:6739:33293":{"crate_id":6,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:5104:17618":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"18:11969:21283":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"7:541:11500":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"17:7317:35727":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:4903:10935":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"7:0:816":{"crate_id":7,"path":["libc"],"kind":"module"},"3:0:3503":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"7:4431:14953":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:6409:11000":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:1176:187":{"crate_id":4,"path":["test","term","terminfo","parm","Param"],"kind":"enum"},"5:3449:30133":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:2264:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"5:10826:29816":{"crate_id":5,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"18:11391:20772":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"17:3030:16920":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"1:44131:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"7:4719:14981":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"18:13564:22081":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:4433:4784":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:11886:371":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"5:11237:32539":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"4:980:10518":{"crate_id":4,"path":["test","options","ShouldPanic"],"kind":"enum"},"5:530:10654":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"1:43236:5003":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:386:17978":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"18:11109:18021":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"5:10419:10840":{"crate_id":5,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:6977:4772":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:22425:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:1062:10706":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"7:7526:15172":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:5963:17831":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:41226:4905":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:2524:16901":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:11870:29842":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:47464:10255":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:7711:17898":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:20729:10193":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"7:5880:15652":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:9973:18086":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:39216:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:1463:10721":{"crate_id":6,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:5499:10969":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"7:1576:12415":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:10452:18181":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:43245:5006":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:41991:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:43461:4997":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:40726:4866":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:10649:18214":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"21:191:22158":{"crate_id":21,"path":["getopts","Optval"],"kind":"enum"},"1:43479:4993":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:885:10574":{"crate_id":4,"path":["test","bench","BenchSamples"],"kind":"struct"},"5:3782:10856":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"12:2204:35582":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:5693:10990":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:44152:5113":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:12382:5137":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:42174:4961":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:41606:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"21:108:22156":{"crate_id":21,"path":["getopts","Name"],"kind":"enum"},"6:6990:10727":{"crate_id":6,"path":["alloc","alloc","Global"],"kind":"struct"},"1:47214:10215":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:13145:22045":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:11891:21279":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"7:6755:16079":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:41309:26485":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"7:7532:15173":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"15:165:16822":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"19:574:36758":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8838:26395":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"18:12835:22029":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"7:4784:14989":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:4702:17528":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:280:10641":{"crate_id":6,"path":["alloc","boxed","Box"],"kind":"struct"},"5:6485:10997":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:4969:17579":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:6482:10996":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:42674:4976":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"7:7503:15169":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:265:33277":{"crate_id":6,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"18:10670:18205":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:8925:29805":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:40057:4803":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"12:768:10696":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"18:12282:21302":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"19:690:22133":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:11225:29272":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6607:11082":{"crate_id":6,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"7:4851:14998":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:6218:17838":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:41521:4926":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:11903:744":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"7:526:11498":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"7:6785:16081":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:10316:18123":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"18:10936:18014":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:10804:5010":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:413:165":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"14:226:35642":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:30836:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"7:4449:14955":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:7338:11077":{"crate_id":6,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"18:13506:22079":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:43153:4991":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:42458:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:6179:17836":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"7:4404:14950":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"7:4383:14948":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"19:481:22138":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:1572:10696":{"crate_id":5,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"7:653:11555":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:13678:22088":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:47823:10179":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:40149:4847":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:41671:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:9188:36741":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:9362:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:45491:10241":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"18:1947:18058":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:2360:10781":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"1:40684:4856":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"11:44:16798":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:4176:10896":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:40473:4897":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"22:0:3518":{"crate_id":22,"path":["rustc_std_workspace_std"],"kind":"module"},"5:8960:29553":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"18:10615:18203":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"18:9696:18046":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:11331:10855":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:7103:17876":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"7:568:11504":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"17:6164:35694":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:895:10519":{"crate_id":4,"path":["test","cli","TestOpts"],"kind":"struct"},"1:4251:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:9624:22479":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"7:474:11492":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"18:13240:22053":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"18:10555:18175":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:7263:3536":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:7557:17890":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:10516:18174":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:4366:4758":{"crate_id":6,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:20984:10185":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:9107:4813":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:2163:4670":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"18:11532:20782":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"4:1100:128":{"crate_id":4,"path":["test","term","terminfo","Error"],"kind":"enum"},"1:10130:5012":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4047:4763":{"crate_id":6,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:6544:17858":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:6721:22803":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:40367:4890":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"7:4416:14951":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:8214:17915":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"1:41332:4908":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:6696:17862":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:3931:4758":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:3234:4743":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:13791:22095":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:22458:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:2348:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:1228:10706":{"crate_id":6,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"15:31:16821":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:45699:10279":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:47572:10227":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"10:174:16793":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:11484:20779":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:20768:25871":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:21332:10189":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:43778:5098":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:3640:16927":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:10283:18126":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"7:4681:10859":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:44080:5051":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6180:33293":{"crate_id":6,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:5818:10988":{"crate_id":6,"path":["alloc","sync","Weak"],"kind":"struct"},"18:13499:22078":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:959:10567":{"crate_id":4,"path":["test","helpers","metrics","MetricMap"],"kind":"struct"},"1:41260:4907":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:30041:4469":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"18:9453:18031":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"7:1715:12428":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:40693:4858":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"7:4757:14986":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"7:4980:15012":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"18:242:36750":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:10357:30503":{"crate_id":5,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:5320:10964":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"1:4377:4782":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:6293:17841":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:8948:30631":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"18:12158:21296":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:1568:10695":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:11800:21275":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"18:12098:21292":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"18:8632:17962":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"18:12403:21311":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:2387:10520":{"crate_id":5,"path":["std","io"],"kind":"module"},"1:40246:4873":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:22524:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:4:1014":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"5:4681:10879":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:7335:35887":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:40268:4874":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:2169:34380":{"crate_id":6,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:1561:4762":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:2862:16915":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:1589:10713":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:43611:5072":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"18:9683:18061":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:1197:10705":{"crate_id":6,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"18:9350:36742":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"7:4767:14987":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"12:1847:10695":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:1209:10544":{"crate_id":4,"path":["test","test_result","TestResult"],"kind":"enum"},"7:554:11502":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"5:6373:10993":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"7:1908:12574":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:22293:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:21803:23637":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:8047:10794":{"crate_id":5,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"18:10967:18015":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"1:2706:4698":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"18:13865:22101":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:47732:10174":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:5032:17594":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:47610:10261":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"7:7252:16455":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:815:10716":{"crate_id":6,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"7:5773:15643":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:8485:10958":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"6:4818:204":{"crate_id":6,"path":["alloc","rc","Rc"],"kind":"struct"},"1:2847:4726":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"12:703:10699":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"7:4920:15005":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:7165:4870":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:6990:17874":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"7:6151:15694":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"7:4492:14961":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:9062:10804":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"18:9826:18057":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:9617:18038":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:13659:22086":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"7:4619:14973":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"15:202:11058":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:43223:5007":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:47800:10178":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"7:4970:15011":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"18:8718:17967":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"7:4865:15000":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:355:10669":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:3063:16922":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"5:1594:10714":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"}},"external_crates":{"23":{"name":"unicode_width","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"rustc_std_workspace_std","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"test","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"getopts","html_root_url":"https://docs.rs/getopts/0.2.20/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}