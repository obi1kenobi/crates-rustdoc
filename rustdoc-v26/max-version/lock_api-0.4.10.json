{"root":"0:0:1700","crate_version":"0.4.10","includes_private":true,"index":{"0:295:2049":{"id":"0:295:2049","crate_id":0,"name":"RawReentrantMutex","span":{"filename":"lock_api/src/remutex.rs","begin":[67,0],"end":[72,1]},"visibility":"public","docs":"A raw mutex type that wraps another raw mutex to provide reentrancy.\n\nAlthough this has the same methods as the [`RawMutex`] trait, it does\nnot implement it, and should not be used in the same way, since this\nmutex can successfully acquire a lock multiple times in the same thread.\nOnly use this when you know you want a raw mutex that can be locked\nreentrantly; you probably want [`ReentrantMutex`] instead.\n\n[`RawMutex`]: trait.RawMutex.html\n[`ReentrantMutex`]: struct.ReentrantMutex.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:298:2051","0:299:2052","0:300:1697","0:301:2053"],"fields_stripped":false}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:308","0:321","0:326","a:1:8249:2687-0:295:2049","a:1:8250:2686-0:295:2049","a:1:2741:2617-0:295:2049","b:1:2542-0:295:2049","b:1:2248-0:295:2049","b:1:2553-0:295:2049","b:1:2251-0:295:2049","b:1:2538-0:295:2049","b:1:3319-0:295:2049","b:1:2548-0:295:2049","b:6:18-0:295:2049","0:305","0:302"]}}},"a:1:8250:2686-0:1230:219":{"id":"a:1:8250:2686-0:1230:219","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:12034:30292":{"id":"1:12034:30292","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12033:30291"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:590:2172":{"id":"0:590:2172","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[120,4],"end":[120,43]},"visibility":"default","docs":"Releases an exclusive lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:893:1987":{"id":"0:893:1987","crate_id":0,"name":"unlocked","span":{"filename":"lock_api/src/rwlock.rs","begin":[1719,4],"end":[1729,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is functionally equivalent to the `unlocked` method on [`RwLockWriteGuard`].","links":{"`RwLockWriteGuard`":"0:1230:219"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:444:1858":{"id":"0:444:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/remutex.rs","begin":[707,4],"end":[713,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `ReentrantMutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12046:30308":{"id":"1:12046:30308","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"7:11888:419","self::pattern":"1:11712:7297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:577:2148":{"id":"0:577:2148","crate_id":0,"name":"RawRwLock","span":{"filename":"lock_api/src/rwlock.rs","begin":[38,0],"end":[99,1]},"visibility":"public","docs":"Basic operations for a reader-writer lock.\n\nTypes implementing this trait can be used by `RwLock` to form a safe and\nfully-functioning `RwLock` type.\n\n# Safety\n\nImplementations of this trait must ensure that the `RwLock` is actually\nexclusive: an exclusive lock can't be acquired while an exclusive or shared\nlock exists, and a shared lock can't be acquire while an exclusive lock\nexists.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:578:1828","0:579:1831","0:580:2151","0:581:2153","0:582:2156","0:583:2158","0:584:2160","0:585:2163","0:586:1846","0:587:2166"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"a:1:2741:2617-0:1238:2323":{"id":"a:1:2741:2617-0:1238:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2251-0:1245:2391":{"id":"b:1:2251-0:1245:2391","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[427,0],"end":[432,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:97:694"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:598:2190":{"id":"0:598:2190","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[175,4],"end":[175,67]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1021:2005":{"id":"0:1021:2005","crate_id":0,"name":"unlocked_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[2310,4],"end":[2320,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is functionally equivalent to the `unlocked_fair` method on [`RwLockUpgradableReadGuard`].","links":{"`RwLockUpgradableReadGuard`":"0:1245:2391"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12138:31519":{"id":"1:12138:31519","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4533:31519"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43674:6439","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:2617-0:1257:2400":{"id":"a:1:2741:2617-0:1257:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2701:228-0:6:1694":{"id":"a:1:2701:228-0:6:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:6:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1226:1699":{"id":"0:1226:1699","crate_id":0,"name":"rwlock","span":{"filename":"lock_api/src/rwlock.rs","begin":[1366,4],"end":[1366,29]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:1242:860":{"id":"0:1242:860","crate_id":0,"name":"marker","span":{"filename":"lock_api/src/rwlock.rs","begin":[1705,4],"end":[1705,39]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"PhantomData","id":"1:2706:1810","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:577:2148","args":null}}}}],"bindings":[]}}}}}},"b:1:2538-0:1223:2321":{"id":"b:1:2538-0:1223:2321","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:6:1694":{"id":"b:1:2553-0:6:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:6:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:88:1947":{"id":"0:88:1947","crate_id":0,"name":"try_lock_arc_for","span":{"filename":"lock_api/src/mutex.rs","begin":[392,4],"end":[399,5]},"visibility":"public","docs":"Attempts to acquire this lock through an `Arc` until a timeout is reached.\n\nThis method is similar to the `try_lock_for` method; however, it requires the `Mutex` to be inside of an\n`Arc` and the resulting mutex guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:40:1867","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248:588":{"id":"0:248:588","crate_id":0,"name":"drop","span":{"filename":"lock_api/src/mutex.rs","begin":[927,4],"end":[932,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:2686-0:1199:2103":{"id":"a:1:8250:2686-0:1199:2103","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:1219:1699":{"id":"0:1219:1699","crate_id":0,"name":"rwlock","span":{"filename":"lock_api/src/rwlock.rs","begin":[1188,4],"end":[1188,28]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:1:2701:228-0:1223:2321":{"id":"a:1:2701:228-0:1223:2321","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1024:1863":{"id":"0:1024:1863","crate_id":0,"name":"bump","span":{"filename":"lock_api/src/rwlock.rs","begin":[2326,4],"end":[2331,5]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `bump` on [`RwLockUpgradableReadGuard`].","links":{"`RwLockUpgradableReadGuard`":"0:1245:2391"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:6:18-0:9:1696":{"id":"b:6:18-0:9:1696","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:9:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:42:1870":{"id":"0:42:1870","crate_id":0,"name":"Instant","span":{"filename":"lock_api/src/mutex.rs","begin":[125,4],"end":[125,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:232:1858":{"id":"0:232:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/mutex.rs","begin":[901,4],"end":[907,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:663:2294":{"id":"0:663:2294","crate_id":0,"name":"write","span":{"filename":"lock_api/src/rwlock.rs","begin":[479,4],"end":[483,5]},"visibility":"public","docs":"Locks this `RwLock` with exclusive write access, blocking the current\nthread until it can be acquired.\n\nThis function will not return while other writers or other readers\ncurrently have access to the lock.\n\nReturns an RAII guard which will drop the write access of this `RwLock`\nwhen dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1213:1884":{"id":"0:1213:1884","crate_id":0,"name":"data","span":{"filename":"lock_api/src/remutex.rs","begin":[906,4],"end":[906,18]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}}},"1:12025:1909":{"id":"1:12025:1909","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1126:859":{"id":"0:1126:859","crate_id":0,"name":"map","span":{"filename":"lock_api/src/rwlock.rs","begin":[2737,4],"end":[2749,5]},"visibility":"public","docs":"Make a new `MappedRwLockWriteGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedRwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5644-0:1275:2452":{"id":"b:5:5644-0:1275:2452","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5400:7239":{"id":"5:5400:7239","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:937":{"id":"0:937","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1879,0],"end":[1933,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:941:1699","0:942:1987","0:945:2226","0:946:2229"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:339":{"id":"0:339","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[222,0],"end":[225,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:947":{"id":"0:947","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1935,0],"end":[1988,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeFair","id":"0:614:2232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:951:1858","0:952:2005","0:955:1863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:859":{"id":"0:859","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1655,0],"end":[1661,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:863:230","0:864:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12137:7183":{"id":"1:12137:7183","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4536:7183"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43665:6213","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:535:552":{"id":"0:535:552","crate_id":0,"name":"deref","span":{"filename":"lock_api/src/remutex.rs","begin":[1002,4],"end":[1004,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:754:1987":{"id":"0:754:1987","crate_id":0,"name":"unlocked","span":{"filename":"lock_api/src/rwlock.rs","begin":[1255,4],"end":[1265,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:554":{"id":"0:155:554","crate_id":0,"name":"deref_mut","span":{"filename":"lock_api/src/mutex.rs","begin":[647,4],"end":[649,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:333:2077":{"id":"b:1:2553-0:333:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[147,0],"end":[147,73]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:704:2382":{"id":"0:704:2382","crate_id":0,"name":"try_read_recursive_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[920,4],"end":[930,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.\n\nThis method is guaranteed to succeed without blocking if another read\nlock is held at the time of the call. See the documentation for\n`read_recursive` for details.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:1846":{"id":"0:36:1846","crate_id":0,"name":"is_locked","span":{"filename":"lock_api/src/mutex.rs","begin":[69,4],"end":[78,5]},"visibility":"default","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149:230":{"id":"0:149:230","crate_id":0,"name":"Target","span":{"filename":"lock_api/src/mutex.rs","begin":[638,4],"end":[638,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[420,0],"end":[425,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:35:1844":{"id":"0:35:1844","crate_id":0,"name":"unlock","span":{"filename":"lock_api/src/mutex.rs","begin":[65,4],"end":[65,28]},"visibility":"default","docs":"Unlocks this mutex.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, i.e. it must\nbe paired with a successful call to [`lock`], [`try_lock`], [`try_lock_for`] or [`try_lock_until`].\n\n[`lock`]: #tymethod.lock\n[`try_lock`]: #tymethod.try_lock\n[`try_lock_for`]: trait.RawMutexTimed.html#tymethod.try_lock_for\n[`try_lock_until`]: trait.RawMutexTimed.html#tymethod.try_lock_until","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"a:1:8250:2686-0:333:2077":{"id":"a:1:8250:2686-0:333:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:582:2156":{"id":"0:582:2156","crate_id":0,"name":"unlock_shared","span":{"filename":"lock_api/src/rwlock.rs","begin":[60,4],"end":[60,35]},"visibility":"default","docs":"Releases a shared lock.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:1143":{"id":"0:1143","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2810,0],"end":[2815,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:2911:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1147:554"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12063:26350":{"id":"1:12063:26350","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"7:11888:419","self::pattern":"1:11712:7297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11535:6248","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:1230:219":{"id":"b:1:2548-0:1230:219","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:589:2170":{"id":"0:589:2170","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[113,4],"end":[113,40]},"visibility":"default","docs":"Releases a shared lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:674:2327":{"id":"0:674:2327","crate_id":0,"name":"read_arc","span":{"filename":"lock_api/src/rwlock.rs","begin":[616,4],"end":[620,5]},"visibility":"public","docs":"Locks this `RwLock` with read access, through an `Arc`.\n\nThis method is similar to the `read` method; however, it requires the `RwLock` to be inside of an `Arc`\nand the resulting read guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5398:32182":{"id":"5:5398:32182","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[637,0],"end":[643,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:149:230","0:150:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:840":{"id":"0:840","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1558,0],"end":[1577,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockDowngrade","id":"0:593:2183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:844:2186"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:911:1863":{"id":"0:911:1863","crate_id":0,"name":"bump","span":{"filename":"lock_api/src/rwlock.rs","begin":[1815,4],"end":[1820,5]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to the `bump` method on [`RwLockWriteGuard`].","links":{"`RwLockWriteGuard`":"0:1230:219"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5384:2707":{"id":"5:5384:2707","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1272:62":{"id":"0:1272:62","crate_id":0,"name":"raw","span":{"filename":"lock_api/src/rwlock.rs","begin":[2577,4],"end":[2577,14]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"R"}}}}},"0:933":{"id":"0:933","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1874,0],"end":[1877,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:875":{"id":"0:875","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1680,0],"end":[1684,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:879:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1020:1858":{"id":"0:1020:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[2295,4],"end":[2304,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nThis is functionally identical to the `unlock_fair` method on [`RwLockUpgradableReadGuard`].","links":{"`RwLockUpgradableReadGuard`":"0:1245:2391"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1163":{"id":"0:1163","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2844,0],"end":[2847,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"owning_ref\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StableDeref","id":"22:6:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:885":{"id":"0:885","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1695,0],"end":[1695,98]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"owning_ref\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StableDeref","id":"22:6:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1129:1983":{"id":"0:1129:1983","crate_id":0,"name":"try_map","span":{"filename":"lock_api/src/rwlock.rs","begin":[2761,4],"end":[2776,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `MappedRwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockWriteGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:822:668":{"id":"0:822:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[1468,4],"end":[1470,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263-0:13:1697":{"id":"0:263-0:13:1697","crate_id":0,"name":null,"span":{"filename":"lock_api/src/lib.rs","begin":[108,0],"end":[108,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::mutex","name":"mutex","id":"0:13:1697","glob":true}}},"1:12128:31517":{"id":"1:12128:31517","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11673:127","`FromStr`":"1:11672:2787"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11672:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11672:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:1257:2400":{"id":"b:1:3319-0:1257:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:6:18-0:1207:2122":{"id":"b:6:18-0:1207:2122","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:492:2005":{"id":"0:492:2005","crate_id":0,"name":"unlocked_fair","span":{"filename":"lock_api/src/remutex.rs","begin":[851,4],"end":[861,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThis is functionally identical to the `unlocked_fair` method on [`ReentrantMutexGuard`].","links":{"`ReentrantMutexGuard`":"0:1190:2083"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2248-0:1183:1978":{"id":"b:1:2248-0:1183:1978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:11:1606":{"id":"0:11:1606","crate_id":0,"name":"0","span":{"filename":"lock_api/src/lib.rs","begin":[103,23],"end":[103,30]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"raw_pointer":{"mutable":true,"type":{"tuple":[]}}}}},"0:365:1909":{"id":"0:365:1909","crate_id":0,"name":"get_mut","span":{"filename":"lock_api/src/remutex.rs","begin":[340,4],"end":[342,5]},"visibility":"public","docs":"Returns a mutable reference to the underlying data.\n\nSince this call borrows the `ReentrantMutex` mutably, no actual locking needs to\ntake place---the mutable borrow statically guarantees no locks exist.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:921":{"id":"0:921","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1841,0],"end":[1849,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:924:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:787":{"id":"0:787","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1356,0],"end":[1356,97]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"owning_ref\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StableDeref","id":"22:6:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:810:552":{"id":"0:810:552","crate_id":0,"name":"deref","span":{"filename":"lock_api/src/rwlock.rs","begin":[1443,4],"end":[1445,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1025":{"id":"0:1025","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2335,0],"end":[2408,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeDowngrade","id":"0:617:2241","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1028:2186","0:1029:2486","0:1032:2492"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1078:859":{"id":"0:1078:859","crate_id":0,"name":"map","span":{"filename":"lock_api/src/rwlock.rs","begin":[2598,4],"end":[2610,5]},"visibility":"public","docs":"Make a new `MappedRwLockReadGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedRwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:715:2403":{"id":"0:715:2403","crate_id":0,"name":"upgradable_read_arc","span":{"filename":"lock_api/src/rwlock.rs","begin":[1051,4],"end":[1055,5]},"visibility":"public","docs":"Locks this `RwLock` with upgradable read access, through an `Arc`.\n\nThis method is similar to the `upgradable_read` method; however, it requires the `RwLock` to be\ninside of an `Arc` and the resulting read guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:483:1698":{"id":"0:483:1698","crate_id":0,"name":"remutex","span":{"filename":"lock_api/src/remutex.rs","begin":[808,4],"end":[810,5]},"visibility":"public","docs":"Returns a reference to the `ReentrantMutex` this object is guarding, contained in its `Arc`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:1168:167":{"id":"b:1:2251-0:1168:167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2538-0:333:2077":{"id":"b:1:2538-0:333:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2542-0:1268:2423":{"id":"b:1:2542-0:1268:2423","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1061:668":{"id":"0:1061:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[2553,4],"end":[2555,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1183:1978":{"id":"0:1183:1978","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"lock_api/src/mutex.rs","begin":[820,0],"end":[824,1]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1187:62","0:1188:1884","0:1189:860"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:218","0:228","a:1:8249:2687-0:1183:1978","a:1:8250:2686-0:1183:1978","a:1:2741:2617-0:1183:1978","b:1:2542-0:1183:1978","b:1:2248-0:1183:1978","b:1:2553-0:1183:1978","b:1:2251-0:1183:1978","b:1:2538-0:1183:1978","b:1:3319-0:1183:1978","b:1:2548-0:1183:1978","b:5:5644-0:1183:1978","b:6:18-0:1183:1978","0:254","0:239","0:214","0:249","0:233","0:259","0:244","0:210"]}}},"0:762:2005":{"id":"0:762:2005","crate_id":0,"name":"unlocked_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[1297,4],"end":[1307,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThe `RwLock` is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12101:31508":{"id":"1:12101:31508","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:578:1828":{"id":"0:578:1828","crate_id":0,"name":"INIT","span":{"filename":"lock_api/src/rwlock.rs","begin":[43,4],"end":[43,21]},"visibility":"default","docs":"Initial value for an unlocked `RwLock`.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":null}}},"0:239":{"id":"0:239","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:2911:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:243:554"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:849:2245":{"id":"0:849:2245","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"lock_api/src/rwlock.rs","begin":[1586,4],"end":[1597,5]},"visibility":"public","docs":"Atomically downgrades a write lock into an upgradable read lock without allowing any\nwriters to take exclusive access of the lock in the meantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:798":{"id":"0:798","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1395,0],"end":[1437,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:588:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:801:1858","0:802:2005","0:805:1863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8250:2686-0:1257:2400":{"id":"a:1:8250:2686-0:1257:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:694":{"id":"0:694","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[837,0],"end":[906,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockRecursive","id":"0:602:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:697:2368","0:698:2371","0:699:2374","0:700:2378"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:765:1863":{"id":"0:765:1863","crate_id":0,"name":"bump","span":{"filename":"lock_api/src/rwlock.rs","begin":[1315,4],"end":[1320,5]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `read`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1909":{"id":"0:71:1909","crate_id":0,"name":"get_mut","span":{"filename":"lock_api/src/mutex.rs","begin":[241,4],"end":[243,5]},"visibility":"public","docs":"Returns a mutable reference to the underlying data.\n\nSince this call borrows the `Mutex` mutably, no actual locking needs to\ntake place---the mutable borrow statically guarantees no locks exist.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:884:668":{"id":"0:884:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[1689,4],"end":[1691,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1245:2391":{"id":"0:1245:2391","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"lock_api/src/rwlock.rs","begin":[1869,0],"end":[1872,1]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1249:1699","0:1250:860"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:937","0:947","0:956","0:967","0:973","a:1:8249:2687-0:1245:2391","a:1:8250:2686-0:1245:2391","a:1:2684:220-0:1245:2391","a:1:2741:2617-0:1245:2391","b:1:2542-0:1245:2391","b:1:2248-0:1245:2391","b:1:2553-0:1245:2391","b:1:2251-0:1245:2391","b:1:2538-0:1245:2391","b:1:3319-0:1245:2391","b:1:2548-0:1245:2391","b:5:5644-0:1245:2391","b:6:18-0:1245:2391","0:1004","0:983","0:933","0:989","0:994","0:999"]}}},"a:1:2684:220-0:1245:2391":{"id":"a:1:2684:220-0:1245:2391","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2684:220-0:1257:2400":{"id":"a:1:2684:220-0:1257:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:228":{"id":"0:228","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[887,0],"end":[908,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:37:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:232:1858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12066:30302":{"id":"1:12066:30302","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11712:7297","`DoubleEndedIterator`":"1:7240:121","prim@char":"7:11888:419","str::split":"1:12060:30299"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43375:6251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:7312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6:1694":{"id":"0:6:1694","crate_id":0,"name":"GuardSend","span":{"filename":"lock_api/src/lib.rs","begin":[100,0],"end":[100,25]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is `Send`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":["0:8:1606"]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2701:228-0:6:1694","a:1:8249:2687-0:6:1694","a:1:8250:2686-0:6:1694","a:1:2684:220-0:6:1694","a:1:2741:2617-0:6:1694","b:1:2542-0:6:1694","b:1:2248-0:6:1694","b:1:2553-0:6:1694","b:1:2251-0:6:1694","b:1:2538-0:6:1694","b:1:3319-0:6:1694","b:1:2548-0:6:1694","b:6:18-0:6:1694"]}}},"b:1:2248-0:1275:2452":{"id":"b:1:2248-0:1275:2452","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:338:1884":{"id":"0:338:1884","crate_id":0,"name":"data","span":{"filename":"lock_api/src/remutex.rs","begin":[219,4],"end":[219,23]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"UnsafeCell","id":"1:4406:1809","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},"0:584:2160":{"id":"0:584:2160","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"lock_api/src/rwlock.rs","begin":[66,4],"end":[66,41]},"visibility":"default","docs":"Attempts to acquire an exclusive lock without blocking.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1167-0:560:1699":{"id":"0:1167-0:560:1699","crate_id":0,"name":null,"span":{"filename":"lock_api/src/lib.rs","begin":[116,0],"end":[116,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::rwlock","name":"rwlock","id":"0:560:1699","glob":true}}},"a:1:2741:2617-0:1268:2423":{"id":"a:1:2741:2617-0:1268:2423","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2248-0:1168:167":{"id":"b:1:2248-0:1168:167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:424":{"id":"0:424","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[614,0],"end":[689,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:429:1698","0:430:859","0:433:1983","0:436:1987"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:655:1890":{"id":"0:655:1890","crate_id":0,"name":"const_new","span":{"filename":"lock_api/src/rwlock.rs","begin":[403,4],"end":[408,5]},"visibility":"public","docs":"Creates a new new instance of an `RwLock<T>` based on a pre-existing\n`RawRwLock<T>`.\n\nThis allows creating a `RwLock<T>` in a constant context on stable\nRust.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["raw_rwlock",{"generic":"R"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1029:2486":{"id":"0:1029:2486","crate_id":0,"name":"with_upgraded","span":{"filename":"lock_api/src/rwlock.rs","begin":[2369,4],"end":[2382,5]},"visibility":"public","docs":"First, atomically upgrades an upgradable read lock lock into an exclusive write lock,\nblocking the current thread until it can be acquired.\n\nThen, calls the provided closure with an exclusive reference to the lock's data.\n\nFinally, atomically downgrades the lock back to an upgradable read lock.\nThe closure's return value is returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`upgrade` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"Ret"},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:1168:167":{"id":"b:1:2548-0:1168:167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:410:1955":{"id":"0:410:1955","crate_id":0,"name":"serialize","span":{"filename":"lock_api/src/remutex.rs","begin":[574,4],"end":[579,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["serializer",{"generic":"S"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Ok","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"","id":"23:1805:1818","args":null}}}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"","id":"23:1805:1818","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Serializer","id":"23:1805:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:973":{"id":"0:973","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2109,0],"end":[2173,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeTimed","id":"0:620:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockUpgradeDowngrade","id":"0:617:2241","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:977:2498","0:980:2500"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8249:2687-0:1207:2122":{"id":"a:1:8249:2687-0:1207:2122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:668:2305":{"id":"0:668:2305","crate_id":0,"name":"force_unlock_read","span":{"filename":"lock_api/src/rwlock.rs","begin":[535,4],"end":[537,5]},"visibility":"public","docs":"Forcibly unlocks a read lock.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockReadGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockReadGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is read-unlocked when not read-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:417:1959":{"id":"0:417:1959","crate_id":0,"name":"deserialize","span":{"filename":"lock_api/src/remutex.rs","begin":[589,4],"end":[594,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["deserializer",{"generic":"D"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"D"},"trait":{"name":"","id":"23:1331:1816","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"D","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"D"},"bounds":[{"trait_bound":{"trait":{"name":"Deserializer","id":"23:1331:1816","args":{"angle_bracketed":{"args":[{"lifetime":"'de"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:1183:1978":{"id":"b:1:2553-0:1183:1978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2545-0:625:217":{"id":"b:1:2545-0:625:217","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2547:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:1238:2323":{"id":"b:1:2553-0:1238:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:980:2500":{"id":"0:980:2500","crate_id":0,"name":"try_with_upgraded_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[2155,4],"end":[2172,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade_until` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:612:2226":{"id":"0:612:2226","crate_id":0,"name":"upgrade","span":{"filename":"lock_api/src/rwlock.rs","begin":[238,4],"end":[238,29]},"visibility":"default","docs":"Upgrades an upgradable lock to an exclusive lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:714:2399":{"id":"0:714:2399","crate_id":0,"name":"upgradable_guard_arc","span":{"filename":"lock_api/src/rwlock.rs","begin":[1038,4],"end":[1043,5]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":"# Safety\n\nThe lock must be held when calling this method.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12133:30167":{"id":"1:12133:30167","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:1863":{"id":"0:196:1863","crate_id":0,"name":"bump","span":{"filename":"lock_api/src/mutex.rs","begin":[775,4],"end":[780,5]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis is functionally identical to the `bump` method on [`MutexGuard`].","links":{"`MutexGuard`":"0:1168:167"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1223:2321":{"id":"0:1223:2321","crate_id":0,"name":"ArcRwLockReadGuard","span":{"filename":"lock_api/src/rwlock.rs","begin":[1365,0],"end":[1368,1]},"visibility":"public","docs":"An RAII rwlock guard returned by the `Arc` locking operations on `RwLock`.\n\nThis is similar to the `RwLockReadGuard` struct, except instead of using a reference to unlock the `RwLock`\nit uses an `Arc<RwLock>`. This has several advantages, most notably that it has an `'static` lifetime.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1226:1699","0:1227:860"],"fields_stripped":false}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:791","0:798","a:1:2701:228-0:1223:2321","a:1:8249:2687-0:1223:2321","a:1:8250:2686-0:1223:2321","a:1:2684:220-0:1223:2321","a:1:2741:2617-0:1223:2321","b:1:2542-0:1223:2321","b:1:2248-0:1223:2321","b:1:2553-0:1223:2321","b:1:2251-0:1223:2321","b:1:2538-0:1223:2321","b:1:3319-0:1223:2321","b:1:2548-0:1223:2321","b:5:5644-0:1223:2321","b:6:18-0:1223:2321","0:819","0:811","0:806","0:815"]}}},"0:1011:1699":{"id":"0:1011:1699","crate_id":0,"name":"rwlock","span":{"filename":"lock_api/src/rwlock.rs","begin":[2230,4],"end":[2232,5]},"visibility":"public","docs":"Returns a reference to the rwlock, contained in its original `Arc`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[150,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:59:939","0:60:1887"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:391:60":{"id":"0:391:60","crate_id":0,"name":"default","span":{"filename":"lock_api/src/remutex.rs","begin":[531,4],"end":[533,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:928:668":{"id":"0:928:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[1853,4],"end":[1855,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:412":{"id":"0:412","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[583,0],"end":[595,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"serde\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'de","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Deserialize","id":"23:1309:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'de"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["deserialize_in_place"],"trait":{"name":"Deserialize","id":"23:1309:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'de"}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:417:1959"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:689:2354":{"id":"0:689:2354","crate_id":0,"name":"try_write_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[755,4],"end":[762,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with exclusive write access until a\ntimeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the exclusive access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12032:31497":{"id":"1:12032:31497","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"7:11894:1397","crate::ops::IndexMut":"1:2985:2655","str::slice_unchecked":"1:12031:31496"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:2617-0:1168:167":{"id":"a:1:2741:2617-0:1168:167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:6:18-0:1268:2423":{"id":"b:6:18-0:1268:2423","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12033:30291":{"id":"1:12033:30291","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12034:30292"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:295:2049":{"id":"b:1:2542-0:295:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:39:1863":{"id":"0:39:1863","crate_id":0,"name":"bump","span":{"filename":"lock_api/src/mutex.rs","begin":[110,4],"end":[113,5]},"visibility":"default","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`].\n\n[`unlock`]: trait.RawMutex.html#tymethod.unlock","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:686:2349":{"id":"0:686:2349","crate_id":0,"name":"try_read_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[707,4],"end":[714,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:1941":{"id":"0:82:1941","crate_id":0,"name":"force_unlock_fair","span":{"filename":"lock_api/src/mutex.rs","begin":[350,4],"end":[352,5]},"visibility":"public","docs":"Forcibly unlocks the mutex using a fair unlock procotol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `MutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`MutexGuard` but that guard has been discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:644":{"id":"0:644","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[365,0],"end":[365,82]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8249:2687-0:1215:218":{"id":"a:1:8249:2687-0:1215:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[826,0],"end":[829,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:396:694":{"id":"0:396:694","crate_id":0,"name":"from","span":{"filename":"lock_api/src/remutex.rs","begin":[538,4],"end":[540,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:615:2234":{"id":"0:615:2234","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[257,4],"end":[257,44]},"visibility":"default","docs":"Releases an upgradable lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:585:2163":{"id":"0:585:2163","crate_id":0,"name":"unlock_exclusive","span":{"filename":"lock_api/src/rwlock.rs","begin":[73,4],"end":[73,38]},"visibility":"default","docs":"Releases an exclusive lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2248-0:1199:2103":{"id":"b:1:2248-0:1199:2103","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2684:220-0:1199:2103":{"id":"a:1:2684:220-0:1199:2103","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:175":{"id":"0:175","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[690,0],"end":[693,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:1825","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:874:588":{"id":"0:874:588","crate_id":0,"name":"drop","span":{"filename":"lock_api/src/rwlock.rs","begin":[1672,4],"end":[1677,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:1183:1978":{"id":"b:1:2542-0:1183:1978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:641":{"id":"0:641","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[364,0],"end":[364,75]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:554":{"id":"0:554","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[1036,0],"end":[1039,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"owning_ref\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StableDeref","id":"22:6:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:170:668":{"id":"0:170:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/mutex.rs","begin":[669,4],"end":[671,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:445:2005":{"id":"0:445:2005","crate_id":0,"name":"unlocked_fair","span":{"filename":"lock_api/src/remutex.rs","begin":[722,4],"end":[732,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThe mutex is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1280:1884":{"id":"0:1280:1884","crate_id":0,"name":"data","span":{"filename":"lock_api/src/rwlock.rs","begin":[2714,4],"end":[2714,16]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}}},"0:32:1831":{"id":"0:32:1831","crate_id":0,"name":"GuardMarker","span":{"filename":"lock_api/src/mutex.rs","begin":[45,4],"end":[45,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"b:1:2248-0:1176:1931":{"id":"b:1:2248-0:1176:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:794:1699":{"id":"0:794:1699","crate_id":0,"name":"rwlock","span":{"filename":"lock_api/src/rwlock.rs","begin":[1373,4],"end":[1375,5]},"visibility":"public","docs":"Returns a reference to the rwlock, contained in its `Arc`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:2687-0:6:1694":{"id":"a:1:8249:2687-0:6:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:6:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:12":{"id":"0:12","crate_id":0,"name":null,"span":{"filename":"lock_api/src/lib.rs","begin":[105,0],"end":[105,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:9:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2542-0:9:1696":{"id":"b:1:2542-0:9:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:9:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3319-0:1168:167":{"id":"b:1:3319-0:1168:167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2741:2617-0:1207:2122":{"id":"a:1:2741:2617-0:1207:2122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:687:2350":{"id":"0:687:2350","crate_id":0,"name":"try_read_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[723,4],"end":[730,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:751:1983":{"id":"0:751:1983","crate_id":0,"name":"try_map","span":{"filename":"lock_api/src/rwlock.rs","begin":[1233,4],"end":[1248,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockReadGuard` for a component of the\nlocked data. Returns the original guard if the closure returns `None`.\n\nThis operation cannot fail as the `RwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockReadGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:2686-0:1238:2323":{"id":"a:1:8250:2686-0:1238:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:165:668":{"id":"0:165:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/mutex.rs","begin":[663,4],"end":[665,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:616:2238":{"id":"0:616:2238","crate_id":0,"name":"bump_upgradable","span":{"filename":"lock_api/src/rwlock.rs","begin":[268,4],"end":[271,5]},"visibility":"default","docs":"Temporarily yields an upgradable lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_upgradable_fair` followed\nby `lock_upgradable`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:621:2250":{"id":"0:621:2250","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[296,4],"end":[296,71]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:160:588":{"id":"0:160:588","crate_id":0,"name":"drop","span":{"filename":"lock_api/src/mutex.rs","begin":[654,4],"end":[659,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[748,0],"end":[756,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:454:230","0:455:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8249:2687-0:45:166":{"id":"a:1:8249:2687-0:45:166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:33:1833":{"id":"0:33:1833","crate_id":0,"name":"lock","span":{"filename":"lock_api/src/mutex.rs","begin":[48,4],"end":[48,19]},"visibility":"default","docs":"Acquires this mutex, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:178":{"id":"0:178","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[695,0],"end":[698,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:1825","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2542-0:1238:2323":{"id":"b:1:2542-0:1238:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[941,0],"end":[947,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:258:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:76:1930":{"id":"0:76:1930","crate_id":0,"name":"guard_arc","span":{"filename":"lock_api/src/mutex.rs","begin":[302,4],"end":[307,5]},"visibility":{"restricted":{"parent":"0:13:1697","path":"::mutex"}},"docs":"# Safety\n\nThe lock needs to be held for the behavior of this function to be defined.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:2253:23607":{"id":"1:2253:23607","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:2617-0:1190:2083":{"id":"a:1:2741:2617-0:1190:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[675,0],"end":[675,91]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"owning_ref\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StableDeref","id":"22:6:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2553-0:1230:219":{"id":"b:1:2553-0:1230:219","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12016:31494":{"id":"1:12016:31494","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12014:31493"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:358":{"id":"0:358","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[289,0],"end":[441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:362:1893","0:363:1833","0:364:1836","0:365:1909","0:366:1846","0:367:2065","0:368:1918","0:369:62","0:370:1928","0:371:1930","0:372:1935","0:373:1939"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5387:32180":{"id":"5:5387:32180","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:951:1858":{"id":"0:951:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[1949,4],"end":[1955,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `RwLockUpgradableReadGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:651:1887":{"id":"0:651:1887","crate_id":0,"name":"into_inner","span":{"filename":"lock_api/src/rwlock.rs","begin":[391,4],"end":[393,5]},"visibility":"public","docs":"Consumes this `RwLock`, returning the underlying data.","links":{},"attrs":["#[inline]","#[allow(unused_unsafe)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:676:2335":{"id":"0:676:2335","crate_id":0,"name":"write_arc","span":{"filename":"lock_api/src/rwlock.rs","begin":[643,4],"end":[647,5]},"visibility":"public","docs":"Locks this `RwLock` with write access, through an `Arc`.\n\nThis method is similar to the `write` method; however, it requires the `RwLock` to be inside of an `Arc`\nand the resulting write guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41:122":{"id":"0:41:122","crate_id":0,"name":"Duration","span":{"filename":"lock_api/src/mutex.rs","begin":[122,4],"end":[122,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:8:1606":{"id":"0:8:1606","crate_id":0,"name":"0","span":{"filename":"lock_api/src/lib.rs","begin":[100,21],"end":[100,23]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"tuple":[]}}},"b:1:2538-0:45:166":{"id":"b:1:2538-0:45:166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12011:811":{"id":"1:12011:811","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"7:11888:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:2686-0:1190:2083":{"id":"a:1:8250:2686-0:1190:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:8249:2687-0:1238:2323":{"id":"a:1:8249:2687-0:1238:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:222:859":{"id":"0:222:859","crate_id":0,"name":"map","span":{"filename":"lock_api/src/mutex.rs","begin":[845,4],"end":[857,5]},"visibility":"public","docs":"Makes a new `MappedMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedMutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:917":{"id":"0:917","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1833,0],"end":[1838,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:2911:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:920:554"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:6:18-0:1168:167":{"id":"b:6:18-0:1168:167","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:166":{"id":"0:166","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[668,0],"end":[672,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:170:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2548-0:1215:218":{"id":"b:1:2548-0:1215:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1214:860":{"id":"0:1214:860","crate_id":0,"name":"marker","span":{"filename":"lock_api/src/remutex.rs","begin":[907,4],"end":[907,30]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"PhantomData","id":"1:2706:1810","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}}}},"0:319:1846":{"id":"0:319:1846","crate_id":0,"name":"is_locked","span":{"filename":"lock_api/src/remutex.rs","begin":[142,4],"end":[144,5]},"visibility":"public","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:603:2203":{"id":"0:603:2203","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"lock_api/src/rwlock.rs","begin":[196,4],"end":[196,36]},"visibility":"default","docs":"Acquires a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2248-0:1268:2423":{"id":"b:1:2248-0:1268:2423","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2684:220-0:1190:2083":{"id":"a:1:2684:220-0:1190:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:1040":{"id":"0:1040","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2463,0],"end":[2527,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeTimed","id":"0:620:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockUpgradeDowngrade","id":"0:617:2241","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1043:2498","0:1046:2500"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8250:2686-0:1275:2452":{"id":"a:1:8250:2686-0:1275:2452","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2538-0:9:1696":{"id":"b:1:2538-0:9:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:9:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:23:1317-0:333:2077":{"id":"b:23:1317-0:333:2077","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.143/src/de/mod.rs","begin":[605,0],"end":[605,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Deserialize","id":"23:1309:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'de"}],"bindings":[]}}},"generic_params":[{"name":"'de","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DeserializeOwned","id":"23:1315:23492","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8250:2686-0:6:1694":{"id":"a:1:8250:2686-0:6:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:6:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:23:1317-0:625:217":{"id":"b:23:1317-0:625:217","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.143/src/de/mod.rs","begin":[605,0],"end":[605,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Deserialize","id":"23:1309:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'de"}],"bindings":[]}}},"generic_params":[{"name":"'de","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DeserializeOwned","id":"23:1315:23492","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:665:1909":{"id":"0:665:1909","crate_id":0,"name":"get_mut","span":{"filename":"lock_api/src/rwlock.rs","begin":[507,4],"end":[509,5]},"visibility":"public","docs":"Returns a mutable reference to the underlying data.\n\nSince this call borrows the `RwLock` mutably, no actual locking needs to\ntake place---the mutable borrow statically guarantees no locks exist.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1235:860":{"id":"0:1235:860","crate_id":0,"name":"marker","span":{"filename":"lock_api/src/rwlock.rs","begin":[1479,4],"end":[1479,52]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"PhantomData","id":"1:2706:1810","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}},{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:577:2148","args":null}}}]}}],"bindings":[]}}}}}},"0:75:1928":{"id":"0:75:1928","crate_id":0,"name":"data_ptr","span":{"filename":"lock_api/src/mutex.rs","begin":[293,4],"end":[295,5]},"visibility":"public","docs":"Returns a raw pointer to the underlying data.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `MutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nYou must ensure that there are no data races when dereferencing the\nreturned pointer, for example if the current thread logically owns\na `MutexGuard` but that guard has been discarded using `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:552":{"id":"0:150:552","crate_id":0,"name":"deref","span":{"filename":"lock_api/src/mutex.rs","begin":[640,4],"end":[642,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325:1863":{"id":"0:325:1863","crate_id":0,"name":"bump","span":{"filename":"lock_api/src/remutex.rs","begin":[182,4],"end":[189,5]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if the mutex is held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:1168:167":{"id":"b:1:2538-0:1168:167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3319-0:1199:2103":{"id":"b:1:3319-0:1199:2103","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:900":{"id":"0:900","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1756,0],"end":[1776,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeDowngrade","id":"0:617:2241","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:903:2245"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1066":{"id":"0:1066","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2582,0],"end":[2582,101]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:635":{"id":"0:635","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[351,0],"end":[362,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"serde\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'de","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Deserialize","id":"23:1309:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'de"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["deserialize_in_place"],"trait":{"name":"Deserialize","id":"23:1309:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'de"}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:639:1959"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:629:1884":{"id":"0:629:1884","crate_id":0,"name":"data","span":{"filename":"lock_api/src/rwlock.rs","begin":[332,4],"end":[332,23]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"UnsafeCell","id":"1:4406:1809","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},"b:1:2538-0:295:2049":{"id":"b:1:2538-0:295:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1148":{"id":"0:1148","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2817,0],"end":[2825,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1152:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:454:230":{"id":"0:454:230","crate_id":0,"name":"Target","span":{"filename":"lock_api/src/remutex.rs","begin":[751,4],"end":[751,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:999":{"id":"0:999","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2201,0],"end":[2207,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1003:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:583:2158":{"id":"0:583:2158","crate_id":0,"name":"lock_exclusive","span":{"filename":"lock_api/src/rwlock.rs","begin":[63,4],"end":[63,29]},"visibility":"default","docs":"Acquires an exclusive lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2251-0:333:2077":{"id":"b:1:2251-0:333:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5644-0:1223:2321":{"id":"b:5:5644-0:1223:2321","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2538-0:1190:2083":{"id":"b:1:2538-0:1190:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3319-0:9:1696":{"id":"b:1:3319-0:9:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:9:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12037:6086":{"id":"1:12037:6086","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43343:3769","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1094:552":{"id":"0:1094:552","crate_id":0,"name":"deref","span":{"filename":"lock_api/src/rwlock.rs","begin":[2666,4],"end":[2668,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5644-0:1257:2400":{"id":"b:5:5644-0:1257:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:386:1950":{"id":"0:386:1950","crate_id":0,"name":"try_lock_arc_until","span":{"filename":"lock_api/src/remutex.rs","begin":[516,4],"end":[526,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached, through an `Arc`.\n\nThis method is similar to the `try_lock_until` method; however, it requires the `ReentrantMutex` to be\ninside of an `Arc` and the resulting mutex guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:40:1867","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:580:2151":{"id":"0:580:2151","crate_id":0,"name":"lock_shared","span":{"filename":"lock_api/src/rwlock.rs","begin":[50,4],"end":[50,26]},"visibility":"default","docs":"Acquires a shared lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:946:2229":{"id":"0:946:2229","crate_id":0,"name":"try_upgrade","span":{"filename":"lock_api/src/rwlock.rs","begin":[1920,4],"end":[1932,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive write lock.\n\nIf the access could not be granted at this time, then the current guard is returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:367:2065":{"id":"0:367:2065","crate_id":0,"name":"is_owned_by_current_thread","span":{"filename":"lock_api/src/remutex.rs","begin":[352,4],"end":[354,5]},"visibility":"public","docs":"Checks whether the mutex is currently held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:815":{"id":"0:815","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1460,0],"end":[1464,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:818:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1268:2423":{"id":"0:1268:2423","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"lock_api/src/rwlock.rs","begin":[2576,0],"end":[2580,1]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1272:62","0:1273:1884","0:1274:860"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:1074","0:1084","a:1:8249:2687-0:1268:2423","a:1:8250:2686-0:1268:2423","a:1:2741:2617-0:1268:2423","b:1:2542-0:1268:2423","b:1:2248-0:1268:2423","b:1:2553-0:1268:2423","b:1:2251-0:1268:2423","b:1:2538-0:1268:2423","b:1:3319-0:1268:2423","b:1:2548-0:1268:2423","b:5:5644-0:1268:2423","b:6:18-0:1268:2423","0:1070","0:1066","0:1089","0:1110","0:1100","0:1095","0:1105"]}}},"0:548":{"id":"0:548","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[1027,0],"end":[1033,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:553:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:144:1863":{"id":"0:144:1863","crate_id":0,"name":"bump","span":{"filename":"lock_api/src/mutex.rs","begin":[629,4],"end":[634,5]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:439":{"id":"0:439","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[691,0],"end":[746,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:37:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:444:1858","0:445:2005","0:448:1863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2553-0:1215:218":{"id":"b:1:2553-0:1215:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1081:1983":{"id":"0:1081:1983","crate_id":0,"name":"try_map","span":{"filename":"lock_api/src/rwlock.rs","begin":[2622,4],"end":[2637,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockReadGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `MappedRwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockReadGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:484:1987":{"id":"0:484:1987","crate_id":0,"name":"unlocked","span":{"filename":"lock_api/src/remutex.rs","begin":[817,4],"end":[827,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:2686-0:1207:2122":{"id":"a:1:8250:2686-0:1207:2122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2251-0:1223:2321":{"id":"b:1:2251-0:1223:2321","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2538-0:1230:219":{"id":"b:1:2538-0:1230:219","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1227:860":{"id":"0:1227:860","crate_id":0,"name":"marker","span":{"filename":"lock_api/src/rwlock.rs","begin":[1367,4],"end":[1367,39]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"PhantomData","id":"1:2706:1810","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:577:2148","args":null}}}}],"bindings":[]}}}}}},"0:717":{"id":"0:717","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1073,0],"end":[1147,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeTimed","id":"0:620:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:720:2408","0:721:2409","0:722:2412","0:723:2414"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:904":{"id":"0:904","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1779,0],"end":[1821,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:588:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:907:1858","0:908:2005","0:911:1863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1142:552":{"id":"0:1142:552","crate_id":0,"name":"deref","span":{"filename":"lock_api/src/rwlock.rs","begin":[2805,4],"end":[2807,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1074":{"id":"0:1074","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2588,0],"end":[2638,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1078:859","0:1081:1983"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:185:2012":{"id":"0:185:2012","crate_id":0,"name":"into_arc","span":{"filename":"lock_api/src/mutex.rs","begin":[710,4],"end":[718,5]},"visibility":"public","docs":"Unlocks the mutex and returns the `Arc` that was held by the [`ArcMutexGuard`].","links":{"`ArcMutexGuard`":"0:1176:1931"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:295:2049":{"id":"b:1:2251-0:295:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:858:1863":{"id":"0:858:1863","crate_id":0,"name":"bump","span":{"filename":"lock_api/src/rwlock.rs","begin":[1647,4],"end":[1652,5]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `write`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1234:1699":{"id":"0:1234:1699","crate_id":0,"name":"rwlock","span":{"filename":"lock_api/src/rwlock.rs","begin":[1478,4],"end":[1478,28]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:1:2548-0:1176:1931":{"id":"b:1:2548-0:1176:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12013:31492":{"id":"1:12013:31492","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:2687-0:1257:2400":{"id":"a:1:8249:2687-0:1257:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:688:2353":{"id":"0:688:2353","crate_id":0,"name":"try_write_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[739,4],"end":[746,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with exclusive write access until a\ntimeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the exclusive access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:333:2077":{"id":"b:1:3319-0:333:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1275:2452":{"id":"0:1275:2452","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"lock_api/src/rwlock.rs","begin":[2712,0],"end":[2716,1]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1279:62","0:1280:1884","0:1281:860"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:1122","0:1132","a:1:8249:2687-0:1275:2452","a:1:8250:2686-0:1275:2452","a:1:2741:2617-0:1275:2452","b:1:2542-0:1275:2452","b:1:2248-0:1275:2452","b:1:2553-0:1275:2452","b:1:2251-0:1275:2452","b:1:2538-0:1275:2452","b:1:3319-0:1275:2452","b:1:2548-0:1275:2452","b:5:5644-0:1275:2452","b:6:18-0:1275:2452","0:1163","0:1137","0:1114","0:1143","0:1158","0:1148","0:1118","0:1153"]}}},"b:5:5644-0:1168:167":{"id":"b:5:5644-0:1168:167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2684:220-0:6:1694":{"id":"a:1:2684:220-0:6:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:6:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2553-0:625:217":{"id":"b:1:2553-0:625:217","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1188:1884":{"id":"0:1188:1884","crate_id":0,"name":"data","span":{"filename":"lock_api/src/mutex.rs","begin":[822,4],"end":[822,16]},"visibility":{"restricted":{"parent":"0:13:1697","path":"::mutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}}},"1:12119:31514":{"id":"1:12119:31514","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"7:11888:419","self::pattern":"1:11712:7297"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:7312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:2687-0:1168:167":{"id":"a:1:8249:2687-0:1168:167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:30:1825":{"id":"0:30:1825","crate_id":0,"name":"RawMutex","span":{"filename":"lock_api/src/mutex.rs","begin":[36,0],"end":[79,1]},"visibility":"public","docs":"Basic operations for a mutex.\n\nTypes implementing this trait can be used by `Mutex` to form a safe and\nfully-functioning mutex type.\n\n# Safety\n\nImplementations of this trait must ensure that the mutex is actually\nexclusive: a lock can't be acquired while the mutex is already locked.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:31:1828","0:32:1831","0:33:1833","0:34:1836","0:35:1844","0:36:1846"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:2544:694":{"id":"1:2544:694","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:1207:2122":{"id":"b:1:2538-0:1207:2122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:597:1870":{"id":"0:597:1870","crate_id":0,"name":"Instant","span":{"filename":"lock_api/src/rwlock.rs","begin":[172,4],"end":[172,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:673:2322":{"id":"0:673:2322","crate_id":0,"name":"write_guard_arc","span":{"filename":"lock_api/src/rwlock.rs","begin":[603,4],"end":[608,5]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":"# Safety\n\nThe lock must be held when calling this method.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1261:860":{"id":"0:1261:860","crate_id":0,"name":"marker","span":{"filename":"lock_api/src/rwlock.rs","begin":[2224,4],"end":[2224,39]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"PhantomData","id":"1:2706:1810","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:577:2148","args":null}}}}],"bindings":[]}}}}}},"0:850":{"id":"0:850","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1600,0],"end":[1653,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:588:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:854:1858","0:855:2005","0:858:1863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:811":{"id":"0:811","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1449,0],"end":[1457,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:814:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1008":{"id":"0:1008","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2228,0],"end":[2287,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1011:1699","0:1012:1987","0:1015:2226","0:1016:2229"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:622:2251":{"id":"0:622:2251","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[299,4],"end":[299,72]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:757":{"id":"0:757","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1268,0],"end":[1321,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:588:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:761:1858","0:762:2005","0:765:1863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:987:230":{"id":"0:987:230","crate_id":0,"name":"Target","span":{"filename":"lock_api/src/rwlock.rs","begin":[2176,4],"end":[2176,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:675:2331":{"id":"0:675:2331","crate_id":0,"name":"try_read_arc","span":{"filename":"lock_api/src/rwlock.rs","begin":[628,4],"end":[635,5]},"visibility":"public","docs":"Attempts to lock this `RwLock` with read access, through an `Arc`.\n\nThis method is similar to the `try_read` method; however, it requires the `RwLock` to be inside of an\n`Arc` and the resulting read guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:596:122":{"id":"0:596:122","crate_id":0,"name":"Duration","span":{"filename":"lock_api/src/rwlock.rs","begin":[169,4],"end":[169,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:1084":{"id":"0:1084","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2640,0],"end":[2661,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:588:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1088:1858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:602:2201":{"id":"0:602:2201","crate_id":0,"name":"RawRwLockRecursive","span":{"filename":"lock_api/src/rwlock.rs","begin":[194,0],"end":[200,1]},"visibility":"public","docs":"Additional methods for RwLocks which support recursive read locks.\n\nThese are guaranteed to succeed without blocking if\nanother read lock is held at the time of the call. This allows a thread\nto recursively lock a `RwLock`. However using this method can cause\nwriters to starve since readers no longer block if a writer is waiting\nfor the lock.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:603:2203","0:604:2205"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"1:12012:2953":{"id":"1:12012:2953","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:487":{"id":"0:487","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[831,0],"end":[873,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:37:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:491:1858","0:492:2005","0:495:1863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2684:220-0:9:1696":{"id":"a:1:2684:220-0:9:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:9:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:547:668":{"id":"0:547:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/remutex.rs","begin":[1022,4],"end":[1024,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2701:228-0:1238:2323":{"id":"a:1:2701:228-0:1238:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:748:859":{"id":"0:748:859","crate_id":0,"name":"map","span":{"filename":"lock_api/src/rwlock.rs","begin":[1209,4],"end":[1221,5]},"visibility":"public","docs":"Make a new `MappedRwLockReadGuard` for a component of the locked data.\n\nThis operation cannot fail as the `RwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockReadGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2541:2946":{"id":"1:2541:2946","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2515:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:1190:2083":{"id":"b:1:2548-0:1190:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:37:1853":{"id":"0:37:1853","crate_id":0,"name":"RawMutexFair","span":{"filename":"lock_api/src/mutex.rs","begin":[87,0],"end":[114,1]},"visibility":"public","docs":"Additional methods for mutexes which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:38:1858","0:39:1863"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:844:2186":{"id":"0:844:2186","crate_id":0,"name":"downgrade","span":{"filename":"lock_api/src/rwlock.rs","begin":[1565,4],"end":[1576,5]},"visibility":"public","docs":"Atomically downgrades a write lock into a read lock without allowing any\nwriters to take exclusive access of the lock in the meantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:479":{"id":"0:479","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[806,0],"end":[828,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:483:1698","0:484:1987"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2538-0:1238:2323":{"id":"b:1:2538-0:1238:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8250:2686-0:1168:167":{"id":"a:1:8250:2686-0:1168:167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2248-0:1190:2083":{"id":"b:1:2248-0:1190:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12036:6518":{"id":"1:12036:6518","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"7:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43333:6499","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12039:26346":{"id":"1:12039:26346","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12038:26355"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43640:6509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"lock_api/src/mutex.rs","begin":[422,4],"end":[424,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1204:860":{"id":"0:1204:860","crate_id":0,"name":"marker","span":{"filename":"lock_api/src/remutex.rs","begin":[802,4],"end":[802,36]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"PhantomData","id":"1:2706:1810","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"GuardNoSend","id":"0:9:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:652":{"id":"0:652","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[396,0],"end":[409,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:655:1890"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:1268:2423":{"id":"b:1:3319-0:1268:2423","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:45:166":{"id":"0:45:166","crate_id":0,"name":"Mutex","span":{"filename":"lock_api/src/mutex.rs","begin":[142,0],"end":[145,1]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can also be statically initialized or created via a `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:48:62","0:49:1884"],"fields_stripped":false}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:56","0:61","0:65","0:79","0:83","a:1:8249:2687-0:45:166","a:1:8250:2686-0:45:166","a:1:2741:2617-0:45:166","b:1:2542-0:45:166","b:1:2545-0:45:166","b:1:2248-0:45:166","b:1:2553-0:45:166","b:1:2251-0:45:166","b:1:2538-0:45:166","b:1:3319-0:45:166","b:1:2548-0:45:166","b:6:18-0:45:166","b:23:1317-0:45:166","0:111","0:98","0:90","0:94","0:50","0:53","0:106"]}}},"0:351:939":{"id":"0:351:939","crate_id":0,"name":"new","span":{"filename":"lock_api/src/remutex.rs","begin":[235,4],"end":[245,5]},"visibility":"public","docs":"Creates a new reentrant mutex in an unlocked state ready for use.","links":{},"attrs":["#[cfg(has_const_fn_trait_bound)]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[529,0],"end":[534,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:391:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73:1918":{"id":"0:73:1918","crate_id":0,"name":"force_unlock","span":{"filename":"lock_api/src/mutex.rs","begin":[263,4],"end":[265,5]},"visibility":"public","docs":"Forcibly unlocks the mutex.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `MutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`MutexGuard` but that guard has been discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:920:554":{"id":"0:920:554","crate_id":0,"name":"deref_mut","span":{"filename":"lock_api/src/rwlock.rs","begin":[1835,4],"end":[1837,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1105":{"id":"0:1105","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2689,0],"end":[2695,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1109:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2684:220-0:1207:2122":{"id":"a:1:2684:220-0:1207:2122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2248-0:1245:2391":{"id":"b:1:2248-0:1245:2391","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[456,0],"end":[467,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"serde\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Serialize","id":"23:1802:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Serialize","id":"23:1802:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:109:1955"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2553-0:9:1696":{"id":"b:1:2553-0:9:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:9:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:896":{"id":"0:896","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1733,0],"end":[1753,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockDowngrade","id":"0:593:2183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:899:2186"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1196:860":{"id":"0:1196:860","crate_id":0,"name":"marker","span":{"filename":"lock_api/src/remutex.rs","begin":[606,4],"end":[606,45]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"PhantomData","id":"1:2706:1810","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},{"resolved_path":{"name":"GuardNoSend","id":"0:9:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}}}},"0:830:1699":{"id":"0:830:1699","crate_id":0,"name":"rwlock","span":{"filename":"lock_api/src/rwlock.rs","begin":[1486,4],"end":[1488,5]},"visibility":"public","docs":"Returns a reference to the original reader-writer lock object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[784,0],"end":[790,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:200:230","0:201:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:993:588":{"id":"0:993:588","crate_id":0,"name":"drop","span":{"filename":"lock_api/src/rwlock.rs","begin":[2185,4],"end":[2190,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5399:32183":{"id":"5:5399:32183","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:280:2694","`String`":"5:7241:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:2694","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:2693","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:2686-0:9:1696":{"id":"a:1:8250:2686-0:9:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:9:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2251-0:1257:2400":{"id":"b:1:2251-0:1257:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12038:26355":{"id":"1:12038:26355","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12039:26346"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43631:6508","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:1275:2452":{"id":"b:1:2538-0:1275:2452","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:378:1941":{"id":"0:378:1941","crate_id":0,"name":"force_unlock_fair","span":{"filename":"lock_api/src/remutex.rs","begin":[456,4],"end":[458,5]},"visibility":"public","docs":"Forcibly unlocks the mutex using a fair unlock protocol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `ReentrantMutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:619:2245":{"id":"0:619:2245","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"lock_api/src/rwlock.rs","begin":[289,4],"end":[289,45]},"visibility":"default","docs":"Downgrades an exclusive lock to an upgradable lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:624:2255":{"id":"0:624:2255","crate_id":0,"name":"try_upgrade_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[315,4],"end":[315,71]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:78:1939":{"id":"0:78:1939","crate_id":0,"name":"try_lock_arc","span":{"filename":"lock_api/src/mutex.rs","begin":[327,4],"end":[334,5]},"visibility":"public","docs":"Attempts to acquire a lock through an `Arc`.\n\nThis method is similar to the `try_lock` method; however, it requires the `Mutex` to be inside of an\n`Arc` and the resulting mutex guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:1230:219":{"id":"b:1:3319-0:1230:219","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:6:18-0:1238:2323":{"id":"b:6:18-0:1238:2323","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:1257:2400":{"id":"b:1:2553-0:1257:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:595:2188":{"id":"0:595:2188","crate_id":0,"name":"RawRwLockTimed","span":{"filename":"lock_api/src/rwlock.rs","begin":[167,0],"end":[185,1]},"visibility":"public","docs":"Additional methods for RwLocks which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:596:122","0:597:1870","0:598:2190","0:599:2191","0:600:2193","0:601:2194"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:1104:668":{"id":"0:1104:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[2684,4],"end":[2686,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1179:1697":{"id":"0:1179:1697","crate_id":0,"name":"mutex","span":{"filename":"lock_api/src/mutex.rs","begin":[685,4],"end":[685,27]},"visibility":{"restricted":{"parent":"0:13:1697","path":"::mutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[337,0],"end":[353,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:37:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:82:1941"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:1190:2083":{"id":"b:1:3319-0:1190:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:834:1983":{"id":"0:834:1983","crate_id":0,"name":"try_map","span":{"filename":"lock_api/src/rwlock.rs","begin":[1523,4],"end":[1538,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `RwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockWriteGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:660:2273":{"id":"0:660:2273","crate_id":0,"name":"write_guard","span":{"filename":"lock_api/src/rwlock.rs","begin":[427,4],"end":[432,5]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":"# Safety\n\nThe lock must be held when calling this method.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[801,0],"end":[809,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:209:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:708":{"id":"0:708","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[988,0],"end":[1071,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:711:2390","0:712:2396","0:713:2398","0:714:2399","0:715:2403","0:716:2406"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12087:2568":{"id":"1:12087:2568","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11712:7297","`DoubleEndedIterator`":"1:7240:121","prim@char":"7:11888:419","str::matches":"1:12087:2568"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43561:6505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5644-0:1190:2083":{"id":"b:5:5644-0:1190:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1257:2400":{"id":"0:1257:2400","crate_id":0,"name":"ArcRwLockUpgradableReadGuard","span":{"filename":"lock_api/src/rwlock.rs","begin":[2222,0],"end":[2225,1]},"visibility":"public","docs":"An RAII rwlock guard returned by the `Arc` locking operations on `RwLock`.\nThis is similar to the `RwLockUpgradableReadGuard` struct, except instead of using a reference to unlock the\n`RwLock` it uses an `Arc<RwLock>`. This has several advantages, most notably that it has an `'static`\nlifetime.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1260:1699","0:1261:860"],"fields_stripped":false}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:1008","0:1017","0:1025","0:1035","0:1040","a:1:2701:228-0:1257:2400","a:1:8249:2687-0:1257:2400","a:1:8250:2686-0:1257:2400","a:1:2684:220-0:1257:2400","a:1:2741:2617-0:1257:2400","b:1:2542-0:1257:2400","b:1:2248-0:1257:2400","b:1:2553-0:1257:2400","b:1:2251-0:1257:2400","b:1:2538-0:1257:2400","b:1:3319-0:1257:2400","b:1:2548-0:1257:2400","b:5:5644-0:1257:2400","b:6:18-0:1257:2400","0:1058","0:1062","0:1054","0:1049"]}}},"0:747:1699":{"id":"0:747:1699","crate_id":0,"name":"rwlock","span":{"filename":"lock_api/src/rwlock.rs","begin":[1196,4],"end":[1198,5]},"visibility":"public","docs":"Returns a reference to the original reader-writer lock object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:1223:2321":{"id":"b:1:2542-0:1223:2321","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2545-0:45:166":{"id":"b:1:2545-0:45:166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2547:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12029:27037":{"id":"1:12029:27037","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:559-0:264:1698":{"id":"0:559-0:264:1698","crate_id":0,"name":null,"span":{"filename":"lock_api/src/lib.rs","begin":[113,0],"end":[113,26]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"atomic_usize\")]"],"deprecation":null,"inner":{"import":{"source":"crate::remutex","name":"remutex","id":"0:264:1698","glob":true}}},"b:1:2248-0:6:1694":{"id":"b:1:2248-0:6:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:6:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12072:31501":{"id":"1:12072:31501","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11712:7297","str::split":"1:12060:30299","prim@char":"7:11888:419","str::split_terminator":"1:12069:31500"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43425:6502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:7312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[935,0],"end":[939,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:253:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:786:668":{"id":"0:786:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[1350,4],"end":[1352,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:2617-0:1245:2391":{"id":"a:1:2741:2617-0:1245:2391","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8250:2686-0:295:2049":{"id":"a:1:8250:2686-0:295:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2251-0:6:1694":{"id":"b:1:2251-0:6:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:6:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12093:31505":{"id":"1:12093:31505","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11712:7297","`DoubleEndedIterator`":"1:7240:121","prim@char":"7:11888:419","str::rmatch_indices":"1:12096:31506"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43507:6503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[925,0],"end":[933,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:248:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1137":{"id":"0:1137","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2802,0],"end":[2808,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1141:230","0:1142:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:314:1833":{"id":"0:314:1833","crate_id":0,"name":"lock","span":{"filename":"lock_api/src/remutex.rs","begin":[110,4],"end":[115,5]},"visibility":"public","docs":"Acquires this mutex, blocking if it's held by another thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:735:668":{"id":"0:735:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[1164,4],"end":[1180,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12116:30311":{"id":"1:12116:30311","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"7:11888:419","self::pattern":"1:11712:7297"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:7312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1180:860":{"id":"0:1180:860","crate_id":0,"name":"marker","span":{"filename":"lock_api/src/mutex.rs","begin":[686,4],"end":[686,34]},"visibility":{"restricted":{"parent":"0:13:1697","path":"::mutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"PhantomData","id":"1:2706:1810","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"tuple":[]}}}}],"bindings":[]}}}}}},"b:1:2538-0:6:1694":{"id":"b:1:2538-0:6:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:6:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:337:62":{"id":"0:337:62","crate_id":0,"name":"raw","span":{"filename":"lock_api/src/remutex.rs","begin":[218,4],"end":[218,32]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}}}},"0:1147:554":{"id":"0:1147:554","crate_id":0,"name":"deref_mut","span":{"filename":"lock_api/src/rwlock.rs","begin":[2812,4],"end":[2814,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:625:217":{"id":"b:1:2538-0:625:217","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1065:668":{"id":"0:1065:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[2562,4],"end":[2564,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[910,0],"end":[916,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:237:230","0:238:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:468":{"id":"0:468","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[778,0],"end":[784,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:473:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:941:1699":{"id":"0:941:1699","crate_id":0,"name":"rwlock","span":{"filename":"lock_api/src/rwlock.rs","begin":[1881,4],"end":[1883,5]},"visibility":"public","docs":"Returns a reference to the original reader-writer lock object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1700":{"id":"0:0:1700","crate_id":0,"name":"lock_api","span":{"filename":"lock_api/src/lib.rs","begin":[8,0],"end":[116,25]},"visibility":"public","docs":"This library provides type-safe and fully-featured `Mutex` and `RwLock`\ntypes which wrap a simple raw mutex or rwlock type. This has several\nbenefits: not only does it eliminate a large portion of the work in\nimplementing custom lock types, it also allows users to write code which is\ngeneric with regards to different lock implementations.\n\nBasic usage of this crate is very straightforward:\n\n1. Create a raw lock type. This should only contain the lock state, not any\n   data protected by the lock.\n2. Implement the `RawMutex` trait for your custom lock type.\n3. Export your mutex as a type alias for `lock_api::Mutex`, and\n   your mutex guard as a type alias for `lock_api::MutexGuard`.\n   See the [example](#example) below for details.\n\nThis process is similar for RwLocks, except that two guards need to be\nexported instead of one. (Or 3 guards if your type supports upgradable read\nlocks, see [extension traits](#extension-traits) below for details)\n\n# Example\n\n```\nuse lock_api::{RawMutex, Mutex, GuardSend};\nuse std::sync::atomic::{AtomicBool, Ordering};\n\n// 1. Define our raw lock type\npub struct RawSpinlock(AtomicBool);\n\n// 2. Implement RawMutex for this type\nunsafe impl RawMutex for RawSpinlock {\n    const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));\n\n    // A spinlock guard can be sent to another thread and unlocked there\n    type GuardMarker = GuardSend;\n\n    fn lock(&self) {\n        // Note: This isn't the best way of implementing a spinlock, but it\n        // suffices for the sake of this example.\n        while !self.try_lock() {}\n    }\n\n    fn try_lock(&self) -> bool {\n        self.0\n            .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)\n            .is_ok()\n    }\n\n    unsafe fn unlock(&self) {\n        self.0.store(false, Ordering::Release);\n    }\n}\n\n// 3. Export the wrappers. This are the types that your users will actually use.\npub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;\npub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;\n```\n\n# Extension traits\n\nIn addition to basic locking & unlocking functionality, you have the option\nof exposing additional functionality in your lock types by implementing\nadditional traits for it. Examples of extension features include:\n\n- Fair unlocking (`RawMutexFair`, `RawRwLockFair`)\n- Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)\n- Downgradable write locks (`RawRwLockDowngradable`)\n- Recursive read locks (`RawRwLockRecursive`)\n- Upgradable read locks (`RawRwLockUpgrade`)\n\nThe `Mutex` and `RwLock` wrappers will automatically expose this additional\nfunctionality if the raw lock type implements these extension traits.\n\n# Cargo features\n\nThis crate supports three cargo features:\n\n- `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.\n- `arc_lock`: Enables locking from an `Arc`. This enables types such as `ArcMutexGuard`. Note that this\n  requires the `alloc` crate to be present.","links":{},"attrs":["#![no_std]","#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:13:1697","0:264:1698","0:560:1699","0:6:1694","0:9:1696","0:263-0:13:1697","0:559-0:264:1698","0:1167-0:560:1699"],"is_stripped":false}}},"0:1274:860":{"id":"0:1274:860","crate_id":0,"name":"marker","span":{"filename":"lock_api/src/rwlock.rs","begin":[2579,4],"end":[2579,30]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"PhantomData","id":"1:2706:1810","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}}}},"0:740":{"id":"0:740","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1192,0],"end":[1192,88]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1017":{"id":"0:1017","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2290,0],"end":[2332,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeFair","id":"0:614:2232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1020:1858","0:1021:2005","0:1024:1863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2248-0:45:166":{"id":"b:1:2248-0:45:166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:972:2255":{"id":"0:972:2255","crate_id":0,"name":"try_upgrade_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[2091,4],"end":[2106,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\nthe current guard is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:1176:1931":{"id":"b:1:2251-0:1176:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:713:2398":{"id":"0:713:2398","crate_id":0,"name":"try_upgradable_read","span":{"filename":"lock_api/src/rwlock.rs","begin":[1024,4],"end":[1031,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with upgradable read access.\n\nIf the access could not be granted at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:955:1863":{"id":"0:955:1863","crate_id":0,"name":"bump","span":{"filename":"lock_api/src/rwlock.rs","begin":[1982,4],"end":[1987,5]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `upgradable_read`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1095":{"id":"0:1095","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2671,0],"end":[2679,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1099:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:383:1872":{"id":"0:383:1872","crate_id":0,"name":"try_lock_for","span":{"filename":"lock_api/src/remutex.rs","begin":[468,4],"end":[475,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:40:1867","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:586:1846":{"id":"0:586:1846","crate_id":0,"name":"is_locked","span":{"filename":"lock_api/src/rwlock.rs","begin":[77,4],"end":[86,5]},"visibility":"default","docs":"Checks if this `RwLock` is currently locked in any way.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:1215:218":{"id":"b:1:2251-0:1215:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:292:2036":{"id":"0:292:2036","crate_id":0,"name":"GetThreadId","span":{"filename":"lock_api/src/remutex.rs","begin":[45,0],"end":[55,1]},"visibility":"public","docs":"Helper trait which returns a non-zero thread ID.\n\nThe simplest way to implement this trait is to return the address of a\nthread-local variable.\n\n# Safety\n\nImplementations of this trait must ensure that no two active threads share\nthe same thread ID. However the ID of a thread that has exited can be\nre-used since that thread is no longer active.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:293:1828","0:294:2040"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[582,0],"end":[635,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:37:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:140:1858","0:141:2005","0:144:1863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:373:1939":{"id":"0:373:1939","crate_id":0,"name":"try_lock_arc","span":{"filename":"lock_api/src/remutex.rs","begin":[433,4],"end":[440,5]},"visibility":"public","docs":"Attempts to acquire a reentrant mutex through an `Arc`.\n\nThis method is similar to the `try_lock` method; however, it requires the `ReentrantMutex` to be inside\nof an `Arc` and the resulting mutex guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2248-0:1207:2122":{"id":"b:1:2248-0:1207:2122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1052:230":{"id":"0:1052:230","crate_id":0,"name":"Target","span":{"filename":"lock_api/src/rwlock.rs","begin":[2531,4],"end":[2531,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2251-0:1183:1978":{"id":"b:1:2251-0:1183:1978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1049":{"id":"0:1049","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2530,0],"end":[2536,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1052:230","0:1053:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2741:2617-0:333:2077":{"id":"a:1:2741:2617-0:333:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:517:859":{"id":"0:517:859","crate_id":0,"name":"map","span":{"filename":"lock_api/src/remutex.rs","begin":[927,4],"end":[939,5]},"visibility":"public","docs":"Makes a new `MappedReentrantMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:1867":{"id":"0:40:1867","crate_id":0,"name":"RawMutexTimed","span":{"filename":"lock_api/src/mutex.rs","begin":[120,0],"end":[132,1]},"visibility":"public","docs":"Additional methods for mutexes which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:41:122","0:42:1870","0:43:1872","0:44:1874"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"b:1:2548-0:1199:2103":{"id":"b:1:2548-0:1199:2103","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2542-0:6:1694":{"id":"b:1:2542-0:6:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:6:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12043:24091":{"id":"1:12043:24091","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"7:11888:419","self::pattern":"1:11712:7297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:672:2320":{"id":"0:672:2320","crate_id":0,"name":"read_guard_arc","span":{"filename":"lock_api/src/rwlock.rs","begin":[591,4],"end":[596,5]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":"# Safety\n\nThe lock must be held when calling this method.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12103:31509":{"id":"1:12103:31509","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:939":{"id":"0:59:939","crate_id":0,"name":"new","span":{"filename":"lock_api/src/mutex.rs","begin":[154,4],"end":[159,5]},"visibility":"public","docs":"Creates a new mutex in an unlocked state ready for use.","links":{},"attrs":["#[cfg(has_const_fn_trait_bound)]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:1215:218":{"id":"b:1:2542-0:1215:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:77:1935":{"id":"0:77:1935","crate_id":0,"name":"lock_arc","span":{"filename":"lock_api/src/mutex.rs","begin":[315,4],"end":[319,5]},"visibility":"public","docs":"Acquires a lock through an `Arc`.\n\nThis method is similar to the `lock` method; however, it requires the `Mutex` to be inside of an `Arc`\nand the resulting mutex guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1099:588":{"id":"0:1099:588","crate_id":0,"name":"drop","span":{"filename":"lock_api/src/rwlock.rs","begin":[2673,4],"end":[2678,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:189":{"id":"0:189","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[739,0],"end":[781,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:37:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:192:1858","0:193:2005","0:196:1863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:201:552":{"id":"0:201:552","crate_id":0,"name":"deref","span":{"filename":"lock_api/src/mutex.rs","begin":[787,4],"end":[789,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:534:230":{"id":"0:534:230","crate_id":0,"name":"Target","span":{"filename":"lock_api/src/remutex.rs","begin":[1000,4],"end":[1000,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:701":{"id":"0:701","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[908,0],"end":[986,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockRecursiveTimed","id":"0:605:2207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:704:2382","0:705:2383","0:706:2387","0:707:2389"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2538-0:1268:2423":{"id":"b:1:2538-0:1268:2423","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2701:228-0:1199:2103":{"id":"a:1:2701:228-0:1199:2103","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:879:668":{"id":"0:879:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[1681,4],"end":[1683,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:512":{"id":"0:512","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[915,0],"end":[970,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:517:859","0:520:1983"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2557:1477":{"id":"1:2557:1477","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:1858":{"id":"0:140:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/mutex.rs","begin":[596,4],"end":[602,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12090:31504":{"id":"1:12090:31504","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11712:7297","`DoubleEndedIterator`":"1:7240:121","prim@char":"7:11888:419","str::matches":"1:12087:2568"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43579:6506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:7312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:1245:2391":{"id":"b:1:2553-0:1245:2391","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2548-0:45:166":{"id":"b:1:2548-0:45:166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:661:2014":{"id":"0:661:2014","crate_id":0,"name":"read","span":{"filename":"lock_api/src/rwlock.rs","begin":[447,4],"end":[451,5]},"visibility":"public","docs":"Locks this `RwLock` with shared read access, blocking the current thread\nuntil it can be acquired.\n\nThe calling thread will be blocked until there are no more writers which\nhold the lock. There may be other readers currently inside the lock when\nthis method returns.\n\nNote that attempts to recursively acquire a read lock on a `RwLock` when\nthe current thread already holds one may result in a deadlock.\n\nReturns an RAII guard which will release this thread's shared access\nonce it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1260:1699":{"id":"0:1260:1699","crate_id":0,"name":"rwlock","span":{"filename":"lock_api/src/rwlock.rs","begin":[2223,4],"end":[2223,29]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"b:6:18-0:1257:2400":{"id":"b:6:18-0:1257:2400","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:600:2193":{"id":"0:600:2193","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[181,4],"end":[181,70]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:60:1887":{"id":"0:60:1887","crate_id":0,"name":"into_inner","span":{"filename":"lock_api/src/mutex.rs","begin":[173,4],"end":[175,5]},"visibility":"public","docs":"Consumes this mutex, returning the underlying data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1176:1931":{"id":"0:1176:1931","crate_id":0,"name":"ArcMutexGuard","span":{"filename":"lock_api/src/mutex.rs","begin":[684,0],"end":[687,1]},"visibility":"public","docs":"An RAII mutex guard returned by the `Arc` locking operations on `Mutex`.\n\nThis is similar to the `MutexGuard` struct, except instead of using a reference to unlock the `Mutex` it\nuses an `Arc<Mutex>`. This has several advantages, most notably that it has an `'static` lifetime.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[clippy::has_significant_drop]","#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1179:1697","0:1180:860"],"fields_stripped":false}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:181","0:189","a:1:8249:2687-0:1176:1931","a:1:8250:2686-0:1176:1931","a:1:2741:2617-0:1176:1931","b:1:2542-0:1176:1931","b:1:2248-0:1176:1931","b:1:2553-0:1176:1931","b:1:2251-0:1176:1931","b:1:2538-0:1176:1931","b:1:3319-0:1176:1931","b:1:2548-0:1176:1931","b:6:18-0:1176:1931","0:206","0:202","0:197","0:175","0:178"]}}},"0:541:588":{"id":"0:541:588","crate_id":0,"name":"drop","span":{"filename":"lock_api/src/remutex.rs","begin":[1011,4],"end":[1016,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:722:2412":{"id":"0:722:2412","crate_id":0,"name":"try_upgradable_read_arc_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[1118,4],"end":[1128,5]},"visibility":"public","docs":"Attempts to lock this `RwLock` with upgradable access until a timeout is reached, through an `Arc`.\n\nThis method is similar to the `try_upgradable_read_for` method; however, it requires the `RwLock` to be\ninside of an `Arc` and the resulting read guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:693:2366":{"id":"0:693:2366","crate_id":0,"name":"try_write_arc_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[824,4],"end":[834,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with read access until a timeout is reached, through an `Arc`.\n\nThis method is similar to the `try_write_until` method; however, it requires the `RwLock` to be inside of\nan `Arc` and the resulting read guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:889":{"id":"0:889","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1709,0],"end":[1730,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:892:1699","0:893:1987"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1207:2122":{"id":"0:1207:2122","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"lock_api/src/remutex.rs","begin":[904,0],"end":[908,1]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1212:62","0:1213:1884","0:1214:860"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:512","0:523","a:1:8249:2687-0:1207:2122","a:1:8250:2686-0:1207:2122","a:1:2684:220-0:1207:2122","a:1:2741:2617-0:1207:2122","b:1:2542-0:1207:2122","b:1:2248-0:1207:2122","b:1:2553-0:1207:2122","b:1:2251-0:1207:2122","b:1:2538-0:1207:2122","b:1:3319-0:1207:2122","b:1:2548-0:1207:2122","b:5:5644-0:1207:2122","b:6:18-0:1207:2122","0:529","0:536","0:507","0:548","0:542","0:554"]}}},"b:1:2548-0:1268:2423":{"id":"b:1:2548-0:1268:2423","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:502":{"id":"0:502","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[885,0],"end":[893,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:506:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:907:1858":{"id":"0:907:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[1784,4],"end":[1793,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nThis is functionally equivalent to the `unlock_fair` method on [`RwLockWriteGuard`].","links":{"`RwLockWriteGuard`":"0:1230:219"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12042:26360":{"id":"1:12042:26360","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43649:6268","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12135:31518":{"id":"1:12135:31518","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4535:31518"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43656:6440","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:2687-0:1223:2321":{"id":"a:1:8249:2687-0:1223:2321","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:683":{"id":"0:683","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[699,0],"end":[835,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockTimed","id":"0:595:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:686:2349","0:687:2350","0:688:2353","0:689:2354","0:690:2357","0:691:2360","0:692:2364","0:693:2366"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1215:218":{"id":"0:1215:218","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"lock_api/src/rwlock.rs","begin":[1187,0],"end":[1190,1]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1219:1699","0:1220:860"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:743","0:757","a:1:8249:2687-0:1215:218","a:1:8250:2686-0:1215:218","a:1:2684:220-0:1215:218","a:1:2741:2617-0:1215:218","b:1:2542-0:1215:218","b:1:2248-0:1215:218","b:1:2553-0:1215:218","b:1:2251-0:1215:218","b:1:2538-0:1215:218","b:1:3319-0:1215:218","b:1:2548-0:1215:218","b:5:5644-0:1215:218","b:6:18-0:1215:218","0:777","0:782","0:772","0:787","0:740","0:766"]}}},"5:5383:32179":{"id":"5:5383:32179","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:2694","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:2693","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:2694","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:2693","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:507":{"id":"0:507","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[910,0],"end":[913,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:64:1890":{"id":"0:64:1890","crate_id":0,"name":"const_new","span":{"filename":"lock_api/src/mutex.rs","begin":[183,4],"end":[188,5]},"visibility":"public","docs":"Creates a new mutex based on a pre-existing raw mutex.\n\nThis allows creating a mutex in a constant context on stable Rust.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["raw_mutex",{"generic":"R"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:2687-0:9:1696":{"id":"a:1:8249:2687-0:9:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:9:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2538-0:1176:1931":{"id":"b:1:2538-0:1176:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:401:668":{"id":"0:401:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/remutex.rs","begin":[544,4],"end":[563,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1220:860":{"id":"0:1220:860","crate_id":0,"name":"marker","span":{"filename":"lock_api/src/rwlock.rs","begin":[1189,4],"end":[1189,48]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"PhantomData","id":"1:2706:1810","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:577:2148","args":null}}}]}}],"bindings":[]}}}}}},"0:86:1872":{"id":"0:86:1872","crate_id":0,"name":"try_lock_for","span":{"filename":"lock_api/src/mutex.rs","begin":[362,4],"end":[369,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:40:1867","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:2687-0:1275:2452":{"id":"a:1:8249:2687-0:1275:2452","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:967":{"id":"0:967","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2062,0],"end":[2107,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeTimed","id":"0:620:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:971:2254","0:972:2255"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:419":{"id":"0:419","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[609,0],"end":[612,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:1207:2122":{"id":"b:1:3319-0:1207:2122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:326":{"id":"0:326","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[192,0],"end":[204,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexTimed","id":"0:40:1867","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["0:329:1874","0:331:1872"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:264:1698":{"id":"0:264:1698","crate_id":0,"name":"remutex","span":{"filename":"lock_api/src/remutex.rs","begin":[8,0],"end":[1039,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"atomic_usize\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:292:2036","0:295:2049","0:333:2077","0:1190:2083","0:1199:2103","0:1207:2122"],"is_stripped":false}}},"0:610:2221":{"id":"0:610:2221","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"lock_api/src/rwlock.rs","begin":[224,4],"end":[224,42]},"visibility":"default","docs":"Attempts to acquire an upgradable lock without blocking.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:1:2684:220-0:1168:167":{"id":"a:1:2684:220-0:1168:167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2548-0:6:1694":{"id":"b:1:2548-0:6:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:6:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:300:1697":{"id":"0:300:1697","crate_id":0,"name":"mutex","span":{"filename":"lock_api/src/remutex.rs","begin":[70,4],"end":[70,12]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"R"}}},"0:1088:1858":{"id":"0:1088:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[2654,4],"end":[2660,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MappedRwLockReadGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2547:694":{"id":"1:2547:694","crate_id":1,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12125:31516":{"id":"1:12125:31516","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"7:11888:419","self::pattern":"1:11712:7297"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:7312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5644-0:1245:2391":{"id":"b:5:5644-0:1245:2391","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1100":{"id":"0:1100","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2681,0],"end":[2687,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1104:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:329:1874":{"id":"0:329:1874","crate_id":0,"name":"try_lock_until","span":{"filename":"lock_api/src/remutex.rs","begin":[195,4],"end":[197,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:40:1867","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:436:1987":{"id":"0:436:1987","crate_id":0,"name":"unlocked","span":{"filename":"lock_api/src/remutex.rs","begin":[678,4],"end":[688,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:711:2390":{"id":"0:711:2390","crate_id":0,"name":"upgradable_guard","span":{"filename":"lock_api/src/rwlock.rs","begin":[993,4],"end":[998,5]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":"# Safety\n\nThe lock must be held when calling this method.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:2492":{"id":"0:964:2492","crate_id":0,"name":"try_with_upgraded","span":{"filename":"lock_api/src/rwlock.rs","begin":[2046,4],"end":[2059,5]},"visibility":"public","docs":"First, tries to atomically upgrade an upgradable read lock into an exclusive write lock.\n\nIf the access could not be granted at this time, then `None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:62":{"id":"0:74:62","crate_id":0,"name":"raw","span":{"filename":"lock_api/src/mutex.rs","begin":[277,4],"end":[279,5]},"visibility":"public","docs":"Returns the underlying raw mutex object.\n\nNote that you will most likely need to import the `RawMutex` trait from\n`lock_api` to be able to call functions on the raw mutex.\n\n# Safety\n\nThis method is unsafe because it allows unlocking a mutex while\nstill holding a reference to a `MutexGuard`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:2686-0:45:166":{"id":"a:1:8250:2686-0:45:166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:2684:220-0:1223:2321":{"id":"a:1:2684:220-0:1223:2321","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2548-0:1183:1978":{"id":"b:1:2548-0:1183:1978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2741:2617-0:6:1694":{"id":"a:1:2741:2617-0:6:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:6:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:697:2368":{"id":"0:697:2368","crate_id":0,"name":"read_recursive","span":{"filename":"lock_api/src/rwlock.rs","begin":[854,4],"end":[858,5]},"visibility":"public","docs":"Locks this `RwLock` with shared read access, blocking the current thread\nuntil it can be acquired.\n\nThe calling thread will be blocked until there are no more writers which\nhold the lock. There may be other readers currently inside the lock when\nthis method returns.\n\nUnlike `read`, this method is guaranteed to succeed without blocking if\nanother read lock is held at the time of the call. This allows a thread\nto recursively lock a `RwLock`. However using this method can cause\nwriters to starve since readers no longer block if a writer is waiting\nfor the lock.\n\nReturns an RAII guard which will release this thread's shared access\nonce it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:2687-0:1199:2103":{"id":"a:1:8249:2687-0:1199:2103","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:1162:668":{"id":"0:1162:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[2838,4],"end":[2840,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:805:1863":{"id":"0:805:1863","crate_id":0,"name":"bump","span":{"filename":"lock_api/src/rwlock.rs","begin":[1431,4],"end":[1436,5]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis is functionally identical to the `bump` method on [`RwLockReadGuard`].","links":{"`RwLockReadGuard`":"0:1215:218"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:1238:2323":{"id":"b:1:2251-0:1238:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:647":{"id":"0:647","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[367,0],"end":[394,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:650:939","0:651:1887"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2741:2617-0:1230:219":{"id":"a:1:2741:2617-0:1230:219","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1195:1698":{"id":"0:1195:1698","crate_id":0,"name":"remutex","span":{"filename":"lock_api/src/remutex.rs","begin":[605,4],"end":[605,40]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:491:1858":{"id":"0:491:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/remutex.rs","begin":[836,4],"end":[845,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nThis is functionally identical to the `unlock_fair` method on [`ReentrantMutexGuard`].","links":{"`ReentrantMutexGuard`":"0:1190:2083"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12041:31499":{"id":"1:12041:31499","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43621:6507","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311:1828":{"id":"0:311:1828","crate_id":0,"name":"INIT","span":{"filename":"lock_api/src/remutex.rs","begin":[80,4],"end":[85,6]},"visibility":"public","docs":"Initial value for an unlocked mutex.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:372:1935":{"id":"0:372:1935","crate_id":0,"name":"lock_arc","span":{"filename":"lock_api/src/remutex.rs","begin":[421,4],"end":[425,5]},"visibility":"public","docs":"Acquires a reentrant mutex through an `Arc`.\n\nThis method is similar to the `lock` method; however, it requires the `ReentrantMutex` to be inside of an\n`Arc` and the resulting mutex guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:333:2077":{"id":"0:333:2077","crate_id":0,"name":"ReentrantMutex","span":{"filename":"lock_api/src/remutex.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](struct.Mutex.html) for more details about the underlying mutex\nprimitive.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:337:62","0:338:1884"],"fields_stripped":false}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:347","0:353","0:358","0:374","0:379","a:1:8249:2687-0:333:2077","a:1:8250:2686-0:333:2077","a:1:2741:2617-0:333:2077","b:1:2542-0:333:2077","b:1:2545-0:333:2077","b:1:2248-0:333:2077","b:1:2553-0:333:2077","b:1:2251-0:333:2077","b:1:2538-0:333:2077","b:1:3319-0:333:2077","b:1:2548-0:333:2077","b:6:18-0:333:2077","b:23:1317-0:333:2077","0:406","0:392","0:412","0:397","0:387","0:343","0:339"]}}},"1:12099:31507":{"id":"1:12099:31507","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1122":{"id":"0:1122","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2727,0],"end":[2777,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1126:859","0:1129:1983"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:302":{"id":"0:302","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[74,0],"end":[74,90]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:6:18-0:1215:218":{"id":"b:6:18-0:1215:218","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:932:668":{"id":"0:932:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[1860,4],"end":[1862,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5644-0:1268:2423":{"id":"b:5:5644-0:1268:2423","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[269,0],"end":[287,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:357:1890"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:385:1947":{"id":"0:385:1947","crate_id":0,"name":"try_lock_arc_for","span":{"filename":"lock_api/src/remutex.rs","begin":[498,4],"end":[508,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached, through an `Arc`.\n\nThis method is similar to the `try_lock_for` method; however, it requires the `ReentrantMutex` to be\ninside of an `Arc` and the resulting mutex guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:40:1867","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:333:2077":{"id":"b:1:2542-0:333:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5644-0:1230:219":{"id":"b:5:5644-0:1230:219","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70:1836":{"id":"0:70:1836","crate_id":0,"name":"try_lock","span":{"filename":"lock_api/src/mutex.rs","begin":[227,4],"end":[234,5]},"visibility":"public","docs":"Attempts to acquire this lock.\n\nIf the lock could not be acquired at this time, then `None` is returned.\nOtherwise, an RAII guard is returned. The lock will be unlocked when the\nguard is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294:2040":{"id":"0:294:2040","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"lock_api/src/remutex.rs","begin":[54,4],"end":[54,48]},"visibility":"default","docs":"Returns a non-zero thread ID which identifies the current thread of\nexecution.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NonZeroUsize","id":"1:22392:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:1:8250:2686-0:1245:2391":{"id":"a:1:8250:2686-0:1245:2391","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:44:1874":{"id":"0:44:1874","crate_id":0,"name":"try_lock_until","span":{"filename":"lock_api/src/mutex.rs","begin":[131,4],"end":[131,61]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:40:1867","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:606:2210":{"id":"0:606:2210","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[206,4],"end":[206,77]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1152:588":{"id":"0:1152:588","crate_id":0,"name":"drop","span":{"filename":"lock_api/src/rwlock.rs","begin":[2819,4],"end":[2824,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:9:1696":{"id":"b:1:2548-0:9:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:9:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:823":{"id":"0:823","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1482,0],"end":[1482,89]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:448:1863":{"id":"0:448:1863","crate_id":0,"name":"bump","span":{"filename":"lock_api/src/remutex.rs","begin":[740,4],"end":[745,5]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:620:2248":{"id":"0:620:2248","crate_id":0,"name":"RawRwLockUpgradeTimed","span":{"filename":"lock_api/src/rwlock.rs","begin":[294,0],"end":[316,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and locking\nwith timeouts.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:621:2250","0:622:2251","0:623:2254","0:624:2255"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockTimed","id":"0:595:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[178,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:64:1890"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2542-0:1245:2391":{"id":"b:1:2542-0:1245:2391","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2551:128":{"id":"1:2551:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:692:2364":{"id":"0:692:2364","crate_id":0,"name":"try_write_arc_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[806,4],"end":[816,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with write access until a timeout is reached, through an `Arc`.\n\nThis method is similar to the `try_write_for` method; however, it requires the `RwLock` to be inside of\nan `Arc` and the resulting write guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:1230:219":{"id":"b:1:2251-0:1230:219","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8250:2686-0:1268:2423":{"id":"a:1:8250:2686-0:1268:2423","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:608:2217":{"id":"0:608:2217","crate_id":0,"name":"RawRwLockUpgrade","span":{"filename":"lock_api/src/rwlock.rs","begin":[219,0],"end":[247,1]},"visibility":"public","docs":"Additional methods for RwLocks which support atomically upgrading a shared\nlock to an exclusive lock.\n\nThis requires acquiring a special \"upgradable read lock\" instead of a\nnormal shared lock. There may only be one upgradable lock at any time,\notherwise deadlocks could occur when upgrading.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:609:2219","0:610:2221","0:611:2224","0:612:2226","0:613:2229"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"a:1:8250:2686-0:1176:1931":{"id":"a:1:8250:2686-0:1176:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:301:2053":{"id":"0:301:2053","crate_id":0,"name":"get_thread_id","span":{"filename":"lock_api/src/remutex.rs","begin":[71,4],"end":[71,20]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"G"}}},"0:716:2406":{"id":"0:716:2406","crate_id":0,"name":"try_upgradable_read_arc","span":{"filename":"lock_api/src/rwlock.rs","begin":[1063,4],"end":[1070,5]},"visibility":"public","docs":"Attempts to lock this `RwLock` with upgradable read access, through an `Arc`.\n\nThis method is similar to the `try_upgradable_read` method; however, it requires the `RwLock` to be\ninside of an `Arc` and the resulting read guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:1223:2321":{"id":"b:1:3319-0:1223:2321","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1114":{"id":"0:1114","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2718,0],"end":[2721,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:305":{"id":"0:305","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[75,0],"end":[75,90]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2538-0:1199:2103":{"id":"b:1:2538-0:1199:2103","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1038:2254":{"id":"0:1038:2254","crate_id":0,"name":"try_upgrade_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[2417,4],"end":[2434,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\nthe current guard is returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:1858":{"id":"0:38:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/mutex.rs","begin":[96,4],"end":[96,33]},"visibility":"default","docs":"Unlocks this mutex using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`].\n\n[`unlock`]: trait.RawMutex.html#tymethod.unlock","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:1189:860":{"id":"0:1189:860","crate_id":0,"name":"marker","span":{"filename":"lock_api/src/mutex.rs","begin":[823,4],"end":[823,34]},"visibility":{"restricted":{"parent":"0:13:1697","path":"::mutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"PhantomData","id":"1:2706:1810","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}}}},"0:553:668":{"id":"0:553:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/remutex.rs","begin":[1030,4],"end":[1032,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12014:31493":{"id":"1:12014:31493","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:777":{"id":"0:777","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1341,0],"end":[1345,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:781:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[231,0],"end":[267,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:351:939","0:352:1887"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:364:1836":{"id":"0:364:1836","crate_id":0,"name":"try_lock","span":{"filename":"lock_api/src/remutex.rs","begin":[326,4],"end":[333,5]},"visibility":"public","docs":"Attempts to acquire this lock.\n\nIf the lock could not be acquired at this time, then `None` is returned.\nOtherwise, an RAII guard is returned. The lock will be unlocked when the\nguard is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:1884":{"id":"0:49:1884","crate_id":0,"name":"data","span":{"filename":"lock_api/src/mutex.rs","begin":[144,4],"end":[144,23]},"visibility":{"restricted":{"parent":"0:13:1697","path":"::mutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"UnsafeCell","id":"1:4406:1809","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},"0:772":{"id":"0:772","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1331,0],"end":[1339,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:776:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:501:552":{"id":"0:501:552","crate_id":0,"name":"deref","span":{"filename":"lock_api/src/remutex.rs","begin":[879,4],"end":[881,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[662,0],"end":[666,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:165:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:915:230":{"id":"0:915:230","crate_id":0,"name":"Target","span":{"filename":"lock_api/src/rwlock.rs","begin":[1825,4],"end":[1825,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:2741:2617-0:1176:1931":{"id":"a:1:2741:2617-0:1176:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:209:588":{"id":"0:209:588","crate_id":0,"name":"drop","span":{"filename":"lock_api/src/mutex.rs","begin":[803,4],"end":[808,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:370:1928":{"id":"0:370:1928","crate_id":0,"name":"data_ptr","span":{"filename":"lock_api/src/remutex.rs","begin":[399,4],"end":[401,5]},"visibility":"public","docs":"Returns a raw pointer to the underlying data.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `ReentrantMutexGuard` object alive, for example\nwhen dealing with FFI.\n\n# Safety\n\nYou must ensure that there are no data races when dereferencing the\nreturned pointer, for example if the current thread logically owns a\n`ReentrantMutexGuard` but that guard has been discarded using\n`mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:1215:218":{"id":"b:1:3319-0:1215:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[950,0],"end":[950,97]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"owning_ref\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StableDeref","id":"22:6:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1199:2103":{"id":"0:1199:2103","crate_id":0,"name":"ArcReentrantMutexGuard","span":{"filename":"lock_api/src/remutex.rs","begin":[800,0],"end":[803,1]},"visibility":"public","docs":"An RAII mutex guard returned by the `Arc` locking operations on `ReentrantMutex`.\n\nThis is similar to the `ReentrantMutexGuard` struct, except instead of using a reference to unlock the\n`Mutex` it uses an `Arc<ReentrantMutex>`. This has several advantages, most notably that it has an `'static`\nlifetime.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[clippy::has_significant_drop]","#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1203:1698","0:1204:860"],"fields_stripped":false}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:479","0:487","a:1:2701:228-0:1199:2103","a:1:8249:2687-0:1199:2103","a:1:8250:2686-0:1199:2103","a:1:2684:220-0:1199:2103","a:1:2741:2617-0:1199:2103","b:1:2542-0:1199:2103","b:1:2248-0:1199:2103","b:1:2553-0:1199:2103","b:1:2251-0:1199:2103","b:1:2538-0:1199:2103","b:1:3319-0:1199:2103","b:1:2548-0:1199:2103","b:6:18-0:1199:2103","0:502","0:496"]}}},"0:945:2226":{"id":"0:945:2226","crate_id":0,"name":"upgrade","span":{"filename":"lock_api/src/rwlock.rs","begin":[1904,4],"end":[1915,5]},"visibility":"public","docs":"Atomically upgrades an upgradable read lock lock into an exclusive write lock,\nblocking the current thread until it can be acquired.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:258:668":{"id":"0:258:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/mutex.rs","begin":[944,4],"end":[946,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:1230:219":{"id":"a:1:2684:220-0:1230:219","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:587:2166":{"id":"0:587:2166","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"lock_api/src/rwlock.rs","begin":[89,4],"end":[98,5]},"visibility":"default","docs":"Check if this `RwLock` is currently exclusively locked.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:6:18-0:1190:2083":{"id":"b:6:18-0:1190:2083","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:1215:218":{"id":"b:1:2248-0:1215:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:560:1699":{"id":"0:560:1699","crate_id":0,"name":"rwlock","span":{"filename":"lock_api/src/rwlock.rs","begin":[8,0],"end":[2847,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:577:2148","0:588:2168","0:593:2183","0:595:2188","0:602:2201","0:605:2207","0:608:2217","0:614:2232","0:617:2241","0:620:2248","0:625:217","0:1215:218","0:1223:2321","0:1230:219","0:1238:2323","0:1245:2391","0:1257:2400","0:1268:2423","0:1275:2452"],"is_stripped":false}}},"0:720:2408":{"id":"0:720:2408","crate_id":0,"name":"try_upgradable_read_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[1081,4],"end":[1091,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with upgradable read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:392":{"id":"0:392","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[536,0],"end":[541,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:396:694"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:324:1858":{"id":"0:324:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/remutex.rs","begin":[163,4],"end":[170,5]},"visibility":"public","docs":"Unlocks this mutex using a fair unlock protocol. The inner mutex\nmay not be unlocked if this mutex was acquired previously in the\ncurrent thread.\n\n# Safety\n\nThis method may only be called if the mutex is held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:988:552":{"id":"0:988:552","crate_id":0,"name":"deref","span":{"filename":"lock_api/src/rwlock.rs","begin":[2178,4],"end":[2180,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:45:166":{"id":"b:1:2251-0:45:166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2542-0:1230:219":{"id":"b:1:2542-0:1230:219","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1187:62":{"id":"0:1187:62","crate_id":0,"name":"raw","span":{"filename":"lock_api/src/mutex.rs","begin":[821,4],"end":[821,14]},"visibility":{"restricted":{"parent":"0:13:1697","path":"::mutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"R"}}}}},"1:12040:31498":{"id":"1:12040:31498","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43611:6116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:1199:2103":{"id":"b:1:2553-0:1199:2103","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2542-0:1257:2400":{"id":"b:1:2542-0:1257:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:613:2229":{"id":"0:613:2229","crate_id":0,"name":"try_upgrade","span":{"filename":"lock_api/src/rwlock.rs","begin":[246,4],"end":[246,41]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock without\nblocking.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:3319-0:1245:2391":{"id":"b:1:3319-0:1245:2391","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[543,0],"end":[564,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:401:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:362:1893":{"id":"0:362:1893","crate_id":0,"name":"guard","span":{"filename":"lock_api/src/remutex.rs","begin":[294,4],"end":[299,5]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":"# Safety\n\nThe lock must be held when calling this method.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:604:2205":{"id":"0:604:2205","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"lock_api/src/rwlock.rs","begin":[199,4],"end":[199,48]},"visibility":"default","docs":"Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:6:18-0:1223:2321":{"id":"b:6:18-0:1223:2321","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115:1959":{"id":"0:115:1959","crate_id":0,"name":"deserialize","span":{"filename":"lock_api/src/mutex.rs","begin":[475,4],"end":[480,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["deserializer",{"generic":"D"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"D"},"trait":{"name":"","id":"23:1331:1816","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"D","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"D"},"bounds":[{"trait_bound":{"trait":{"name":"Deserializer","id":"23:1331:1816","args":{"angle_bracketed":{"args":[{"lifetime":"'de"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1212:62":{"id":"0:1212:62","crate_id":0,"name":"raw","span":{"filename":"lock_api/src/remutex.rs","begin":[905,4],"end":[905,36]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}}}}}},"0:132:1987":{"id":"0:132:1987","crate_id":0,"name":"unlocked","span":{"filename":"lock_api/src/mutex.rs","begin":[558,4],"end":[568,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:698:2371":{"id":"0:698:2371","crate_id":0,"name":"try_read_recursive","span":{"filename":"lock_api/src/rwlock.rs","begin":[871,4],"end":[878,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access.\n\nIf the access could not be granted at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.\n\nThis method is guaranteed to succeed if another read lock is held at the\ntime of the call. See the documentation for `read_recursive` for details.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:916:552":{"id":"0:916:552","crate_id":0,"name":"deref","span":{"filename":"lock_api/src/rwlock.rs","begin":[1827,4],"end":[1829,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298:2051":{"id":"0:298:2051","crate_id":0,"name":"owner","span":{"filename":"lock_api/src/remutex.rs","begin":[68,4],"end":[68,22]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"AtomicUsize","id":"1:41991:92","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:243:554":{"id":"0:243:554","crate_id":0,"name":"deref_mut","span":{"filename":"lock_api/src/mutex.rs","begin":[920,4],"end":[922,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:9:1696":{"id":"0:9:1696","crate_id":0,"name":"GuardNoSend","span":{"filename":"lock_api/src/lib.rs","begin":[103,0],"end":[103,32]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is not `Send`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":["0:11:1606"]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8249:2687-0:9:1696","a:1:8250:2686-0:9:1696","a:1:2684:220-0:9:1696","a:1:2741:2617-0:9:1696","b:1:2542-0:9:1696","b:1:2248-0:9:1696","b:1:2553-0:9:1696","b:1:2251-0:9:1696","b:1:2538-0:9:1696","b:1:3319-0:9:1696","b:1:2548-0:9:1696","b:6:18-0:9:1696","0:12"]}}},"b:1:3319-0:1176:1931":{"id":"b:1:3319-0:1176:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1279:62":{"id":"0:1279:62","crate_id":0,"name":"raw","span":{"filename":"lock_api/src/rwlock.rs","begin":[2713,4],"end":[2713,14]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"R"}}}}},"0:724":{"id":"0:724","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1149,0],"end":[1154,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:727:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1070":{"id":"0:1070","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2583,0],"end":[2586,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:577:2148","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:666:1846":{"id":"0:666:1846","crate_id":0,"name":"is_locked","span":{"filename":"lock_api/src/rwlock.rs","begin":[513,4],"end":[515,5]},"visibility":"public","docs":"Checks whether this `RwLock` is currently locked in any way.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:1168:167":{"id":"b:1:2542-0:1168:167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:318:1844":{"id":"0:318:1844","crate_id":0,"name":"unlock","span":{"filename":"lock_api/src/remutex.rs","begin":[131,4],"end":[138,5]},"visibility":"public","docs":"Unlocks this mutex. The inner mutex may not be unlocked if\nthis mutex was acquired previously in the current thread.\n\n# Safety\n\nThis method may only be called if the mutex is held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:662:2287":{"id":"0:662:2287","crate_id":0,"name":"try_read","span":{"filename":"lock_api/src/rwlock.rs","begin":[461,4],"end":[468,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access.\n\nIf the access could not be granted at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5646:1455":{"id":"5:5646:1455","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5402:31405":{"id":"5:5402:31405","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12134:30168"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:2687-0:1268:2423":{"id":"a:1:8249:2687-0:1268:2423","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2542-0:1190:2083":{"id":"b:1:2542-0:1190:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:770:230":{"id":"0:770:230","crate_id":0,"name":"Target","span":{"filename":"lock_api/src/rwlock.rs","begin":[1324,4],"end":[1324,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:1173:860":{"id":"0:1173:860","crate_id":0,"name":"marker","span":{"filename":"lock_api/src/mutex.rs","begin":[492,4],"end":[492,52]},"visibility":{"restricted":{"parent":"0:13:1697","path":"::mutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"PhantomData","id":"1:2706:1810","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}},{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:1825","args":null}}}]}}],"bindings":[]}}}}}},"a:1:2741:2617-0:1199:2103":{"id":"a:1:2741:2617-0:1199:2103","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:971:2254":{"id":"0:971:2254","crate_id":0,"name":"try_upgrade_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[2068,4],"end":[2083,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\nthe current guard is returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:1275:2452":{"id":"b:1:3319-0:1275:2452","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12052:2993":{"id":"1:12052:2993","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41396:179","prim@char":"7:11888:419","self::pattern":"1:11712:7297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[434,0],"end":[452,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:101:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2548-0:295:2049":{"id":"b:1:2548-0:295:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:650:939":{"id":"0:650:939","crate_id":0,"name":"new","span":{"filename":"lock_api/src/rwlock.rs","begin":[371,4],"end":[376,5]},"visibility":"public","docs":"Creates a new instance of an `RwLock<T>` which is unlocked.","links":{},"attrs":["#[cfg(has_const_fn_trait_bound)]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5644-0:1238:2323":{"id":"b:5:5644-0:1238:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:818:668":{"id":"0:818:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[1461,4],"end":[1463,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:998:668":{"id":"0:998:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[2196,4],"end":[2198,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:500:230":{"id":"0:500:230","crate_id":0,"name":"Target","span":{"filename":"lock_api/src/remutex.rs","begin":[877,4],"end":[877,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2548-0:1257:2400":{"id":"b:1:2548-0:1257:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12069:31500":{"id":"1:12069:31500","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11712:7297","str::split":"1:12060:30299","prim@char":"7:11888:419","`DoubleEndedIterator`":"1:7240:121","str::rsplit_terminator":"1:12072:31501"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43407:6501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:1833":{"id":"0:69:1833","crate_id":0,"name":"lock","span":{"filename":"lock_api/src/mutex.rs","begin":[213,4],"end":[217,5]},"visibility":"public","docs":"Acquires a mutex, blocking the current thread until it is able to do so.\n\nThis function will block the local thread until it is available to acquire\nthe mutex. Upon returning, the thread is the only thread with the mutex\nheld. An RAII guard is returned to allow scoped unlock of the lock. When\nthe guard goes out of scope, the mutex will be unlocked.\n\nAttempts to lock a mutex in the thread which already holds the lock will\nresult in a deadlock.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:831:859":{"id":"0:831:859","crate_id":0,"name":"map","span":{"filename":"lock_api/src/rwlock.rs","begin":[1499,4],"end":[1511,5]},"visibility":"public","docs":"Make a new `MappedRwLockWriteGuard` for a component of the locked data.\n\nThis operation cannot fail as the `RwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockWriteGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12060:30299":{"id":"1:12060:30299","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11712:7297","`DoubleEndedIterator`":"1:7240:121","prim@char":"7:11888:419","str::split_whitespace":"1:12038:26355","str::rsplit":"1:12066:30302"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43357:6114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:1207:2122":{"id":"b:1:2542-0:1207:2122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:6:18-0:1245:2391":{"id":"b:6:18-0:1245:2391","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:433:1983":{"id":"0:433:1983","crate_id":0,"name":"try_map","span":{"filename":"lock_api/src/remutex.rs","begin":[653,4],"end":[671,5]},"visibility":"public","docs":"Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `ReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `ReentrantMutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:2687-0:1176:1931":{"id":"a:1:8249:2687-0:1176:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:506:588":{"id":"0:506:588","crate_id":0,"name":"drop","span":{"filename":"lock_api/src/remutex.rs","begin":[887,4],"end":[892,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:237:230":{"id":"0:237:230","crate_id":0,"name":"Target","span":{"filename":"lock_api/src/mutex.rs","begin":[911,4],"end":[911,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:455:552":{"id":"0:455:552","crate_id":0,"name":"deref","span":{"filename":"lock_api/src/remutex.rs","begin":[753,4],"end":[755,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1058":{"id":"0:1058","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2550,0],"end":[2556,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1061:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2542-0:1275:2452":{"id":"b:1:2542-0:1275:2452","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:523":{"id":"0:523","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[972,0],"end":[995,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:37:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:528:1858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:806":{"id":"0:806","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1440,0],"end":[1446,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:809:230","0:810:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:771:552":{"id":"0:771:552","crate_id":0,"name":"deref","span":{"filename":"lock_api/src/rwlock.rs","begin":[1326,4],"end":[1328,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186:1987":{"id":"0:186:1987","crate_id":0,"name":"unlocked","span":{"filename":"lock_api/src/mutex.rs","begin":[725,4],"end":[735,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:495:1863":{"id":"0:495:1863","crate_id":0,"name":"bump","span":{"filename":"lock_api/src/remutex.rs","begin":[867,4],"end":[872,5]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis is functionally equivalent to the `bump` method on [`ReentrantMutexGuard`].","links":{"`ReentrantMutexGuard`":"0:1190:2083"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:1950":{"id":"0:89:1950","crate_id":0,"name":"try_lock_arc_until","span":{"filename":"lock_api/src/mutex.rs","begin":[407,4],"end":[417,5]},"visibility":"public","docs":"Attempts to acquire this lock through an `Arc` until a timeout is reached.\n\nThis method is similar to the `try_lock_until` method; however, it requires the `Mutex` to be inside of\nan `Arc` and the resulting mutex guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:40:1867","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101:668":{"id":"0:101:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/mutex.rs","begin":[435,4],"end":[451,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:664:2298":{"id":"0:664:2298","crate_id":0,"name":"try_write","span":{"filename":"lock_api/src/rwlock.rs","begin":[493,4],"end":[500,5]},"visibility":"public","docs":"Attempts to lock this `RwLock` with exclusive write access.\n\nIf the lock could not be acquired at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the lock when\nit is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:625:217":{"id":"b:1:2251-0:625:217","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:795:1987":{"id":"0:795:1987","crate_id":0,"name":"unlocked","span":{"filename":"lock_api/src/rwlock.rs","begin":[1381,4],"end":[1391,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is functionally identical to the `unlocked` method on [`RwLockReadGuard`].","links":{"`RwLockReadGuard`":"0:1215:218"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:1199:2103":{"id":"b:1:2542-0:1199:2103","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:1168:167":{"id":"b:1:2553-0:1168:167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:591:2176":{"id":"0:591:2176","crate_id":0,"name":"bump_shared","span":{"filename":"lock_api/src/rwlock.rs","begin":[131,4],"end":[134,5]},"visibility":"default","docs":"Temporarily yields a shared lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_shared_fair` followed\nby `lock_shared`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:776:588":{"id":"0:776:588","crate_id":0,"name":"drop","span":{"filename":"lock_api/src/rwlock.rs","begin":[1333,4],"end":[1338,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:1245:2391":{"id":"b:1:2548-0:1245:2391","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2548-0:1207:2122":{"id":"b:1:2548-0:1207:2122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12107:31512":{"id":"1:12107:31512","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"7:11888:419","self::pattern":"1:11712:7297"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11737:7311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:2687-0:333:2077":{"id":"a:1:8249:2687-0:333:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:706:2387":{"id":"0:706:2387","crate_id":0,"name":"try_read_arc_recursive_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[957,4],"end":[967,5]},"visibility":"public","docs":"Attempts to lock this `RwLock` with read access until a timeout is reached, through an `Arc`.\n\nThis method is similar to the `try_read_recursive_for` method; however, it requires the `RwLock` to be\ninside of an `Arc` and the resulting read guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:2617-0:625:217":{"id":"a:1:2741:2617-0:625:217","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2553-0:1223:2321":{"id":"b:1:2553-0:1223:2321","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:869:554":{"id":"0:869:554","crate_id":0,"name":"deref_mut","span":{"filename":"lock_api/src/rwlock.rs","begin":[1665,4],"end":[1667,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[645,0],"end":[650,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:2911:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:155:554"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1153":{"id":"0:1153","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2827,0],"end":[2833,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1157:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12084:31503":{"id":"1:12084:31503","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:7312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:1183:1978":{"id":"b:1:2538-0:1183:1978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:707:2389":{"id":"0:707:2389","crate_id":0,"name":"try_read_arc_recursive_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[975,4],"end":[985,5]},"visibility":"public","docs":"Attempts to lock this `RwLock` with read access until a timeout is reached, through an `Arc`.\n\nThis method is similar to the `try_read_recursive_until` method; however, it requires the `RwLock` to be\ninside of an `Arc` and the resulting read guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156":{"id":"0:156","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[652,0],"end":[660,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:160:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8249:2687-0:1230:219":{"id":"a:1:8249:2687-0:1230:219","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:1012:1987":{"id":"0:1012:1987","crate_id":0,"name":"unlocked","span":{"filename":"lock_api/src/rwlock.rs","begin":[2238,4],"end":[2248,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is functionally identical to the `unlocked` method on [`RwLockUpgradableReadGuard`].","links":{"`RwLockUpgradableReadGuard`":"0:1245:2391"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:781:668":{"id":"0:781:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[1342,4],"end":[1344,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2556:128":{"id":"1:2556:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32020:7164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1249:1699":{"id":"0:1249:1699","crate_id":0,"name":"rwlock","span":{"filename":"lock_api/src/rwlock.rs","begin":[1870,4],"end":[1870,28]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:13:1697":{"id":"0:13:1697","crate_id":0,"name":"mutex","span":{"filename":"lock_api/src/mutex.rs","begin":[8,0],"end":[950,97]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:30:1825","0:37:1853","0:40:1867","0:45:166","0:1168:167","0:1176:1931","0:1183:1978"],"is_stripped":false}}},"1:12019:30160":{"id":"1:12019:30160","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11279:7313"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:295:2049":{"id":"b:1:3319-0:295:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8249:2687-0:1190:2083":{"id":"a:1:8249:2687-0:1190:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:12122:31515":{"id":"1:12122:31515","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"7:11888:419","self::pattern":"1:11712:7297"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:1268:2423":{"id":"b:1:2553-0:1268:2423","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:331:1872":{"id":"0:331:1872","crate_id":0,"name":"try_lock_for","span":{"filename":"lock_api/src/remutex.rs","begin":[201,4],"end":[203,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:40:1867","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:1257:2400":{"id":"b:1:2538-0:1257:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2251-0:1199:2103":{"id":"b:1:2251-0:1199:2103","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:625:217":{"id":"b:1:2248-0:625:217","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:623:2254":{"id":"0:623:2254","crate_id":0,"name":"try_upgrade_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[307,4],"end":[307,70]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:761:1858":{"id":"0:761:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[1282,4],"end":[1288,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `RwLockReadGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:1983":{"id":"0:129:1983","crate_id":0,"name":"try_map","span":{"filename":"lock_api/src/mutex.rs","begin":[536,4],"end":[551,5]},"visibility":"public","docs":"Attempts to make a new `MappedMutexGuard` for a component of the\nlocked data. The original guard is returned if the closure returns `None`.\n\nThis operation cannot fail as the `MutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:384:1874":{"id":"0:384:1874","crate_id":0,"name":"try_lock_until","span":{"filename":"lock_api/src/remutex.rs","begin":[483,4],"end":[490,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:40:1867","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:656":{"id":"0:656","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[411,0],"end":[663,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:659:2272","0:660:2273","0:661:2014","0:662:2287","0:663:2294","0:664:2298","0:665:1909","0:666:1846","0:667:2166","0:668:2305","0:669:2310","0:670:62","0:671:1928","0:672:2320","0:673:2322","0:674:2327","0:675:2331","0:676:2335","0:677:2339"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:743":{"id":"0:743","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1194,0],"end":[1266,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:747:1699","0:748:859","0:751:1983","0:754:1987"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2741:2617-0:1275:2452":{"id":"a:1:2741:2617-0:1275:2452","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5382":{"id":"5:5382","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5383:32179","5:5384:2707","5:5387:32180","5:5390:32181","5:5398:32182","5:5399:32183","5:5400:7239","5:5401:31404","5:5402:31405"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:141:2005":{"id":"0:141:2005","crate_id":0,"name":"unlocked_fair","span":{"filename":"lock_api/src/mutex.rs","begin":[611,4],"end":[621,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThe mutex is unlocked using a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2552:1478":{"id":"1:2552:1478","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:6:18-0:1230:219":{"id":"b:6:18-0:1230:219","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:1238:2323":{"id":"b:1:2248-0:1238:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:366:1846":{"id":"0:366:1846","crate_id":0,"name":"is_locked","span":{"filename":"lock_api/src/remutex.rs","begin":[346,4],"end":[348,5]},"visibility":"public","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:6:18-0:6:1694":{"id":"b:6:18-0:6:1694","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:6:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1136:1858":{"id":"0:1136:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[2793,4],"end":[2799,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MappedRwLockWriteGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:1275:2452":{"id":"b:1:2548-0:1275:2452","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:791":{"id":"0:791","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1371,0],"end":[1392,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:794:1699","0:795:1987"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:474":{"id":"0:474","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[787,0],"end":[790,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"owning_ref\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StableDeref","id":"22:6:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:6:18-0:1183:1978":{"id":"b:6:18-0:1183:1978","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1230:219":{"id":"0:1230:219","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"lock_api/src/rwlock.rs","begin":[1477,0],"end":[1480,1]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1234:1699","0:1235:860"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:826","0:840","0:845","0:850","a:1:8249:2687-0:1230:219","a:1:8250:2686-0:1230:219","a:1:2684:220-0:1230:219","a:1:2741:2617-0:1230:219","b:1:2542-0:1230:219","b:1:2248-0:1230:219","b:1:2553-0:1230:219","b:1:2251-0:1230:219","b:1:2538-0:1230:219","b:1:3319-0:1230:219","b:1:2548-0:1230:219","b:5:5644-0:1230:219","b:6:18-0:1230:219","0:875","0:823","0:870","0:885","0:859","0:865","0:880"]}}},"0:864:552":{"id":"0:864:552","crate_id":0,"name":"deref","span":{"filename":"lock_api/src/rwlock.rs","begin":[1658,4],"end":[1660,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:700:2378":{"id":"0:700:2378","crate_id":0,"name":"try_read_recursive_arc","span":{"filename":"lock_api/src/rwlock.rs","begin":[898,4],"end":[905,5]},"visibility":"public","docs":"Attempts to lock this `RwLock` with shared read access, through an `Arc`.\n\nThis method is similar to the `try_read_recursive` method; however, it requires the `RwLock` to be inside\nof an `Arc` and the resulting read guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253:668":{"id":"0:253:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/mutex.rs","begin":[936,4],"end":[938,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:845":{"id":"0:845","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1579,0],"end":[1598,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeDowngrade","id":"0:617:2241","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:849:2245"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2542-0:45:166":{"id":"b:1:2542-0:45:166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8249:2687-0:625:217":{"id":"a:1:8249:2687-0:625:217","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:989":{"id":"0:989","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2183,0],"end":[2191,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:993:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2250:2526":{"id":"1:2250:2526","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1046:2500":{"id":"0:1046:2500","crate_id":0,"name":"try_with_upgraded_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[2509,4],"end":[2526,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade_until` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:594:2186":{"id":"0:594:2186","crate_id":0,"name":"downgrade","span":{"filename":"lock_api/src/rwlock.rs","begin":[160,4],"end":[160,31]},"visibility":"default","docs":"Atomically downgrades an exclusive lock into a shared lock without\nallowing any thread to take an exclusive lock in the meantime.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:1035":{"id":"0:1035","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2411,0],"end":[2460,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeTimed","id":"0:620:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1038:2254","0:1039:2255"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:723:2414":{"id":"0:723:2414","crate_id":0,"name":"try_upgradable_read_arc_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[1136,4],"end":[1146,5]},"visibility":"public","docs":"Attempts to lock this `RwLock` with upgradable access until a timeout is reached, through an `Arc`.\n\nThis method is similar to the `try_upgradable_read_until` method; however, it requires the `RwLock` to be\ninside of an `Arc` and the resulting read guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:892:1699":{"id":"0:892:1699","crate_id":0,"name":"rwlock","span":{"filename":"lock_api/src/rwlock.rs","begin":[1711,4],"end":[1713,5]},"visibility":"public","docs":"Returns a reference to the rwlock, contained in its `Arc`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:1238:2323":{"id":"a:1:2684:220-0:1238:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1168:167":{"id":"0:1168:167","crate_id":0,"name":"MutexGuard","span":{"filename":"lock_api/src/mutex.rs","begin":[490,0],"end":[493,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1172:1697","0:1173:860"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:121","0:136","a:1:8249:2687-0:1168:167","a:1:8250:2686-0:1168:167","a:1:2684:220-0:1168:167","a:1:2741:2617-0:1168:167","b:1:2542-0:1168:167","b:1:2248-0:1168:167","b:1:2553-0:1168:167","b:1:2251-0:1168:167","b:1:2538-0:1168:167","b:1:3319-0:1168:167","b:1:2548-0:1168:167","b:5:5644-0:1168:167","b:6:18-0:1168:167","0:171","0:145","0:166","0:161","0:156","0:151","0:117"]}}},"0:528:1858":{"id":"0:528:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/remutex.rs","begin":[988,4],"end":[994,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `ReentrantMutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:667:2166":{"id":"0:667:2166","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"lock_api/src/rwlock.rs","begin":[519,4],"end":[521,5]},"visibility":"public","docs":"Check if this `RwLock` is currently exclusively locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:1245:2391":{"id":"b:1:2538-0:1245:2391","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:1257:2400":{"id":"b:1:2248-0:1257:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5390:32181":{"id":"5:5390:32181","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:357:1890":{"id":"0:357:1890","crate_id":0,"name":"const_new","span":{"filename":"lock_api/src/remutex.rs","begin":[276,4],"end":[286,5]},"visibility":"public","docs":"Creates a new reentrant mutex based on a pre-existing raw mutex and a\nhelper to get the thread ID.\n\nThis allows creating a reentrant mutex in a constant context on stable\nRust.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["raw_mutex",{"generic":"R"}],["get_thread_id",{"generic":"G"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:983":{"id":"0:983","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2175,0],"end":[2181,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:987:230","0:988:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12081:31502":{"id":"1:12081:31502","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2545-0:333:2077":{"id":"b:1:2545-0:333:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2547:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1053:552":{"id":"0:1053:552","crate_id":0,"name":"deref","span":{"filename":"lock_api/src/rwlock.rs","begin":[2533,4],"end":[2535,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374":{"id":"0:374","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[443,0],"end":[459,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:37:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:378:1941"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:880":{"id":"0:880","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1686,0],"end":[1692,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:884:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:1238:2323":{"id":"b:1:3319-0:1238:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:705:2383":{"id":"0:705:2383","crate_id":0,"name":"try_read_recursive_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[939,4],"end":[949,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:379":{"id":"0:379","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[461,0],"end":[527,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexTimed","id":"0:40:1867","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:383:1872","0:384:1874","0:385:1947","0:386:1950"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:854:1858":{"id":"0:854:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[1614,4],"end":[1620,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `RwLockWriteGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:6:18-0:1275:2452":{"id":"b:6:18-0:1275:2452","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:9:1696":{"id":"b:1:2248-0:9:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:9:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:473:668":{"id":"0:473:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/remutex.rs","begin":[781,4],"end":[783,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:782":{"id":"0:782","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1347,0],"end":[1353,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:786:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:942:1987":{"id":"0:942:1987","crate_id":0,"name":"unlocked","span":{"filename":"lock_api/src/rwlock.rs","begin":[1890,4],"end":[1900,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1846":{"id":"0:72:1846","crate_id":0,"name":"is_locked","span":{"filename":"lock_api/src/mutex.rs","begin":[247,4],"end":[249,5]},"visibility":"public","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:1207:2122":{"id":"b:1:2553-0:1207:2122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:870":{"id":"0:870","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1670,0],"end":[1678,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:874:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1281:860":{"id":"0:1281:860","crate_id":0,"name":"marker","span":{"filename":"lock_api/src/rwlock.rs","begin":[2715,4],"end":[2715,34]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"PhantomData","id":"1:2706:1810","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}}}},"0:1238:2323":{"id":"0:1238:2323","crate_id":0,"name":"ArcRwLockWriteGuard","span":{"filename":"lock_api/src/rwlock.rs","begin":[1703,0],"end":[1706,1]},"visibility":"public","docs":"An RAII rwlock guard returned by the `Arc` locking operations on `RwLock`.\nThis is similar to the `RwLockWriteGuard` struct, except instead of using a reference to unlock the `RwLock`\nit uses an `Arc<RwLock>`. This has several advantages, most notably that it has an `'static` lifetime.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1241:1699","0:1242:860"],"fields_stripped":false}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:889","0:896","0:900","0:904","a:1:2701:228-0:1238:2323","a:1:8249:2687-0:1238:2323","a:1:8250:2686-0:1238:2323","a:1:2684:220-0:1238:2323","a:1:2741:2617-0:1238:2323","b:1:2542-0:1238:2323","b:1:2248-0:1238:2323","b:1:2553-0:1238:2323","b:1:2251-0:1238:2323","b:1:2538-0:1238:2323","b:1:3319-0:1238:2323","b:1:2548-0:1238:2323","b:5:5644-0:1238:2323","b:6:18-0:1238:2323","0:912","0:929","0:925","0:921","0:917"]}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[148,0],"end":[148,73]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:1183:1978":{"id":"b:1:3319-0:1183:1978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:670:62":{"id":"0:670:62","crate_id":0,"name":"raw","span":{"filename":"lock_api/src/rwlock.rs","begin":[565,4],"end":[567,5]},"visibility":"public","docs":"Returns the underlying raw reader-writer lock object.\n\nNote that you will most likely need to import the `RawRwLock` trait from\n`lock_api` to be able to call functions on the raw\nreader-writer lock.\n\n# Safety\n\nThis method is unsafe because it allows unlocking a mutex while\nstill holding a reference to a lock guard.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:2687-0:295:2049":{"id":"a:1:8249:2687-0:295:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:200:230":{"id":"0:200:230","crate_id":0,"name":"Target","span":{"filename":"lock_api/src/mutex.rs","begin":[785,4],"end":[785,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:6:18-0:1176:1931":{"id":"b:6:18-0:1176:1931","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12023:1910":{"id":"1:12023:1910","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:1223:2321":{"id":"b:1:2548-0:1223:2321","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:599:2191":{"id":"0:599:2191","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[178,4],"end":[178,68]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:929":{"id":"0:929","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1859,0],"end":[1863,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:932:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:371:1930":{"id":"0:371:1930","crate_id":0,"name":"guard_arc","span":{"filename":"lock_api/src/remutex.rs","begin":[408,4],"end":[413,5]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":"# Safety\n\nThe lock must be held before calling this method.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:579:1831":{"id":"0:579:1831","crate_id":0,"name":"GuardMarker","span":{"filename":"lock_api/src/rwlock.rs","begin":[47,4],"end":[47,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"b:1:2248-0:1223:2321":{"id":"b:1:2248-0:1223:2321","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:299:2052":{"id":"0:299:2052","crate_id":0,"name":"lock_count","span":{"filename":"lock_api/src/remutex.rs","begin":[69,4],"end":[69,27]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Cell","id":"1:4183:2027","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}},"b:1:2538-0:1215:218":{"id":"b:1:2538-0:1215:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2541:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:135:1992":{"id":"0:135:1992","crate_id":0,"name":"leak","span":{"filename":"lock_api/src/mutex.rs","begin":[575,4],"end":[579,5]},"visibility":"public","docs":"Leaks the mutex guard and returns a mutable reference to the data\nprotected by the mutex.\n\nThis will leave the `Mutex` in a locked state.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:2687-0:1245:2391":{"id":"a:1:8249:2687-0:1245:2391","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:6:18-0:295:2049":{"id":"b:6:18-0:295:2049","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3321:1491":{"id":"1:3321:1491","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39341:6303","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:462":{"id":"0:462","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[770,0],"end":[776,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:467:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2553-0:1275:2452":{"id":"b:1:2553-0:1275:2452","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12134:30168":{"id":"1:12134:30168","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12132:30166":{"id":"1:12132:30166","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193:2005":{"id":"0:193:2005","crate_id":0,"name":"unlocked_fair","span":{"filename":"lock_api/src/mutex.rs","begin":[759,4],"end":[769,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThis is functionally identical to the `unlocked_fair` method on [`MutexGuard`].","links":{"`MutexGuard`":"0:1168:167"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12075:30304":{"id":"1:12075:30304","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"7:11888:419","self::pattern":"1:11712:7297","str::rsplitn":"1:12078:30306"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43461:6253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:639:1959":{"id":"0:639:1959","crate_id":0,"name":"deserialize","span":{"filename":"lock_api/src/rwlock.rs","begin":[356,4],"end":[361,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["deserializer",{"generic":"D"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"D"},"trait":{"name":"","id":"23:1331:1816","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"D","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"D"},"bounds":[{"trait_bound":{"trait":{"name":"Deserializer","id":"23:1331:1816","args":{"angle_bracketed":{"args":[{"lifetime":"'de"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:863:230":{"id":"0:863:230","crate_id":0,"name":"Target","span":{"filename":"lock_api/src/rwlock.rs","begin":[1656,4],"end":[1656,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:727:60":{"id":"0:727:60","crate_id":0,"name":"default","span":{"filename":"lock_api/src/rwlock.rs","begin":[1151,4],"end":[1153,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:1268:2423":{"id":"b:1:2251-0:1268:2423","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:320:2065":{"id":"0:320:2065","crate_id":0,"name":"is_owned_by_current_thread","span":{"filename":"lock_api/src/remutex.rs","begin":[148,4],"end":[151,5]},"visibility":"public","docs":"Checks whether the mutex is currently held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:618:2243":{"id":"0:618:2243","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"lock_api/src/rwlock.rs","begin":[282,4],"end":[282,42]},"visibility":"default","docs":"Downgrades an upgradable lock to a shared lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:321":{"id":"0:321","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[154,0],"end":[190,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:37:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["0:324:1858","0:325:1863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2251-0:1207:2122":{"id":"b:1:2251-0:1207:2122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:925":{"id":"0:925","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1852,0],"end":[1856,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:928:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2741:2617-0:1183:1978":{"id":"a:1:2741:2617-0:1183:1978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:363:1833":{"id":"0:363:1833","crate_id":0,"name":"lock","span":{"filename":"lock_api/src/remutex.rs","begin":[312,4],"end":[316,5]},"visibility":"public","docs":"Acquires a reentrant mutex, blocking the current thread until it is able\nto do so.\n\nIf the mutex is held by another thread then this function will block the\nlocal thread until it is available to acquire the mutex. If the mutex is\nalready held by the current thread then this function will increment the\nlock reference count and return immediately. Upon returning,\nthe thread is the only thread with the mutex held. An RAII guard is\nreturned to allow scoped unlock of the lock. When the guard goes out of\nscope, the mutex will be unlocked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:1275:2452":{"id":"b:1:2251-0:1275:2452","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[701,0],"end":[736,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:184:1697","0:185:2012","0:186:1987"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12106:31511":{"id":"1:12106:31511","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:295:2049":{"id":"b:1:2553-0:295:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[497,0],"end":[580,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:125:1697","0:126:859","0:129:1983","0:132:1987","0:135:1992"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2542-0:625:217":{"id":"b:1:2542-0:625:217","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1157:668":{"id":"0:1157:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[2830,4],"end":[2832,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:952:2005":{"id":"0:952:2005","crate_id":0,"name":"unlocked_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[1964,4],"end":[1974,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThe `RwLock` is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:554":{"id":"0:205:554","crate_id":0,"name":"deref_mut","span":{"filename":"lock_api/src/mutex.rs","begin":[795,4],"end":[797,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:960:2186":{"id":"0:960:2186","crate_id":0,"name":"downgrade","span":{"filename":"lock_api/src/rwlock.rs","begin":[1998,4],"end":[2009,5]},"visibility":"public","docs":"Atomically downgrades an upgradable read lock lock into a shared read lock\nwithout allowing any writers to take exclusive access of the lock in the\nmeantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1089":{"id":"0:1089","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2663,0],"end":[2669,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1093:230","0:1094:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12031:31496":{"id":"1:12031:31496","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"7:11894:1397","str::slice_mut_unchecked":"1:12032:31497","crate::ops::Index":"1:2981:2654"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12105:31510":{"id":"1:12105:31510","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1028:2186":{"id":"0:1028:2186","crate_id":0,"name":"downgrade","span":{"filename":"lock_api/src/rwlock.rs","begin":[2343,4],"end":[2357,5]},"visibility":"public","docs":"Atomically downgrades an upgradable read lock lock into a shared read lock\nwithout allowing any writers to take exclusive access of the lock in the\nmeantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:9:1696":{"id":"b:1:2251-0:9:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:9:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[191,0],"end":[335,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:68:1893","0:69:1833","0:70:1836","0:71:1909","0:72:1846","0:73:1918","0:74:62","0:75:1928","0:76:1930","0:77:1935","0:78:1939"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:34:1836":{"id":"0:34:1836","crate_id":0,"name":"try_lock","span":{"filename":"lock_api/src/mutex.rs","begin":[52,4],"end":[52,31]},"visibility":"default","docs":"Attempts to acquire this mutex without blocking. Returns `true`\nif the lock was successfully acquired and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1273:1884":{"id":"0:1273:1884","crate_id":0,"name":"data","span":{"filename":"lock_api/src/rwlock.rs","begin":[2578,4],"end":[2578,18]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}}},"0:293:1828":{"id":"0:293:1828","crate_id":0,"name":"INIT","span":{"filename":"lock_api/src/remutex.rs","begin":[50,4],"end":[50,21]},"visibility":"default","docs":"Initial value.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":null}}},"0:609:2219":{"id":"0:609:2219","crate_id":0,"name":"lock_upgradable","span":{"filename":"lock_api/src/rwlock.rs","begin":[221,4],"end":[221,30]},"visibility":"default","docs":"Acquires an upgradable lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:456":{"id":"0:456","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[758,0],"end":[768,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:461:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:837:1987":{"id":"0:837:1987","crate_id":0,"name":"unlocked","span":{"filename":"lock_api/src/rwlock.rs","begin":[1545,4],"end":[1555,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1109:668":{"id":"0:1109:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[2692,4],"end":[2694,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:2617-0:1215:218":{"id":"a:1:2741:2617-0:1215:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:924:588":{"id":"0:924:588","crate_id":0,"name":"drop","span":{"filename":"lock_api/src/rwlock.rs","begin":[1843,4],"end":[1848,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:2617-0:9:1696":{"id":"a:1:2741:2617-0:9:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:9:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5644-0:1183:1978":{"id":"b:5:5644-0:1183:1978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:712:2396":{"id":"0:712:2396","crate_id":0,"name":"upgradable_read","span":{"filename":"lock_api/src/rwlock.rs","begin":[1010,4],"end":[1014,5]},"visibility":"public","docs":"Locks this `RwLock` with upgradable read access, blocking the current thread\nuntil it can be acquired.\n\nThe calling thread will be blocked until there are no more writers or other\nupgradable reads which hold the lock. There may be other readers currently\ninside the lock when this method returns.\n\nReturns an RAII guard which will release this thread's shared access\nonce it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:2617-0:295:2049":{"id":"a:1:2741:2617-0:295:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:605:2207":{"id":"0:605:2207","crate_id":0,"name":"RawRwLockRecursiveTimed","span":{"filename":"lock_api/src/rwlock.rs","begin":[203,0],"end":[211,1]},"visibility":"public","docs":"Additional methods for RwLocks which support recursive read locks and timeouts.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:606:2210","0:607:2211"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockRecursive","id":"0:602:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockTimed","id":"0:595:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:87:1874":{"id":"0:87:1874","crate_id":0,"name":"try_lock_until","span":{"filename":"lock_api/src/mutex.rs","begin":[377,4],"end":[384,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:40:1867","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:316:1836":{"id":"0:316:1836","crate_id":0,"name":"try_lock","span":{"filename":"lock_api/src/remutex.rs","begin":[120,4],"end":[122,5]},"visibility":"public","docs":"Attempts to acquire this mutex without blocking. Returns `true`\nif the lock was successfully acquired and `false` otherwise.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1057:588":{"id":"0:1057:588","crate_id":0,"name":"drop","span":{"filename":"lock_api/src/rwlock.rs","begin":[2541,4],"end":[2546,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1203:1698":{"id":"0:1203:1698","crate_id":0,"name":"remutex","span":{"filename":"lock_api/src/remutex.rs","begin":[801,4],"end":[801,41]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:903:2245":{"id":"0:903:2245","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"lock_api/src/rwlock.rs","begin":[1761,4],"end":[1775,5]},"visibility":"public","docs":"Atomically downgrades a write lock into an upgradable read lock without allowing any\nwriters to take exclusive access of the lock in the meantime.\n\nThis is functionally identical to the `downgrade_to_upgradable` method on [`RwLockWriteGuard`].","links":{"`RwLockWriteGuard`":"0:1230:219"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218":{"id":"0:218","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[835,0],"end":[885,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:222:859","0:225:1983"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12131:30164":{"id":"1:12131:30164","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39552:24451","Self::is_ascii":"1:12130:30163"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39552:24451","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:731:694":{"id":"0:731:694","crate_id":0,"name":"from","span":{"filename":"lock_api/src/rwlock.rs","begin":[1158,4],"end":[1160,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[355,0],"end":[418,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexTimed","id":"0:40:1867","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:86:1872","0:87:1874","0:88:1947","0:89:1950"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12027:27036":{"id":"1:12027:27036","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:669:2310":{"id":"0:669:2310","crate_id":0,"name":"force_unlock_write","span":{"filename":"lock_api/src/rwlock.rs","begin":[551,4],"end":[553,5]},"visibility":"public","docs":"Forcibly unlocks a write lock.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockWriteGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockWriteGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is write-unlocked when not write-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:6:1694":{"id":"b:1:3319-0:6:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:6:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:295:2049":{"id":"b:1:2248-0:295:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:826":{"id":"0:826","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1484,0],"end":[1556,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:830:1699","0:831:859","0:834:1983","0:837:1987"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1158":{"id":"0:1158","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2835,0],"end":[2841,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1162:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2248-0:333:2077":{"id":"b:1:2248-0:333:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:588:2168":{"id":"0:588:2168","crate_id":0,"name":"RawRwLockFair","span":{"filename":"lock_api/src/rwlock.rs","begin":[107,0],"end":[149,1]},"visibility":"public","docs":"Additional methods for RwLocks which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:589:2170","0:590:2172","0:591:2176","0:592:2180"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:1110":{"id":"0:1110","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2698,0],"end":[2701,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"owning_ref\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StableDeref","id":"22:6:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:1268:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12020:31495":{"id":"1:12020:31495","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:2687-0:1183:1978":{"id":"a:1:8249:2687-0:1183:1978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:677:2339":{"id":"0:677:2339","crate_id":0,"name":"try_write_arc","span":{"filename":"lock_api/src/rwlock.rs","begin":[655,4],"end":[662,5]},"visibility":"public","docs":"Attempts to lock this `RwLock` with writ access, through an `Arc`.\n\nThis method is similar to the `try_write` method; however, it requires the `RwLock` to be inside of an\n`Arc` and the resulting write guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:6:18-0:625:217":{"id":"b:6:18-0:625:217","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:45:166":{"id":"b:1:2553-0:45:166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:899:2186":{"id":"0:899:2186","crate_id":0,"name":"downgrade","span":{"filename":"lock_api/src/rwlock.rs","begin":[1738,4],"end":[1752,5]},"visibility":"public","docs":"Atomically downgrades a write lock into a read lock without allowing any\nwriters to take exclusive access of the lock in the meantime.\n\nThis is functionally equivalent to the `downgrade` method on [`RwLockWriteGuard`].","links":{"`RwLockWriteGuard`":"0:1230:219"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5644-0:1215:218":{"id":"b:5:5644-0:1215:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:961:2486":{"id":"0:961:2486","crate_id":0,"name":"with_upgraded","span":{"filename":"lock_api/src/rwlock.rs","begin":[2021,4],"end":[2034,5]},"visibility":"public","docs":"First, atomically upgrades an upgradable read lock lock into an exclusive write lock,\nblocking the current thread until it can be acquired.\n\nThen, calls the provided closure with an exclusive reference to the lock's data.\n\nFinally, atomically downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`upgrade` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"Ret"},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:814:588":{"id":"0:814:588","crate_id":0,"name":"drop","span":{"filename":"lock_api/src/rwlock.rs","begin":[1451,4],"end":[1456,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1893":{"id":"0:68:1893","crate_id":0,"name":"guard","span":{"filename":"lock_api/src/mutex.rs","begin":[196,4],"end":[201,5]},"visibility":{"restricted":{"parent":"0:13:1697","path":"::mutex"}},"docs":"# Safety\n\nThe lock must be held when calling this method.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[830,0],"end":[833,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:1825","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:681:2341":{"id":"0:681:2341","crate_id":0,"name":"force_unlock_read_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[678,4],"end":[680,5]},"visibility":"public","docs":"Forcibly unlocks a read lock using a fair unlock procotol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockReadGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockReadGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is read-unlocked when not read-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1250:860":{"id":"0:1250:860","crate_id":0,"name":"marker","span":{"filename":"lock_api/src/rwlock.rs","begin":[1871,4],"end":[1871,48]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"PhantomData","id":"1:2706:1810","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:577:2148","args":null}}}]}}],"bindings":[]}}}}}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[568,0],"end":[580,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"serde\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Serialize","id":"23:1802:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Serialize","id":"23:1802:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:410:1955"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:467:668":{"id":"0:467:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/remutex.rs","begin":[773,4],"end":[775,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:581:2153":{"id":"0:581:2153","crate_id":0,"name":"try_lock_shared","span":{"filename":"lock_api/src/rwlock.rs","begin":[53,4],"end":[53,38]},"visibility":"default","docs":"Attempts to acquire a shared lock without blocking.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:912":{"id":"0:912","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1824,0],"end":[1830,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:915:230","0:916:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:682:2343":{"id":"0:682:2343","crate_id":0,"name":"force_unlock_write_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[694,4],"end":[696,5]},"visibility":"public","docs":"Forcibly unlocks a write lock using a fair unlock procotol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockWriteGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockWriteGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is write-unlocked when not write-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:732":{"id":"0:732","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1163,0],"end":[1181,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:735:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1132":{"id":"0:1132","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2779,0],"end":[2800,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:588:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1136:1858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:369:62":{"id":"0:369:62","crate_id":0,"name":"raw","span":{"filename":"lock_api/src/remutex.rs","begin":[382,4],"end":[384,5]},"visibility":"public","docs":"Returns the underlying raw mutex object.\n\nNote that you will most likely need to import the `RawMutex` trait from\n`lock_api` to be able to call functions on the raw mutex.\n\n# Safety\n\nThis method is unsafe because it allows unlocking a mutex while\nstill holding a reference to a `ReentrantMutexGuard`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12113:30310":{"id":"1:12113:30310","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"7:11888:419","self::pattern":"1:11712:7297"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:611:2224":{"id":"0:611:2224","crate_id":0,"name":"unlock_upgradable","span":{"filename":"lock_api/src/rwlock.rs","begin":[231,4],"end":[231,39]},"visibility":"default","docs":"Releases an upgradable lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:1062":{"id":"0:1062","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2559,0],"end":[2565,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1065:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:542":{"id":"0:542","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[1019,0],"end":[1025,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:547:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5401:31404":{"id":"5:5401:31404","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12133:30167"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:625:217":{"id":"b:1:3319-0:625:217","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:308":{"id":"0:308","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[77,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:295:2049","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["0:311:1828","0:312:2054","0:314:1833","0:316:1836","0:318:1844","0:319:1846","0:320:2065"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2553-0:1190:2083":{"id":"b:1:2553-0:1190:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:617:2241":{"id":"0:617:2241","crate_id":0,"name":"RawRwLockUpgradeDowngrade","span":{"filename":"lock_api/src/rwlock.rs","begin":[276,0],"end":[290,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and lock\ndowngrading.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:618:2243","0:619:2245"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockDowngrade","id":"0:593:2183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:630":{"id":"0:630","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[337,0],"end":[348,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"serde\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Serialize","id":"23:1802:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Serialize","id":"23:1802:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:633:1955"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1118":{"id":"0:1118","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2722,0],"end":[2725,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:577:2148","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:1275:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1172:1697":{"id":"0:1172:1697","crate_id":0,"name":"mutex","span":{"filename":"lock_api/src/mutex.rs","begin":[491,4],"end":[491,26]},"visibility":{"restricted":{"parent":"0:13:1697","path":"::mutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:994":{"id":"0:994","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2193,0],"end":[2199,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:998:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:592:2180":{"id":"0:592:2180","crate_id":0,"name":"bump_exclusive","span":{"filename":"lock_api/src/rwlock.rs","begin":[145,4],"end":[148,5]},"visibility":"default","docs":"Temporarily yields an exclusive lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_exclusive_fair` followed\nby `lock_exclusive`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:430:859":{"id":"0:430:859","crate_id":0,"name":"map","span":{"filename":"lock_api/src/remutex.rs","begin":[629,4],"end":[641,5]},"visibility":"public","docs":"Makes a new `MappedReentrantMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `ReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5644-0:1207:2122":{"id":"b:5:5644-0:1207:2122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:536":{"id":"0:536","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[1007,0],"end":[1017,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:541:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:977:2498":{"id":"0:977:2498","crate_id":0,"name":"try_with_upgraded_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[2124,4],"end":[2141,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade_for` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:6:18-0:45:166":{"id":"b:6:18-0:45:166","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12049:30309":{"id":"1:12049:30309","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"7:11888:419","self::pattern":"1:11712:7297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:7312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:2686-0:1183:1978":{"id":"a:1:8250:2686-0:1183:1978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:23:1317-0:45:166":{"id":"b:23:1317-0:45:166","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.143/src/de/mod.rs","begin":[605,0],"end":[605,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Deserialize","id":"23:1309:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'de"}],"bindings":[]}}},"generic_params":[{"name":"'de","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DeserializeOwned","id":"23:1315:23492","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:728":{"id":"0:728","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1156,0],"end":[1161,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:731:694"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:625:217":{"id":"0:625:217","crate_id":0,"name":"RwLock","span":{"filename":"lock_api/src/rwlock.rs","begin":[330,0],"end":[333,1]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:628:62","0:629:1884"],"fields_stripped":false}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:647","0:652","0:656","0:678","0:683","0:694","0:701","0:708","0:717","a:1:8249:2687-0:625:217","a:1:8250:2686-0:625:217","a:1:2741:2617-0:625:217","b:1:2542-0:625:217","b:1:2545-0:625:217","b:1:2248-0:625:217","b:1:2553-0:625:217","b:1:2251-0:625:217","b:1:2538-0:625:217","b:1:3319-0:625:217","b:1:2548-0:625:217","b:6:18-0:625:217","b:23:1317-0:625:217","0:732","0:728","0:635","0:641","0:724","0:644","0:630"]}}},"0:956":{"id":"0:956","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1990,0],"end":[2060,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeDowngrade","id":"0:617:2241","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:960:2186","0:961:2486","0:964:2492"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:352:1887":{"id":"0:352:1887","crate_id":0,"name":"into_inner","span":{"filename":"lock_api/src/remutex.rs","begin":[264,4],"end":[266,5]},"visibility":"public","docs":"Consumes this mutex, returning the underlying data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:2617-0:45:166":{"id":"a:1:2741:2617-0:45:166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:43:1872":{"id":"0:43:1872","crate_id":0,"name":"try_lock_for","span":{"filename":"lock_api/src/mutex.rs","begin":[128,4],"end":[128,60]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:40:1867","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:6:18-0:333:2077":{"id":"b:6:18-0:333:2077","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:6:18-0:1199:2103":{"id":"b:6:18-0:1199:2103","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/owning_ref-0.4.1/src/lib.rs","begin":[281,0],"end":[281,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Erased","id":"6:17:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:607:2211":{"id":"0:607:2211","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[210,4],"end":[210,78]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:601:2194":{"id":"0:601:2194","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[184,4],"end":[184,71]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2251-0:1190:2083":{"id":"b:1:2251-0:1190:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:1190:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2253:23607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:238:552":{"id":"0:238:552","crate_id":0,"name":"deref","span":{"filename":"lock_api/src/mutex.rs","begin":[913,4],"end":[915,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2701:228-0:1257:2400":{"id":"a:1:2701:228-0:1257:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:678":{"id":"0:678","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[665,0],"end":[697,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:588:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:681:2341","0:682:2343"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12035:6269":{"id":"1:12035:6269","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"7:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43327:6261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:312:2054":{"id":"0:312:2054","crate_id":0,"name":"lock_internal","span":{"filename":"lock_api/src/remutex.rs","begin":[88,4],"end":[106,5]},"visibility":{"restricted":{"parent":"0:264:1698","path":"::remutex"}},"docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["try_lock",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:865":{"id":"0:865","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1663,0],"end":[1668,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:2911:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:869:554"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2548-0:1238:2323":{"id":"b:1:2548-0:1238:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:614:2232":{"id":"0:614:2232","crate_id":0,"name":"RawRwLockUpgradeFair","span":{"filename":"lock_api/src/rwlock.rs","begin":[251,0],"end":[272,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and fair\nunlocking.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:615:2234","0:616:2238"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:588:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:1032:2492":{"id":"0:1032:2492","crate_id":0,"name":"try_with_upgraded","span":{"filename":"lock_api/src/rwlock.rs","begin":[2394,4],"end":[2407,5]},"visibility":"public","docs":"First, tries to atomically upgrade an upgradable read lock into an exclusive write lock.\n\nIf the access could not be granted at this time, then `None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:766":{"id":"0:766","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1323,0],"end":[1329,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:770:230","0:771:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8250:2686-0:1223:2321":{"id":"a:1:8250:2686-0:1223:2321","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:12130:30163":{"id":"1:12130:30163","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:1955":{"id":"0:109:1955","crate_id":0,"name":"serialize","span":{"filename":"lock_api/src/mutex.rs","begin":[461,4],"end":[466,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["serializer",{"generic":"S"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Ok","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"","id":"23:1805:1818","args":null}}}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"","id":"23:1805:1818","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Serializer","id":"23:1805:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:1176:1931":{"id":"b:1:2553-0:1176:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8250:2686-0:1215:218":{"id":"a:1:8250:2686-0:1215:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:1039:2255":{"id":"0:1039:2255","crate_id":0,"name":"try_upgrade_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[2442,4],"end":[2459,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\nthe current guard is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:659:2272":{"id":"0:659:2272","crate_id":0,"name":"read_guard","span":{"filename":"lock_api/src/rwlock.rs","begin":[416,4],"end":[421,5]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":"# Safety\n\nThe lock must be held when calling this method.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:690:2357":{"id":"0:690:2357","crate_id":0,"name":"try_read_arc_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[770,4],"end":[780,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with read access until a timeout is reached, through an `Arc`.\n\nThis method is similar to the `try_read_for` method; however, it requires the `RwLock` to be inside of an\n`Arc` and the resulting read guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:2617-0:1223:2321":{"id":"a:1:2741:2617-0:1223:2321","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1004":{"id":"0:1004","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2210,0],"end":[2213,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"owning_ref\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StableDeref","id":"22:6:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:496":{"id":"0:496","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[876,0],"end":[882,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcReentrantMutexGuard","id":"0:1199:2103","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:500:230","0:501:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:802:2005":{"id":"0:802:2005","crate_id":0,"name":"unlocked_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[1415,4],"end":[1425,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is functionally identical to the `unlocked_fair` method on [`RwLockReadGuard`].","links":{"`RwLockReadGuard`":"0:1215:218"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:1858":{"id":"0:192:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/mutex.rs","begin":[744,4],"end":[753,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nThis is functionally identical to the `unlock_fair` method on [`MutexGuard`].","links":{"`MutexGuard`":"0:1168:167"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[226,0],"end":[229,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:45:166":{"id":"b:1:3319-0:45:166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:520:1983":{"id":"0:520:1983","crate_id":0,"name":"try_map","span":{"filename":"lock_api/src/remutex.rs","begin":[951,4],"end":[969,5]},"visibility":"public","docs":"Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `MappedReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedReentrantMutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1241:1699":{"id":"0:1241:1699","crate_id":0,"name":"rwlock","span":{"filename":"lock_api/src/rwlock.rs","begin":[1704,4],"end":[1704,29]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:1093:230":{"id":"0:1093:230","crate_id":0,"name":"Target","span":{"filename":"lock_api/src/rwlock.rs","begin":[2664,4],"end":[2664,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12096:31506":{"id":"1:12096:31506","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11712:7297","`DoubleEndedIterator`":"1:7240:121","prim@char":"7:11888:419","str::match_indices":"1:12093:31505"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43525:6504","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:7312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1016:2229":{"id":"0:1016:2229","crate_id":0,"name":"try_upgrade","span":{"filename":"lock_api/src/rwlock.rs","begin":[2272,4],"end":[2286,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive write lock.\n\nIf the access could not be granted at this time, then the current guard is returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:694":{"id":"0:97:694","crate_id":0,"name":"from","span":{"filename":"lock_api/src/mutex.rs","begin":[429,4],"end":[431,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:1215:218":{"id":"a:1:2684:220-0:1215:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:1215:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2248-0:1230:219":{"id":"b:1:2248-0:1230:219","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:1230:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2250:2526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:126:859":{"id":"0:126:859","crate_id":0,"name":"map","span":{"filename":"lock_api/src/mutex.rs","begin":[512,4],"end":[524,5]},"visibility":"public","docs":"Makes a new `MappedMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:62":{"id":"0:48:62","crate_id":0,"name":"raw","span":{"filename":"lock_api/src/mutex.rs","begin":[143,4],"end":[143,10]},"visibility":{"restricted":{"parent":"0:13:1697","path":"::mutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"R"}}},"0:671:1928":{"id":"0:671:1928","crate_id":0,"name":"data_ptr","span":{"filename":"lock_api/src/rwlock.rs","begin":[582,4],"end":[584,5]},"visibility":"public","docs":"Returns a raw pointer to the underlying data.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockReadGuard` or `RwLockWriteGuard` object\nalive, for example when dealing with FFI.\n\n# Safety\n\nYou must ensure that there are no data races when dereferencing the\nreturned pointer, for example if the current thread logically owns a\n`RwLockReadGuard` or `RwLockWriteGuard` but that guard has been discarded\nusing `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:593:2183":{"id":"0:593:2183","crate_id":0,"name":"RawRwLockDowngrade","span":{"filename":"lock_api/src/rwlock.rs","begin":[153,0],"end":[161,1]},"visibility":"public","docs":"Additional methods for RwLocks which support atomically downgrading an\nexclusive lock to a shared lock.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:594:2186"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:184:1697":{"id":"0:184:1697","crate_id":0,"name":"mutex","span":{"filename":"lock_api/src/mutex.rs","begin":[704,4],"end":[706,5]},"visibility":"public","docs":"Returns a reference to the `Mutex` this is guarding, contained in its `Arc`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:855:2005":{"id":"0:855:2005","crate_id":0,"name":"unlocked_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[1629,4],"end":[1639,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThe `RwLock` is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1043:2498":{"id":"0:1043:2498","crate_id":0,"name":"try_with_upgraded_for","span":{"filename":"lock_api/src/rwlock.rs","begin":[2478,4],"end":[2495,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade_for` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1828":{"id":"0:31:1828","crate_id":0,"name":"INIT","span":{"filename":"lock_api/src/mutex.rs","begin":[41,4],"end":[41,21]},"visibility":"default","docs":"Initial value for an unlocked mutex.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":null}}},"0:1003:668":{"id":"0:1003:668","crate_id":0,"name":"fmt","span":{"filename":"lock_api/src/rwlock.rs","begin":[2204,4],"end":[2206,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225:1983":{"id":"0:225:1983","crate_id":0,"name":"try_map","span":{"filename":"lock_api/src/mutex.rs","begin":[869,4],"end":[884,5]},"visibility":"public","docs":"Attempts to make a new `MappedMutexGuard` for a component of the\nlocked data. The original guard is returned if the closure returns `None`.\n\nThis operation cannot fail as the `MappedMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedMutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedMutexGuard","id":"0:1183:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:809:230":{"id":"0:809:230","crate_id":0,"name":"Target","span":{"filename":"lock_api/src/rwlock.rs","begin":[1441,4],"end":[1441,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:1015:2226":{"id":"0:1015:2226","crate_id":0,"name":"upgrade","span":{"filename":"lock_api/src/rwlock.rs","begin":[2252,4],"end":[2267,5]},"visibility":"public","docs":"Atomically upgrades an upgradable read lock lock into an exclusive write lock,\nblocking the current thread until it can be acquired.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"ArcRwLockWriteGuard","id":"0:1238:2323","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1054":{"id":"0:1054","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[2539,0],"end":[2547,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:608:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockUpgradableReadGuard","id":"0:1257:2400","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1057:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:691:2360":{"id":"0:691:2360","crate_id":0,"name":"try_read_arc_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[788,4],"end":[798,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with read access until a timeout is reached, through an `Arc`.\n\nThis method is similar to the `try_read_until` method; however, it requires the `RwLock` to be inside of\nan `Arc` and the resulting read guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:333:2077":{"id":"b:1:2548-0:333:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:368:1918":{"id":"0:368:1918","crate_id":0,"name":"force_unlock","span":{"filename":"lock_api/src/remutex.rs","begin":[368,4],"end":[370,5]},"visibility":"public","docs":"Forcibly unlocks the mutex.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `ReentrantMutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:625:217":{"id":"b:1:2548-0:625:217","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2542-0:1176:1931":{"id":"b:1:2542-0:1176:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12056:2952":{"id":"1:12056:2952","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41396:179","prim@char":"7:11888:419","self::pattern":"1:11712:7297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:7312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12010":{"id":"1:12010","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12011:811","1:12012:2953","1:12013:31492","1:12014:31493","1:12016:31494","1:12019:30160","1:12020:31495","1:12021:314","1:12022:30272","1:12023:1910","1:12025:1909","1:12027:27036","1:12029:27037","1:12031:31496","1:12032:31497","1:12033:30291","1:12034:30292","1:12035:6269","1:12036:6518","1:12037:6086","1:12038:26355","1:12039:26346","1:12040:31498","1:12041:31499","1:12042:26360","1:12043:24091","1:12046:30308","1:12049:30309","1:12052:2993","1:12056:2952","1:12060:30299","1:12063:26350","1:12066:30302","1:12069:31500","1:12072:31501","1:12075:30304","1:12078:30306","1:12081:31502","1:12084:31503","1:12087:2568","1:12090:31504","1:12093:31505","1:12096:31506","1:12099:31507","1:12101:31508","1:12103:31509","1:12105:31510","1:12106:31511","1:12107:31512","1:12110:31513","1:12113:30310","1:12116:30311","1:12119:31514","1:12122:31515","1:12125:31516","1:12128:31517","1:12130:30163","1:12131:30164","1:12132:30166","1:12133:30167","1:12134:30168","1:12135:31518","1:12137:7183","1:12138:31519"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:908:2005":{"id":"0:908:2005","crate_id":0,"name":"unlocked_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[1799,4],"end":[1809,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is functionally equivalent to the `unlocked_fair` method on [`RwLockWriteGuard`].","links":{"`RwLockWriteGuard`":"0:1230:219"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1979","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12022:30272":{"id":"1:12022:30272","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"7:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[495,0],"end":[495,96]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:1168:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:633:1955":{"id":"0:633:1955","crate_id":0,"name":"serialize","span":{"filename":"lock_api/src/rwlock.rs","begin":[342,4],"end":[347,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["serializer",{"generic":"S"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Ok","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"","id":"23:1805:1818","args":null}}}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"","id":"23:1805:1818","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Serializer","id":"23:1805:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:819":{"id":"0:819","crate_id":0,"name":null,"span":{"filename":"lock_api/src/rwlock.rs","begin":[1467,0],"end":[1471,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:577:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:822:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:699:2374":{"id":"0:699:2374","crate_id":0,"name":"read_arc_recursive","span":{"filename":"lock_api/src/rwlock.rs","begin":[886,4],"end":[890,5]},"visibility":"public","docs":"Locks this `RwLock` with shared read access, through an `Arc`.\n\nThis method is similar to the `read_recursive` method; however, it requires the `RwLock` to be inside of\nan `Arc` and the resulting read guard has no lifetime requirements.","links":{},"attrs":["#[cfg(feature = \"arc_lock\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"5:5798:70","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"ArcRwLockReadGuard","id":"0:1223:2321","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:628:62":{"id":"0:628:62","crate_id":0,"name":"raw","span":{"filename":"lock_api/src/rwlock.rs","begin":[331,4],"end":[331,10]},"visibility":{"restricted":{"parent":"0:560:1699","path":"::rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"R"}}},"0:202":{"id":"0:202","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[793,0],"end":[798,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"arc_lock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:2911:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ArcMutexGuard","id":"0:1176:1931","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:205:554"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:721:2409":{"id":"0:721:2409","crate_id":0,"name":"try_upgradable_read_until","span":{"filename":"lock_api/src/rwlock.rs","begin":[1100,4],"end":[1110,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with upgradable read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:595:2188","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:1245:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1190:2083":{"id":"0:1190:2083","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"lock_api/src/remutex.rs","begin":[604,0],"end":[607,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1195:1698","0:1196:860"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:424","0:439","a:1:8249:2687-0:1190:2083","a:1:8250:2686-0:1190:2083","a:1:2684:220-0:1190:2083","a:1:2741:2617-0:1190:2083","b:1:2542-0:1190:2083","b:1:2248-0:1190:2083","b:1:2553-0:1190:2083","b:1:2251-0:1190:2083","b:1:2538-0:1190:2083","b:1:3319-0:1190:2083","b:1:2548-0:1190:2083","b:5:5644-0:1190:2083","b:6:18-0:1190:2083","0:456","0:474","0:449","0:468","0:419","0:462"]}}},"0:529":{"id":"0:529","crate_id":0,"name":null,"span":{"filename":"lock_api/src/remutex.rs","begin":[997,0],"end":[1005,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:292:2036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:1207:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:534:230","0:535:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12078:30306":{"id":"1:12078:30306","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"7:11888:419","str::splitn":"1:12075:30304","self::pattern":"1:11712:7297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43479:6254","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:7312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:429:1698":{"id":"0:429:1698","crate_id":0,"name":"remutex","span":{"filename":"lock_api/src/remutex.rs","begin":[616,4],"end":[618,5]},"visibility":"public","docs":"Returns a reference to the original `ReentrantMutex` object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"ReentrantMutex","id":"0:333:2077","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:461:588":{"id":"0:461:588","crate_id":0,"name":"drop","span":{"filename":"lock_api/src/remutex.rs","begin":[762,4],"end":[767,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:1697":{"id":"0:125:1697","crate_id":0,"name":"mutex","span":{"filename":"lock_api/src/mutex.rs","begin":[499,4],"end":[501,5]},"visibility":"public","docs":"Returns a reference to the original `Mutex` object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"lock_api/src/mutex.rs","begin":[470,0],"end":[481,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"serde\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'de","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:30:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Deserialize","id":"23:1309:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'de"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["deserialize_in_place"],"trait":{"name":"Deserialize","id":"23:1309:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'de"}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:45:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:115:1959"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:801:1858":{"id":"0:801:1858","crate_id":0,"name":"unlock_fair","span":{"filename":"lock_api/src/rwlock.rs","begin":[1400,4],"end":[1409,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nThis is functionally identical to the `unlock_fair` method on [`RwLockReadGuard`].","links":{"`RwLockReadGuard`":"0:1215:218"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:2686-0:625:217":{"id":"a:1:8250:2686-0:625:217","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:625:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:12021:314":{"id":"1:12021:314","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12022:30272","`u8`":"7:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12110:31513":{"id":"1:12110:31513","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"7:11888:419","self::pattern":"1:11712:7297"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:6243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1141:230":{"id":"0:1141:230","crate_id":0,"name":"Target","span":{"filename":"lock_api/src/rwlock.rs","begin":[2803,4],"end":[2803,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}}},"paths":{"0:295:2049":{"crate_id":0,"path":["lock_api","remutex","RawReentrantMutex"],"kind":"struct"},"19:12902:5208":{"crate_id":19,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"7:10226:3656":{"crate_id":7,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"7:6482:4170":{"crate_id":7,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"19:10798:19631":{"crate_id":19,"path":["object","read","ObjectKind"],"kind":"enum"},"1:47610:6633":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:44283:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:9813:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"8:4288:16819":{"crate_id":8,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"19:13791:5462":{"crate_id":19,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"8:7275:18336":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"7:7509:3457":{"crate_id":7,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"7:1071:5978":{"crate_id":7,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"7:10314:6146":{"crate_id":7,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"8:6628:14253":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"19:9917:3774":{"crate_id":19,"path":["object","read","elf","version","Version"],"kind":"struct"},"20:766:23481":{"crate_id":20,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"19:13461:5355":{"crate_id":19,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"8:1682:14303":{"crate_id":8,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"18:4789:5540":{"crate_id":18,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:44364:4184":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:202:12676":{"crate_id":16,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"19:11391:3800":{"crate_id":19,"path":["object","elf","Sym64"],"kind":"struct"},"23:5690:36503":{"crate_id":23,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"18:5944:5584":{"crate_id":18,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"7:7798:3944":{"crate_id":7,"path":["std","fs","FileTimes"],"kind":"struct"},"5:1454:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:4005:3477":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:7029:5731":{"crate_id":18,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"19:13488:5362":{"crate_id":19,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"7:8854:12964":{"crate_id":7,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:2817:2642":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:2800:2639":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"23:3074:2902":{"crate_id":23,"path":["serde","__private","ser","content","SerializeSeq"],"kind":"struct"},"19:13821:5470":{"crate_id":19,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"19:13316:5316":{"crate_id":19,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"19:12293:5039":{"crate_id":19,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"7:8337:6135":{"crate_id":7,"path":["std","path","Prefix"],"kind":"enum"},"7:7846:6104":{"crate_id":7,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"23:2905:36358":{"crate_id":23,"path":["serde","__private","ser","content","SerializeStructVariantAsMapValue"],"kind":"struct"},"18:4037:5527":{"crate_id":18,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:42174:3022":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"19:13865:5477":{"crate_id":19,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"18:8156:3895":{"crate_id":18,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:7411:3832":{"crate_id":18,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:2932:1979":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"8:6668:14230":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"23:2357:4438":{"crate_id":23,"path":["serde","__private","de","content","SeqDeserializer"],"kind":"struct"},"1:2753:2630":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"8:6578:17950":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:12512:3447":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"20:491:4487":{"crate_id":20,"path":["memchr","cow","Imp"],"kind":"struct"},"23:8234:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"1:11535:6248":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"19:10545:4544":{"crate_id":19,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:2087:6190":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:7711:5826":{"crate_id":18,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:2812:2641":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"8:562:13382":{"crate_id":8,"path":["libc","unix","linger"],"kind":"struct"},"8:4466:16836":{"crate_id":8,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:3152:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:2161:3125":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"8:4392:16828":{"crate_id":8,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"23:6195:36507":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","SeqInPlaceVisitor"],"kind":"struct"},"13:821:5973":{"crate_id":13,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:3749:5522":{"crate_id":18,"path":["gimli","constants","DwSect"],"kind":"struct"},"8:482:13373":{"crate_id":8,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:4110:2612":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:4761:389":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"7:1577:5983":{"crate_id":7,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:2515:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"23:6288:36507":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","SeqInPlaceVisitor"],"kind":"struct"},"1:32056:6099":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"19:13698:5434":{"crate_id":19,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:43631:6508":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"19:11641:4907":{"crate_id":19,"path":["object","elf","HashHeader"],"kind":"struct"},"5:1995:3671":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"19:9545:4626":{"crate_id":19,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:30288:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"8:5995:17539":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:44100:7309":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"7:10835:4152":{"crate_id":7,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"19:11844:4955":{"crate_id":19,"path":["object","macho","MachHeader32"],"kind":"struct"},"7:5499:12949":{"crate_id":7,"path":["std","process","exit"],"kind":"function"},"18:8090:5881":{"crate_id":18,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:45662:6552":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"19:10026:4699":{"crate_id":19,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"23:6308:36500":{"crate_id":23,"path":["serde","de","impls","deserialize","SeqVisitor"],"kind":"struct"},"1:44326:4185":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"18:6327:3873":{"crate_id":18,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"7:4679:12878":{"crate_id":7,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:21107:12826":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:41521:2857":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"23:850:36659":{"crate_id":23,"path":["serde","de","impls","CStringVisitor"],"kind":"struct"},"18:6717:5693":{"crate_id":18,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:41368:4193":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"7:5764:3442":{"crate_id":7,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"8:4857:16878":{"crate_id":8,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"19:13024:5255":{"crate_id":19,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:43236:6493":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:11726:4516":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"19:10705:4784":{"crate_id":19,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"20:590:4492":{"crate_id":20,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"7:1931:653":{"crate_id":7,"path":["std","ffi"],"kind":"module"},"7:8800:2958":{"crate_id":7,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:41538:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"7:4104:12889":{"crate_id":7,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:45459:6544":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"13:1126:5979":{"crate_id":13,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"8:4743:16863":{"crate_id":8,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:43173:3679":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"8:4767:16866":{"crate_id":8,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:9985:3268":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"7:8147:6114":{"crate_id":7,"path":["std","io","Split"],"kind":"struct"},"18:6520:5655":{"crate_id":18,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"0:1183:1978":{"crate_id":0,"path":["lock_api","mutex","MappedMutexGuard"],"kind":"struct"},"18:7317:35730":{"crate_id":18,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"18:7837:5838":{"crate_id":18,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:12295:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:2684:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"19:9839:4680":{"crate_id":19,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"23:1320:23493":{"crate_id":23,"path":["serde","de","DeserializeSeed"],"kind":"trait"},"0:1245:2391":{"crate_id":0,"path":["lock_api","rwlock","RwLockUpgradableReadGuard"],"kind":"struct"},"23:7202:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"5:5712:3497":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"7:6552:2083":{"crate_id":7,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"0:6:1694":{"crate_id":0,"path":["lock_api","GuardSend"],"kind":"struct"},"5:3688:3671":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"23:5137:4438":{"crate_id":23,"path":["serde","de","value","SeqDeserializer"],"kind":"struct"},"8:5935:17533":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"7:7665:3930":{"crate_id":7,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"23:2534:35826":{"crate_id":23,"path":["serde","__private","de","content","SeqRefDeserializer"],"kind":"struct"},"1:39302:2657":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:40424:4503":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:41911:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:2967:18702":{"crate_id":18,"path":["gimli","common","SectionId"],"kind":"enum"},"23:3920:4446":{"crate_id":23,"path":["serde","de","value","U8Deserializer"],"kind":"struct"},"19:3266:4543":{"crate_id":19,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:23037:2788":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"20:599:35747":{"crate_id":20,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"19:11471:4067":{"crate_id":19,"path":["object","elf","Rela64"],"kind":"struct"},"7:618:6043":{"crate_id":7,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:2116:3963":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:2749:2621":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:1756:3143":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:3129:29947":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"8:4398:16670":{"crate_id":8,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"7:3782:4159":{"crate_id":7,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:5642:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:2169:32268":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"23:2600:36658":{"crate_id":23,"path":["serde","__private","de","content","InternallyTaggedUnitVisitor"],"kind":"struct"},"18:7697:3892":{"crate_id":18,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:5528:6222":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"7:6332:1953":{"crate_id":7,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"7:1589:5985":{"crate_id":7,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:43525:6504":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:1467:1811":{"crate_id":1,"path":["core","mem"],"kind":"module"},"7:11461:33817":{"crate_id":7,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"19:13506:5365":{"crate_id":19,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"7:8960:3947":{"crate_id":7,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"23:3122:2906":{"crate_id":23,"path":["serde","__private","ser","content","SerializeMap"],"kind":"struct"},"7:8171:12859":{"crate_id":7,"path":["std","net","Shutdown"],"kind":"enum"},"19:10516:4763":{"crate_id":19,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"23:7904:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"0:1223:2321":{"crate_id":0,"path":["lock_api","rwlock","ArcRwLockReadGuard"],"kind":"struct"},"18:3782:5523":{"crate_id":18,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:21116:3985":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:2701:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"23:2198:35922":{"crate_id":23,"path":["serde","__private","de","content","TagOrContentFieldVisitor"],"kind":"struct"},"1:9370:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"18:7572:35731":{"crate_id":18,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:42421:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"8:7497:17047":{"crate_id":8,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:1667:1087":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:9142:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:43245:3680":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"13:816:5981":{"crate_id":13,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"7:1785:6052":{"crate_id":7,"path":["std","env","VarsOs"],"kind":"struct"},"1:9153:3021":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"23:597:35933":{"crate_id":23,"path":["serde","de","value","private","UnitOnly"],"kind":"struct"},"8:4898:16882":{"crate_id":8,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"19:420:4531":{"crate_id":19,"path":["object","read","any","Section"],"kind":"struct"},"19:8971:129":{"crate_id":19,"path":["object","read","any","File"],"kind":"struct"},"20:707:4516":{"crate_id":20,"path":["memchr","memmem","Searcher"],"kind":"struct"},"7:9062:4176":{"crate_id":7,"path":["std","time","SystemTime"],"kind":"struct"},"5:7044:2958":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"7:9120:33785":{"crate_id":7,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:2822:2643":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"7:10422:6062":{"crate_id":7,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"19:9876:4586":{"crate_id":19,"path":["object","read","elf","note","Note"],"kind":"struct"},"7:3292:12849":{"crate_id":7,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"7:9043:1870":{"crate_id":7,"path":["std","time","Instant"],"kind":"struct"},"8:5785:17524":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:2985:2655":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"19:11800:4946":{"crate_id":19,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"8:4952:16888":{"crate_id":8,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"19:9443:4650":{"crate_id":19,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"23:1315:23492":{"crate_id":23,"path":["serde","de","DeserializeOwned"],"kind":"trait"},"7:1048:5737":{"crate_id":7,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"7:7257:32891":{"crate_id":7,"path":["std","panicking","Hook"],"kind":"enum"},"19:12033:4984":{"crate_id":19,"path":["object","macho","DylibCommand"],"kind":"struct"},"8:4571:16849":{"crate_id":8,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"19:12835:5153":{"crate_id":19,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"7:554:3649":{"crate_id":7,"path":["std","thread","JoinHandle"],"kind":"struct"},"8:5717:17460":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:2242:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:5798:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"13:359:3416":{"crate_id":13,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"7:4576:34404":{"crate_id":7,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:6819:5708":{"crate_id":18,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:21952:2793":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:1637:2709":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:9609:3430":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:3534:3267":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:6294:3477":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:2077:3425":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"19:8521:19626":{"crate_id":19,"path":["object","common","FileFlags"],"kind":"enum"},"7:2344:3116":{"crate_id":7,"path":["std","fs","metadata"],"kind":"function"},"8:6057:17544":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:7164:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"23:3085:2903":{"crate_id":23,"path":["serde","__private","ser","content","SerializeTuple"],"kind":"struct"},"18:3063:4551":{"crate_id":18,"path":["gimli","arch","Arm"],"kind":"struct"},"7:10462:3463":{"crate_id":7,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"19:8788:3766":{"crate_id":19,"path":["object","endian","I16Bytes"],"kind":"struct"},"7:5385:6077":{"crate_id":7,"path":["std","process","Command"],"kind":"struct"},"5:3547:3268":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:9151:3020":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"23:7818:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"19:11946:4970":{"crate_id":19,"path":["object","macho","Section32"],"kind":"struct"},"18:2720:5509":{"crate_id":18,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"19:10897:4800":{"crate_id":19,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:47862:6638":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"19:11060:3780":{"crate_id":19,"path":["object","read","Relocation"],"kind":"struct"},"23:7590:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"8:573:13384":{"crate_id":8,"path":["libc","unix","itimerval"],"kind":"struct"},"19:10052:4704":{"crate_id":19,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:22227:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"13:1144:5980":{"crate_id":13,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"23:2690:36754":{"crate_id":23,"path":["serde","__private","de","FlatMapDeserializer"],"kind":"struct"},"7:5556:206":{"crate_id":7,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"19:11090:4809":{"crate_id":19,"path":["object","read","CompressedFileRange"],"kind":"struct"},"7:3615:12860":{"crate_id":7,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"23:2659:4433":{"crate_id":23,"path":["serde","__private","de","BorrowedStrDeserializer"],"kind":"struct"},"8:4667:16856":{"crate_id":8,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:44273:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:8250:2686":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"20:80:23469":{"crate_id":20,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"19:13678:5431":{"crate_id":19,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"12:44:3902":{"crate_id":12,"path":["adler","Adler32"],"kind":"struct"},"19:11339:3787":{"crate_id":19,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"18:6919:35729":{"crate_id":18,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:43507:6503":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:42683:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"8:532:13378":{"crate_id":8,"path":["libc","unix","hostent"],"kind":"struct"},"23:5836:36510":{"crate_id":23,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"13:60:35670":{"crate_id":13,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"7:3401:3653":{"crate_id":7,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:5035:2676":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:4007:6215":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:4047:3268":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"7:9003:3949":{"crate_id":7,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"7:3355:3437":{"crate_id":7,"path":["std","io","Guard"],"kind":"struct"},"19:11163:4819":{"crate_id":19,"path":["object","archive","AixHeader"],"kind":"struct"},"5:4818:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"19:10452:4758":{"crate_id":19,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"18:7103:4168":{"crate_id":18,"path":["gimli","read","op","Operation"],"kind":"enum"},"19:12770:5102":{"crate_id":19,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"20:0:2725":{"crate_id":20,"path":["memchr"],"kind":"module"},"7:3247:6062":{"crate_id":7,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:6981:5727":{"crate_id":18,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:6351:19562":{"crate_id":18,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"13:2060:5737":{"crate_id":13,"path":["hashbrown","set","Entry"],"kind":"enum"},"7:11308:3469":{"crate_id":7,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:6585:2966":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:46528:6589":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:7255:6209":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"7:1062:3644":{"crate_id":7,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"8:4521:16843":{"crate_id":8,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"8:4882:1001":{"crate_id":8,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"19:12019:4714":{"crate_id":19,"path":["object","macho","Dylib"],"kind":"struct"},"19:11372:3793":{"crate_id":19,"path":["object","elf","Sym32"],"kind":"struct"},"1:2469:12826":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"19:13443:5351":{"crate_id":19,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"19:12158:5000":{"crate_id":19,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"7:11913:13":{"crate_id":7,"path":["std","fn"],"kind":"primitive"},"1:20596:29249":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:47747:4202":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"19:13356:5325":{"crate_id":19,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"23:2097:35928":{"crate_id":23,"path":["serde","__private","de","content","TagOrContentVisitor"],"kind":"struct"},"1:40076:6442":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"19:11069:19634":{"crate_id":19,"path":["object","read","CompressionFormat"],"kind":"enum"},"19:9734:4675":{"crate_id":19,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:7211:2862":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"8:4875:16880":{"crate_id":8,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:42713:4002":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:40226:6450":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:2916:3697":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"19:10092:4708":{"crate_id":19,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"8:6545:13422":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"18:6474:3876":{"crate_id":18,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"8:119:13056":{"crate_id":8,"path":["libc","unix","FILE"],"kind":"enum"},"13:1561:5982":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"23:4608:4454":{"crate_id":23,"path":["serde","de","value","U128Deserializer"],"kind":"struct"},"19:12085:4990":{"crate_id":19,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:7321:3418":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"23:5534:36503":{"crate_id":23,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"8:4509:16842":{"crate_id":8,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:2746:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"18:5418:5553":{"crate_id":18,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:43184:6490":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:4260:2597":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"8:1721:12885":{"crate_id":8,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"18:7652:198":{"crate_id":18,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:7195:27374":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:40163:7210":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"18:4969:5546":{"crate_id":18,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:10165:6251":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"23:2647:4432":{"crate_id":23,"path":["serde","__private","de","StrDeserializer"],"kind":"struct"},"6:104:2733":{"crate_id":6,"path":["owning_ref","ToHandleMut"],"kind":"trait"},"19:9409:19641":{"crate_id":19,"path":["object","read","archive","Members"],"kind":"enum"},"1:40121:6447":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:45347:6539":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"7:1924:12806":{"crate_id":7,"path":["std","error","Indented"],"kind":"struct"},"1:20577:29244":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:43946:6523":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"18:5367:18673":{"crate_id":18,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:6662:5680":{"crate_id":18,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"19:12126:4996":{"crate_id":19,"path":["object","macho","ThreadCommand"],"kind":"struct"},"20:582:3994":{"crate_id":20,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"19:12483:5075":{"crate_id":19,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:2847:2649":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:6097:12677":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"18:5963:5591":{"crate_id":18,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"19:12194:5006":{"crate_id":19,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"19:247:4528":{"crate_id":19,"path":["object","read","util","DebugLen"],"kind":"struct"},"8:6587:17951":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"19:12622:3780":{"crate_id":19,"path":["object","macho","Relocation"],"kind":"struct"},"8:4751:16864":{"crate_id":8,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:180:18656":{"crate_id":17,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"8:4629:16853":{"crate_id":8,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:3184:5986":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:5847:5575":{"crate_id":18,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:6254:3866":{"crate_id":18,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"19:9683:4672":{"crate_id":19,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:8269:128":{"crate_id":18,"path":["gimli","read","Error"],"kind":"enum"},"7:5370:4155":{"crate_id":7,"path":["std","process","ChildStderr"],"kind":"struct"},"8:7230:13333":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:41332:6476":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"7:8082:3946":{"crate_id":7,"path":["std","io","util","Sink"],"kind":"struct"},"1:43301:6495":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"18:7449:5808":{"crate_id":18,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:40459:6112":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"11:325:18612":{"crate_id":11,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:2851:2650":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"7:7595:6092":{"crate_id":7,"path":["std","thread","ThreadId"],"kind":"struct"},"20:699:3742":{"crate_id":20,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"19:13777:5455":{"crate_id":19,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"23:7691:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"18:7743:3893":{"crate_id":18,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"0:37:1853":{"crate_id":0,"path":["lock_api","mutex","RawMutexFair"],"kind":"trait"},"1:5987:6224":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"7:4681:12880":{"crate_id":7,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:3157:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"23:238:4433":{"crate_id":23,"path":["serde","de","value","BorrowedStrDeserializer"],"kind":"struct"},"20:521:23482":{"crate_id":20,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:6446:3477":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"18:5677:19558":{"crate_id":18,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"13:305:35668":{"crate_id":13,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"18:2694:5508":{"crate_id":18,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:7:2727":{"crate_id":6,"path":["owning_ref","OwningRef"],"kind":"struct"},"7:3995:12872":{"crate_id":7,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:6990:2693":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:5239:12671":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"7:11886:371":{"crate_id":7,"path":["std","bool"],"kind":"primitive"},"19:11220:4831":{"crate_id":19,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"0:45:166":{"crate_id":0,"path":["lock_api","mutex","Mutex"],"kind":"struct"},"1:44092:7310":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:43327:6261":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:42433:5853":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"19:13066:5267":{"crate_id":19,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"23:3026:36332":{"crate_id":23,"path":["serde","__private","ser","content","ContentSerializer"],"kind":"struct"},"23:8411:36517":{"crate_id":23,"path":["serde","de","impls","deserialize","KindVisitor"],"kind":"struct"},"1:42705:4001":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"18:6767:5706":{"crate_id":18,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"8:4980:16891":{"crate_id":8,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"13:1859:5983":{"crate_id":13,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:40246:6452":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"23:5207:4455":{"crate_id":23,"path":["serde","de","value","SeqAccessDeserializer"],"kind":"struct"},"7:11168:6177":{"crate_id":7,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:45844:6558":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"7:7528:3459":{"crate_id":7,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:42913:23695":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:2786:5512":{"crate_id":18,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"23:2724:35789":{"crate_id":23,"path":["serde","__private","de","FlatMapAccess"],"kind":"struct"},"1:44080:7305":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:12308:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"8:4947:16887":{"crate_id":8,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:44108:7304":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"18:7467:5816":{"crate_id":18,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:41445:2957":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"19:9973:4693":{"crate_id":19,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"18:6506:5653":{"crate_id":18,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"19:10015:4698":{"crate_id":19,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"8:5032:16896":{"crate_id":8,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:43921:6522":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"19:11902:4962":{"crate_id":19,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"18:55:5866":{"crate_id":18,"path":["gimli","endianity","Endianity"],"kind":"trait"},"23:5784:36510":{"crate_id":23,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"8:1668:14302":{"crate_id":8,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"19:9218:3752":{"crate_id":19,"path":["object","read","any","SymbolTable"],"kind":"struct"},"19:12980:5250":{"crate_id":19,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"0:595:2188":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockTimed"],"kind":"trait"},"19:13411:5343":{"crate_id":19,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:43611:6116":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"8:1700:14305":{"crate_id":8,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"19:9566:4639":{"crate_id":19,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"23:1469:23496":{"crate_id":23,"path":["serde","de","MapAccess"],"kind":"trait"},"19:8858:3768":{"crate_id":19,"path":["object","endian","I64Bytes"],"kind":"struct"},"19:13376:5332":{"crate_id":19,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:41479:3260":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"19:12550:5082":{"crate_id":19,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"23:1218:7156":{"crate_id":23,"path":["serde","de","impls","deserialize","Field"],"kind":"enum"},"8:4472:16837":{"crate_id":8,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"8:547:13380":{"crate_id":8,"path":["libc","unix","pollfd"],"kind":"struct"},"8:4797:16870":{"crate_id":8,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"13:399:35671":{"crate_id":13,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"7:11225:6088":{"crate_id":7,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"19:8573:19628":{"crate_id":19,"path":["object","common","SectionFlags"],"kind":"enum"},"18:7016:4083":{"crate_id":18,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:46189:6568":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"7:9038:219":{"crate_id":7,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:45437:6543":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"19:8548:19627":{"crate_id":19,"path":["object","common","SegmentFlags"],"kind":"enum"},"0:1257:2400":{"crate_id":0,"path":["lock_api","rwlock","ArcRwLockUpgradableReadGuard"],"kind":"struct"},"18:3585:5521":{"crate_id":18,"path":["gimli","arch","X86"],"kind":"struct"},"18:7335:35734":{"crate_id":18,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"7:4414:12894":{"crate_id":7,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"8:595:13387":{"crate_id":8,"path":["libc","unix","protoent"],"kind":"struct"},"8:4546:16846":{"crate_id":8,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"7:4328:4151":{"crate_id":7,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"11:174:3919":{"crate_id":11,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"19:13082:5270":{"crate_id":19,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"8:4970:16890":{"crate_id":8,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"8:1715:14307":{"crate_id":8,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:21004:3985":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"23:7769:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"8:4590:16850":{"crate_id":8,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"19:12006:4979":{"crate_id":19,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:10130:6250":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"8:1514:14286":{"crate_id":8,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"20:727:3744":{"crate_id":20,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"7:635:6044":{"crate_id":7,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"23:5888:36510":{"crate_id":23,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"7:8134:6112":{"crate_id":7,"path":["std","io","Take"],"kind":"struct"},"1:3182:29518":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"8:1564:14293":{"crate_id":8,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"23:5576:36510":{"crate_id":23,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"19:13499:5363":{"crate_id":19,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"7:501:3425":{"crate_id":7,"path":["std","thread","PanicGuard"],"kind":"struct"},"7:4578:34406":{"crate_id":7,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"8:6685:17953":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:3142:2659":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:2827:2645":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:41454:3267":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"7:11372:4158":{"crate_id":7,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"19:9148:35741":{"crate_id":19,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"7:4176:4149":{"crate_id":7,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"23:7940:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"19:12894:5205":{"crate_id":19,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"19:10505:4762":{"crate_id":19,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"7:11901:742":{"crate_id":7,"path":["std","i16"],"kind":"primitive"},"18:6061:18674":{"crate_id":18,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"7:2215:12808":{"crate_id":7,"path":["std","fs","read_to_string"],"kind":"function"},"7:2206:129":{"crate_id":7,"path":["std","fs","File"],"kind":"struct"},"1:46416:6587":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:11783:7320":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"7:1080:5980":{"crate_id":7,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"13:768:3418":{"crate_id":13,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"0:40:1867":{"crate_id":0,"path":["lock_api","mutex","RawMutexTimed"],"kind":"trait"},"19:12098:4992":{"crate_id":19,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"23:819:36663":{"crate_id":23,"path":["serde","de","impls","StrVisitor"],"kind":"struct"},"19:10080:4707":{"crate_id":19,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"23:940:36502":{"crate_id":23,"path":["serde","de","impls","ArrayVisitor"],"kind":"struct"},"13:0:2718":{"crate_id":13,"path":["hashbrown"],"kind":"module"},"19:10580:4773":{"crate_id":19,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"23:5472:36510":{"crate_id":23,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"19:13659:5426":{"crate_id":19,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"23:2560:35794":{"crate_id":23,"path":["serde","__private","de","content","MapRefDeserializer"],"kind":"struct"},"1:47675:4200":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:5920:3818":{"crate_id":18,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"13:991:5737":{"crate_id":13,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:680:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:5468:3437":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"7:8918:6151":{"crate_id":7,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"23:365:4437":{"crate_id":23,"path":["serde","de","value","BorrowedBytesDeserializer"],"kind":"struct"},"20:624:35748":{"crate_id":20,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"7:8893:6150":{"crate_id":7,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:44376:2691":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"23:630:35923":{"crate_id":23,"path":["serde","de","value","private","SeedTupleVariant"],"kind":"struct"},"8:5077:16901":{"crate_id":8,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"18:3047:18703":{"crate_id":18,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"23:8356:36511":{"crate_id":23,"path":["serde","de","impls","deserialize","EnumVisitor"],"kind":"struct"},"1:6917:3945":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:0:1617":{"crate_id":6,"path":["owning_ref"],"kind":"module"},"18:6390:5640":{"crate_id":18,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:45681:6553":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:2312:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:20869:12386":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"19:13879:5480":{"crate_id":19,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"19:13240:5299":{"crate_id":19,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:42160:3019":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"8:541:13379":{"crate_id":8,"path":["libc","unix","iovec"],"kind":"struct"},"4:14:2591":{"crate_id":4,"path":["scopeguard","Strategy"],"kind":"trait"},"0:1176:1931":{"crate_id":0,"path":["lock_api","mutex","ArcMutexGuard"],"kind":"struct"},"23:3662:4443":{"crate_id":23,"path":["serde","de","value","I32Deserializer"],"kind":"struct"},"23:3490:4441":{"crate_id":23,"path":["serde","de","value","I8Deserializer"],"kind":"struct"},"7:5926:206":{"crate_id":7,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"7:4903:12927":{"crate_id":7,"path":["std","panic","always_abort"],"kind":"function"},"18:7293:5767":{"crate_id":18,"path":["gimli","read","op","Piece"],"kind":"struct"},"8:5959:17535":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:21787:3968":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:43935:7327":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:45822:6557":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:41711:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"19:9498:3771":{"crate_id":19,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"8:6116:16735":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"18:535:3822":{"crate_id":18,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"8:4449:16834":{"crate_id":8,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"8:1622:14299":{"crate_id":8,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"7:2387:12697":{"crate_id":7,"path":["std","io"],"kind":"module"},"1:2784:2636":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:40448:6461":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"23:7233:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"11:52:3904":{"crate_id":11,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"13:393:35674":{"crate_id":13,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"7:11889:1515":{"crate_id":7,"path":["std","unit"],"kind":"primitive"},"7:10822:6098":{"crate_id":7,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"19:8909:3769":{"crate_id":19,"path":["object","read","util","Bytes"],"kind":"struct"},"18:7588:5823":{"crate_id":18,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"19:9350:35740":{"crate_id":19,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:12542:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"8:7544:17054":{"crate_id":8,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:0:2721":{"crate_id":16,"path":["rustc_demangle"],"kind":"module"},"22:7:2756":{"crate_id":22,"path":["stable_deref_trait","CloneStableDeref"],"kind":"trait"},"1:30232:1813":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"0:264:1698":{"crate_id":0,"path":["lock_api","remutex"],"kind":"module"},"1:44347:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"8:4707:16859":{"crate_id":8,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:4568:5534":{"crate_id":18,"path":["gimli","constants","DwAccess"],"kind":"struct"},"7:8242:6125":{"crate_id":7,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"18:4400:5529":{"crate_id":18,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:5693:3840":{"crate_id":18,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"18:6558:5656":{"crate_id":18,"path":["gimli","read","line","LineRows"],"kind":"struct"},"19:9670:4671":{"crate_id":19,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:44112:3984":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"23:1861:2903":{"crate_id":23,"path":["serde","ser","SerializeTuple"],"kind":"trait"},"1:39161:2656":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"23:3834:4445":{"crate_id":23,"path":["serde","de","value","IsizeDeserializer"],"kind":"struct"},"23:2404:35812":{"crate_id":23,"path":["serde","__private","de","content","ContentRefDeserializer"],"kind":"struct"},"19:10670:4781":{"crate_id":19,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"7:2208:6054":{"crate_id":7,"path":["std","fs","DirEntry"],"kind":"struct"},"19:9826:4679":{"crate_id":19,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"19:13433:5348":{"crate_id":19,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:22392:2029":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:5380:3437":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"8:123:13057":{"crate_id":8,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:1916:3146":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"7:3983:12869":{"crate_id":7,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:43621:6507":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:44076:7302":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"18:2319:5494":{"crate_id":18,"path":["gimli","common","Encoding"],"kind":"struct"},"5:1716:3418":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"23:1239:36669":{"crate_id":23,"path":["serde","de","impls","deserialize","ResultVisitor"],"kind":"struct"},"5:7060:3967":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"7:8166:6119":{"crate_id":7,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:9961:3267":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"18:2502:5500":{"crate_id":18,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"18:5643:5563":{"crate_id":18,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"23:750:36657":{"crate_id":23,"path":["serde","de","impls","BoolVisitor"],"kind":"struct"},"1:40286:6453":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"19:9068:35742":{"crate_id":19,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:45592:6549":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:43857:6521":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"18:2616:5505":{"crate_id":18,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"7:10670:6175":{"crate_id":7,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"18:4818:5541":{"crate_id":18,"path":["gimli","constants","DwInl"],"kind":"struct"},"19:13426:5347":{"crate_id":19,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:2470:4071":{"crate_id":18,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"20:113:23471":{"crate_id":20,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"19:10555:4765":{"crate_id":19,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:2911:1812":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"19:10283:4744":{"crate_id":19,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:39192:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"5:2906:29725":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"23:640:35827":{"crate_id":23,"path":["serde","de","value","private","SeedStructVariant"],"kind":"struct"},"23:8506:23500":{"crate_id":23,"path":["serde","de","Unexpected"],"kind":"enum"},"19:11544:4878":{"crate_id":19,"path":["object","elf","Versym"],"kind":"struct"},"1:46866:6594":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"23:4264:4450":{"crate_id":23,"path":["serde","de","value","F32Deserializer"],"kind":"struct"},"19:13121:5271":{"crate_id":19,"path":["object","pe","ImageSymbol"],"kind":"struct"},"13:703:3962":{"crate_id":13,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"18:7859:19570":{"crate_id":18,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"7:8912:107":{"crate_id":7,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"19:975:4534":{"crate_id":19,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"18:7488:5819":{"crate_id":18,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"23:6123:36503":{"crate_id":23,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"0:620:2248":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockUpgradeTimed"],"kind":"trait"},"7:643:12772":{"crate_id":7,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"23:3108:2905":{"crate_id":23,"path":["serde","__private","ser","content","SerializeTupleVariant"],"kind":"struct"},"1:10092:6249":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"7:7854:4102":{"crate_id":7,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:2151:589":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:9117:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"19:12318:5042":{"crate_id":19,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:30302:24744":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"0:608:2217":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockUpgrade"],"kind":"trait"},"8:0:816":{"crate_id":8,"path":["libc"],"kind":"module"},"5:5908:3437":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"7:4112:12890":{"crate_id":7,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"19:8443:19624":{"crate_id":19,"path":["object","common","RelocationKind"],"kind":"enum"},"1:43809:6520":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"8:1609:14297":{"crate_id":8,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:2317:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"23:3332:229":{"crate_id":23,"path":["serde","actually_private","T"],"kind":"struct"},"19:10712:19739":{"crate_id":19,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"23:1176:7156":{"crate_id":23,"path":["serde","de","impls","deserialize","Field"],"kind":"enum"},"1:40347:6223":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:44088:7306":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"8:4732:16862":{"crate_id":8,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:39955:6213":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:4914:3437":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"23:7737:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"1:43674:6439":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"8:6047:17543":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:41470:2958":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"7:9098:6157":{"crate_id":7,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"8:5809:17526":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"18:8047:5876":{"crate_id":18,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:1413:3960":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"20:614:35746":{"crate_id":20,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:7224:6208":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"19:13639:5420":{"crate_id":19,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:44152:6532":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"0:560:1699":{"crate_id":0,"path":["lock_api","rwlock"],"kind":"module"},"8:1532:14289":{"crate_id":8,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"19:13469:5357":{"crate_id":19,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:40012:6437":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:41512:3261":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"23:4092:4448":{"crate_id":23,"path":["serde","de","value","U64Deserializer"],"kind":"struct"},"19:13667:5427":{"crate_id":19,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:1382:2958":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"19:12072:4988":{"crate_id":19,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:45391:6541":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"23:3235:35959":{"crate_id":23,"path":["serde","__private","ser","FlatMapSerializeStruct"],"kind":"struct"},"19:13689:5432":{"crate_id":19,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"13:828:12779":{"crate_id":13,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:14:2294":{"crate_id":1,"path":["core","write"],"kind":"macro"},"19:13041:5257":{"crate_id":19,"path":["object","pe","Guid"],"kind":"struct"},"1:21945:28353":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"7:2211:2014":{"crate_id":7,"path":["std","fs","read"],"kind":"function"},"1:39372:2603":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"8:494:4177":{"crate_id":8,"path":["libc","unix","timespec"],"kind":"struct"},"18:7478:4086":{"crate_id":18,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"19:10428:4756":{"crate_id":19,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"18:2931:18701":{"crate_id":18,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"7:7677:12796":{"crate_id":7,"path":["std","env","VarError"],"kind":"enum"},"1:9295:6245":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"7:8776:4160":{"crate_id":7,"path":["std","process","ExitCode"],"kind":"struct"},"23:1890:2907":{"crate_id":23,"path":["serde","ser","SerializeStruct"],"kind":"trait"},"7:8103:12825":{"crate_id":7,"path":["std","io","SeekFrom"],"kind":"enum"},"19:12799:5122":{"crate_id":19,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"18:4845:5542":{"crate_id":18,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:7022:3488":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"18:8170:5889":{"crate_id":18,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"18:6179:3851":{"crate_id":18,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"18:6935:5716":{"crate_id":18,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"7:9386:3461":{"crate_id":7,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:3117:3267":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"19:12646:5100":{"crate_id":19,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"19:11410:4861":{"crate_id":19,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:2758:2635":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:43461:6253":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"8:4439:16833":{"crate_id":8,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"7:1985:184":{"crate_id":7,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"7:6296:166":{"crate_id":7,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:20768:26793":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:41462:3268":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"7:11237:34391":{"crate_id":7,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:47770:4211":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"7:3881:12862":{"crate_id":7,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:10258:6254":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"19:12563:5083":{"crate_id":19,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"8:4416:16830":{"crate_id":8,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"23:1805:1818":{"crate_id":23,"path":["serde","ser","Serializer"],"kind":"trait"},"1:12501:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"7:5502:12950":{"crate_id":7,"path":["std","process","Termination"],"kind":"trait"},"1:41631:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:3370:7165":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"23:3151:2908":{"crate_id":23,"path":["serde","__private","ser","content","SerializeStructVariant"],"kind":"struct"},"7:7781:4587":{"crate_id":7,"path":["std","fs","Metadata"],"kind":"struct"},"19:10527:19737":{"crate_id":19,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"7:3458:12824":{"crate_id":7,"path":["std","io","Seek"],"kind":"trait"},"8:7443:18495":{"crate_id":8,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:40268:3658":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"8:4619:16852":{"crate_id":8,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"7:7571:12826":{"crate_id":7,"path":["std","sealed","Sealed"],"kind":"trait"},"7:3925:12865":{"crate_id":7,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:42031:2797":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"23:1527:23499":{"crate_id":23,"path":["serde","de","IntoDeserializer"],"kind":"trait"},"18:7498:5820":{"crate_id":18,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:7240:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"8:7485:17045":{"crate_id":8,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:6739:3512":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"7:3325:6064":{"crate_id":7,"path":["std","io","util","Repeat"],"kind":"struct"},"1:44291:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"19:10125:4709":{"crate_id":19,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:47800:6636":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"23:5732:36510":{"crate_id":23,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"18:6132:5617":{"crate_id":18,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:4167:3437":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"7:7693:6098":{"crate_id":7,"path":["std","env","JoinPathsError"],"kind":"struct"},"7:936:12779":{"crate_id":7,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:41831:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"19:13516:5370":{"crate_id":19,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:45699:6554":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"13:1009:3644":{"crate_id":13,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:2692:2608":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"19:9557:3752":{"crate_id":19,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:45892:6559":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"7:11905:1499":{"crate_id":7,"path":["std","u8"],"kind":"primitive"},"19:11355:3791":{"crate_id":19,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"18:5630:5558":{"crate_id":18,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"18:6890:3880":{"crate_id":18,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"7:11500:6089":{"crate_id":7,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"23:3576:4442":{"crate_id":23,"path":["serde","de","value","I16Deserializer"],"kind":"struct"},"19:12522:5078":{"crate_id":19,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"19:9469:4651":{"crate_id":19,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:10286:6256":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"7:10657:6101":{"crate_id":7,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:1058:3663":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:11737:7311":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"19:13194:5286":{"crate_id":19,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:11500:6267":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"19:9038:35737":{"crate_id":19,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"8:4911:16883":{"crate_id":8,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"23:1048:7156":{"crate_id":23,"path":["serde","de","impls","deserialize","Field"],"kind":"enum"},"1:20594:29247":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"23:6255:36507":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","SeqInPlaceVisitor"],"kind":"struct"},"19:13309:5315":{"crate_id":19,"path":["object","pe","ImageImportByName"],"kind":"struct"},"13:744:3960":{"crate_id":13,"path":["hashbrown","map","Values"],"kind":"struct"},"1:7165:7245":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"7:9033:218":{"crate_id":7,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"19:13145:5275":{"crate_id":19,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:45938:6560":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:2695:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:21114:12387":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"23:738:36656":{"crate_id":23,"path":["serde","de","impls","UnitVisitor"],"kind":"struct"},"19:9228:35743":{"crate_id":19,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:633:6187":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"23:943:36499":{"crate_id":23,"path":["serde","de","impls","ArrayInPlaceVisitor"],"kind":"struct"},"23:3748:4444":{"crate_id":23,"path":["serde","de","value","I64Deserializer"],"kind":"struct"},"5:3158:5983":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"7:10942:3465":{"crate_id":7,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:2898:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:84:2731":{"crate_id":6,"path":["owning_ref","OwningHandle"],"kind":"struct"},"1:2518:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:45367:6540":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"7:917:5981":{"crate_id":7,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:4377:2604":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"7:3249:6063":{"crate_id":7,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"13:452:142":{"crate_id":13,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:41589:3268":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"8:4813:16872":{"crate_id":8,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"23:7376:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"23:1879:2906":{"crate_id":23,"path":["serde","ser","SerializeMap"],"kind":"trait"},"23:6113:36510":{"crate_id":23,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"23:915:36660":{"crate_id":23,"path":["serde","de","impls","deserialize","VecVisitor"],"kind":"struct"},"23:1000:36662":{"crate_id":23,"path":["serde","de","impls","PathBufVisitor"],"kind":"struct"},"1:43425:6502":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"23:3096:2904":{"crate_id":23,"path":["serde","__private","ser","content","SerializeTupleStruct"],"kind":"struct"},"18:2879:4069":{"crate_id":18,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"13:1839:3267":{"crate_id":13,"path":["hashbrown","set","Iter"],"kind":"struct"},"19:9696:3771":{"crate_id":19,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:352:18574":{"crate_id":11,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"13:1852:3418":{"crate_id":13,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"23:1867:2904":{"crate_id":23,"path":["serde","ser","SerializeTupleStruct"],"kind":"trait"},"7:11145:3467":{"crate_id":7,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:8843:3980":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"7:1594:5986":{"crate_id":7,"path":["std","collections","hash","set","Union"],"kind":"struct"},"19:10885:3783":{"crate_id":19,"path":["object","read","SymbolMap"],"kind":"struct"},"18:5724:5564":{"crate_id":18,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"19:10039:4702":{"crate_id":19,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:39961:6432":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:7241:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:41345:6066":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"23:7285:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"1:2843:2648":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"23:1945:36755":{"crate_id":23,"path":["serde","__private","de","missing_field","MissingFieldDeserializer"],"kind":"struct"},"23:266:4434":{"crate_id":23,"path":["serde","de","value","StringDeserializer"],"kind":"struct"},"7:3677:4157":{"crate_id":7,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:40376:6227":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"18:6376:3874":{"crate_id":18,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:3150:5985":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:11279:7313":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:1366:3268":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:43163:6489":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"23:7214:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"1:42498:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"8:4821:16873":{"crate_id":8,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:46014:6563":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:46158:6567":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"7:355:6040":{"crate_id":7,"path":["std","thread","scoped","Scope"],"kind":"struct"},"19:11459:4068":{"crate_id":19,"path":["object","elf","Rel64"],"kind":"struct"},"1:41226:4190":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"19:10334:3752":{"crate_id":19,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"19:9628:4665":{"crate_id":19,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"18:5402:3749":{"crate_id":18,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"19:12358:5046":{"crate_id":19,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"23:7269:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"18:8142:5888":{"crate_id":18,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"18:2572:5503":{"crate_id":18,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"19:10967:4801":{"crate_id":19,"path":["object","read","Import"],"kind":"struct"},"8:4890:16881":{"crate_id":8,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"7:7471:6180":{"crate_id":7,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"20:507:4488":{"crate_id":20,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"13:1847:3497":{"crate_id":13,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:11461:6265":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:5594:4076":{"crate_id":18,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:3975:3497":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"7:9184:3278":{"crate_id":7,"path":["std","sys","unix","args","Args"],"kind":"struct"},"8:6569:13257":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:47823:6637":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"19:10615:4777":{"crate_id":19,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:9157:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"7:1783:6051":{"crate_id":7,"path":["std","env","Vars"],"kind":"struct"},"8:5829:17488":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:20549:28791":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:45413:6542":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"7:2832:3436":{"crate_id":7,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:45746:6555":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"7:922:3961":{"crate_id":7,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"18:2357:5495":{"crate_id":18,"path":["gimli","common","Register"],"kind":"struct"},"8:4331:16823":{"crate_id":8,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:2696:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"7:1433:144":{"crate_id":7,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:46652:6591":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"23:5680:36510":{"crate_id":23,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"7:7659:12774":{"crate_id":7,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:2856:2651":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:11732:7312":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:46212:6569":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"23:6243:36500":{"crate_id":23,"path":["serde","de","impls","deserialize","SeqVisitor"],"kind":"struct"},"1:11712:7297":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"11:388:18560":{"crate_id":11,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"23:7487:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"13:840:3641":{"crate_id":13,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"8:1539:14290":{"crate_id":8,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:5104:5550":{"crate_id":18,"path":["gimli","constants","DwRle"],"kind":"struct"},"7:8907:3934":{"crate_id":7,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"8:6785:17960":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"7:5563:3440":{"crate_id":7,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"18:5557:3839":{"crate_id":18,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"8:4499:16841":{"crate_id":8,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"8:4431:16832":{"crate_id":8,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:2792:2638":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"7:10000:3655":{"crate_id":7,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:43135:6487":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:21083:12826":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"7:8792:6149":{"crate_id":7,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:3163:2661":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"19:487:4532":{"crate_id":19,"path":["object","read","any","Comdat"],"kind":"struct"},"23:8324:36418":{"crate_id":23,"path":["serde","de","impls","deserialize","IpAddrKind"],"kind":"enum"},"1:43333:6499":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"19:9986:4694":{"crate_id":19,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"19:1787:4536":{"crate_id":19,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:44389:6538":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"18:2742:5510":{"crate_id":18,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"19:11109:4812":{"crate_id":19,"path":["object","read","CompressedData"],"kind":"struct"},"19:10635:3779":{"crate_id":19,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"23:7995:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"1:4183:2027":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"7:10712:3654":{"crate_id":7,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:44104:7303":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:6764:3525":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:25847:2789":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:4336:3503":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"18:6868:3836":{"crate_id":18,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"20:660:4506":{"crate_id":20,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:1821:2611":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"7:10682:3944":{"crate_id":7,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:32020:7164":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:43649:6268":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"7:7015:34537":{"crate_id":7,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:5191:3477":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:19:2592":{"crate_id":4,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"7:361:6041":{"crate_id":7,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"19:9028:4635":{"crate_id":19,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:2830:4072":{"crate_id":18,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"8:4538:16845":{"crate_id":8,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"18:6943:19565":{"crate_id":18,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"7:4639:12921":{"crate_id":7,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"7:6621:1953":{"crate_id":7,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:6768:7236":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:39280:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"19:10923:3784":{"crate_id":19,"path":["object","read","ObjectMap"],"kind":"struct"},"1:3644:2958":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"18:2298:18675":{"crate_id":18,"path":["gimli","common","Format"],"kind":"enum"},"5:4399:3503":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"23:5388:4457":{"crate_id":23,"path":["serde","de","value","MapAccessDeserializer"],"kind":"struct"},"18:7509:4087":{"crate_id":18,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"19:10989:4544":{"crate_id":19,"path":["object","read","Export"],"kind":"struct"},"23:549:23506":{"crate_id":23,"path":["serde","de","value","ExpectedInMap"],"kind":"struct"},"7:8047:6106":{"crate_id":7,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"23:5898:36503":{"crate_id":23,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"7:7838:119":{"crate_id":7,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:42658:3997":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"7:11907:1497":{"crate_id":7,"path":["std","u32"],"kind":"primitive"},"19:13842:5473":{"crate_id":19,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"0:605:2207":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockRecursiveTimed"],"kind":"trait"},"8:5773:17522":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"19:13033:5256":{"crate_id":19,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"8:5843:17489":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:6607:3522":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"23:1070:36515":{"crate_id":23,"path":["serde","de","impls","deserialize","DurationVisitor"],"kind":"struct"},"1:4322:2602":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"8:4653:16855":{"crate_id":8,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"19:11653:4910":{"crate_id":19,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"23:1139:7156":{"crate_id":23,"path":["serde","de","impls","range","Field"],"kind":"enum"},"1:39258:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"23:1507:23497":{"crate_id":23,"path":["serde","de","EnumAccess"],"kind":"trait"},"13:652:3268":{"crate_id":13,"path":["hashbrown","map","IterMut"],"kind":"struct"},"7:10847:33139":{"crate_id":7,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"19:242:4527":{"crate_id":19,"path":["object","read","util","DebugByte"],"kind":"struct"},"7:9381:6100":{"crate_id":7,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"19:9098:4636":{"crate_id":19,"path":["object","read","any","SectionIterator"],"kind":"struct"},"23:3248:36357":{"crate_id":23,"path":["serde","__private","ser","FlatMapSerializeStructVariantAsMapValue"],"kind":"struct"},"19:8598:19629":{"crate_id":19,"path":["object","common","SymbolFlags"],"kind":"enum"},"0:588:2168":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockFair"],"kind":"trait"},"19:9478:4653":{"crate_id":19,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:45491:6545":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"23:1855:2902":{"crate_id":23,"path":["serde","ser","SerializeSeq"],"kind":"trait"},"1:21978:2794":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:6180:3512":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:1733:3144":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"18:4624:5536":{"crate_id":18,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"11:421:18561":{"crate_id":11,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"19:9512:4657":{"crate_id":19,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"19:9340:4641":{"crate_id":19,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:47572:6632":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:47648:6634":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:7089:2958":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"7:4096:12888":{"crate_id":7,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"7:4642:12894":{"crate_id":7,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"23:2028:36505":{"crate_id":23,"path":["serde","__private","de","content","ContentVisitor"],"kind":"struct"},"7:7616:3463":{"crate_id":7,"path":["std","thread","Thread"],"kind":"struct"},"1:40708:3536":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:47695:4198":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"19:10747:128":{"crate_id":19,"path":["object","read","Error"],"kind":"struct"},"23:649:35763":{"crate_id":23,"path":["serde","de","value","private","Pair"],"kind":"trait"},"8:6553:14226":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:40050:6440":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:45968:6561":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"7:8215:12892":{"crate_id":7,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"19:10104:3776":{"crate_id":19,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:2926:2652":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"8:5798:17525":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"13:2219:4182":{"crate_id":13,"path":["hashbrown","TryReserveError"],"kind":"enum"},"7:844:3267":{"crate_id":7,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"8:4784:16868":{"crate_id":8,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"7:4854:12920":{"crate_id":7,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"23:2168:35924":{"crate_id":23,"path":["serde","__private","de","content","TaggedContentVisitor"],"kind":"struct"},"8:1692:14304":{"crate_id":8,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"19:12634:5093":{"crate_id":19,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:39341:6303":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:2512:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"19:9380:19640":{"crate_id":19,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"23:532:23505":{"crate_id":23,"path":["serde","de","value","PairVisitor"],"kind":"struct"},"19:0:2724":{"crate_id":19,"path":["object"],"kind":"module"},"1:43343:3769":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"19:8683:3763":{"crate_id":19,"path":["object","endian","U16Bytes"],"kind":"struct"},"18:2642:5506":{"crate_id":18,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"7:676:3650":{"crate_id":7,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:39236:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"19:8753:3765":{"crate_id":19,"path":["object","endian","U64Bytes"],"kind":"struct"},"7:1565:2958":{"crate_id":7,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"7:7644:12773":{"crate_id":7,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"7:3465:12844":{"crate_id":7,"path":["std","io","BufRead"],"kind":"trait"},"7:8838:12965":{"crate_id":7,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"8:4559:16848":{"crate_id":8,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:2922:2006":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"23:2379:4439":{"crate_id":23,"path":["serde","__private","de","content","MapDeserializer"],"kind":"struct"},"7:11888:419":{"crate_id":7,"path":["std","char"],"kind":"primitive"},"19:13211:5291":{"crate_id":19,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"19:2933:4541":{"crate_id":19,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"7:10931:3464":{"crate_id":7,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"23:1227:36508":{"crate_id":23,"path":["serde","de","impls","deserialize","deserialize","FieldVisitor"],"kind":"struct"},"7:6009:3443":{"crate_id":7,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"7:8226:6124":{"crate_id":7,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:42476:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:45644:6551":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"7:8982:32649":{"crate_id":7,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"7:11870:33138":{"crate_id":7,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:39552:24451":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:20982:12826":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"23:1897:2908":{"crate_id":23,"path":["serde","ser","SerializeStructVariant"],"kind":"trait"},"1:46446:6588":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:47402:6629":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:30266:2712":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"8:1736:14309":{"crate_id":8,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:8109:5884":{"crate_id":18,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"13:638:3267":{"crate_id":13,"path":["hashbrown","map","Iter"],"kind":"struct"},"8:7503:17048":{"crate_id":8,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"18:6728:5694":{"crate_id":18,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:21561:12382":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"19:9653:4668":{"crate_id":19,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"7:8762:6147":{"crate_id":7,"path":["std","process","ExitStatusError"],"kind":"struct"},"7:4564:12867":{"crate_id":7,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:5886:5578":{"crate_id":18,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:198:18657":{"crate_id":17,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"20:515:4485":{"crate_id":20,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:39114:2665":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"0:593:2183":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockDowngrade"],"kind":"trait"},"1:2509:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"7:1561:3267":{"crate_id":7,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"7:10419:6060":{"crate_id":7,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"7:7821:130":{"crate_id":7,"path":["std","fs","FileType"],"kind":"struct"},"1:40699:6064":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"13:665:2958":{"crate_id":13,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"23:4350:4451":{"crate_id":23,"path":["serde","de","value","F64Deserializer"],"kind":"struct"},"19:1978:4540":{"crate_id":19,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"19:10649:4779":{"crate_id":19,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"7:10357:3462":{"crate_id":7,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:40487:6233":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:2694:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:41380:4194":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:9159:3023":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"7:5247:120":{"crate_id":7,"path":["std","path","Display"],"kind":"struct"},"18:7529:3884":{"crate_id":18,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"19:8195:19608":{"crate_id":19,"path":["object","common","Architecture"],"kind":"enum"},"8:5967:17536":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"13:1035:5978":{"crate_id":13,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"7:3973:12868":{"crate_id":7,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:21665:6277":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"8:4941:16886":{"crate_id":8,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"19:12331:5044":{"crate_id":19,"path":["object","macho","UuidCommand"],"kind":"struct"},"8:4486:16839":{"crate_id":8,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"0:1190:2083":{"crate_id":0,"path":["lock_api","remutex","ReentrantMutexGuard"],"kind":"struct"},"7:5354:4154":{"crate_id":7,"path":["std","process","ChildStdout"],"kind":"struct"},"8:6830:17964":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"8:7578:18524":{"crate_id":8,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"23:5940:36510":{"crate_id":23,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"23:5846:36503":{"crate_id":23,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"8:568:13383":{"crate_id":8,"path":["libc","unix","sigval"],"kind":"struct"},"8:5900:17532":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"18:2905:4070":{"crate_id":18,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"8:1728:14308":{"crate_id":8,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:40:4847":{"crate_id":16,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:21827:2790":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"19:12403:5055":{"crate_id":19,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"8:5947:17534":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"7:1572:3418":{"crate_id":7,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"23:2616:36501":{"crate_id":23,"path":["serde","__private","de","content","UntaggedUnitVisitor"],"kind":"struct"},"1:8675:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"19:12345:5045":{"crate_id":19,"path":["object","macho","RpathCommand"],"kind":"struct"},"23:1802:1817":{"crate_id":23,"path":["serde","ser","Serialize"],"kind":"trait"},"13:326:3414":{"crate_id":13,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"8:1519:14287":{"crate_id":8,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"7:8736:186":{"crate_id":7,"path":["std","process","Output"],"kind":"struct"},"18:4932:5545":{"crate_id":18,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:20841:12392":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:2354:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"0:577:2148":{"crate_id":0,"path":["lock_api","rwlock","RawRwLock"],"kind":"trait"},"23:4006:4447":{"crate_id":23,"path":["serde","de","value","U16Deserializer"],"kind":"struct"},"23:2516:35930":{"crate_id":23,"path":["serde","__private","de","content","VariantRefDeserializer"],"kind":"struct"},"7:857:3268":{"crate_id":7,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"18:7244:35733":{"crate_id":18,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"19:11573:4887":{"crate_id":19,"path":["object","elf","Verdaux"],"kind":"struct"},"23:2920:35961":{"crate_id":23,"path":["serde","__private","ser","content","Content"],"kind":"enum"},"7:926:3962":{"crate_id":7,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:20770:3125":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"18:8180:19571":{"crate_id":18,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:3382:6212":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:3079:2658":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"8:5755:17521":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"19:13292:5308":{"crate_id":19,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"23:8401:36416":{"crate_id":23,"path":["serde","de","impls","OsStringKind"],"kind":"enum"},"18:7757:5827":{"crate_id":18,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"7:1821:6053":{"crate_id":7,"path":["std","env","SplitPaths"],"kind":"struct"},"1:40670:6235":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:41260:7255":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"8:4383:16827":{"crate_id":8,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"8:4803:16871":{"crate_id":8,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:2833:2646":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"23:8302:36512":{"crate_id":23,"path":["serde","de","impls","deserialize","MapVisitor"],"kind":"struct"},"1:4433:2606":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"7:8496:6145":{"crate_id":7,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:22260:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"8:4609:16851":{"crate_id":8,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:11484:6266":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:4019:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"19:9523:4658":{"crate_id":19,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"19:13477:5358":{"crate_id":19,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"7:2574:6056":{"crate_id":7,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"19:9488:4655":{"crate_id":19,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"19:9853:4681":{"crate_id":19,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"19:13053:5262":{"crate_id":19,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"8:7252:18334":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:47706:4201":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:10203:6252":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"7:3875:12863":{"crate_id":7,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"19:1919:19671":{"crate_id":19,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"7:4683:12881":{"crate_id":7,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:45543:6547":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"18:6442:5644":{"crate_id":18,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:20984:12381":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"7:11899:643":{"crate_id":7,"path":["std","f64"],"kind":"primitive"},"7:8286:6067":{"crate_id":7,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:3124:5984":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:1197:5737":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"19:12307:5041":{"crate_id":19,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:5000:5547":{"crate_id":18,"path":["gimli","constants","DwLne"],"kind":"struct"},"7:9981:6053":{"crate_id":7,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"19:11532:4877":{"crate_id":19,"path":["object","elf","Dyn64"],"kind":"struct"},"1:47526:6631":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"19:9946:4691":{"crate_id":19,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"23:3139:2907":{"crate_id":23,"path":["serde","__private","ser","content","SerializeStruct"],"kind":"struct"},"1:2963:2664":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:21718:6278":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:21771:3988":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:6696:19564":{"crate_id":18,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"8:4719:16860":{"crate_id":8,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:40133:27374":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"19:11037:19633":{"crate_id":19,"path":["object","read","RelocationTarget"],"kind":"enum"},"19:11193:4823":{"crate_id":19,"path":["object","archive","AixFileHeader"],"kind":"struct"},"23:2745:35792":{"crate_id":23,"path":["serde","__private","de","FlatStructAccess"],"kind":"struct"},"19:12496:5076":{"crate_id":19,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:2189:3966":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:43144:6488":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"7:6373:6083":{"crate_id":7,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:40324:6455":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:10010:6114":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"23:7429:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"1:32060:6298":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"23:1532:6986":{"crate_id":23,"path":["serde","de","OneOf"],"kind":"struct"},"7:413:165":{"crate_id":7,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:4332:2603":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"19:12138:4997":{"crate_id":19,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:1544:3437":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"13:1843:2958":{"crate_id":13,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"18:8072:5879":{"crate_id":18,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:7052:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"7:6133:3938":{"crate_id":7,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"8:6605:12922":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"23:3165:35987":{"crate_id":23,"path":["serde","__private","ser","FlatMapSerializer"],"kind":"struct"},"7:10692:130":{"crate_id":7,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"7:8260:4156":{"crate_id":7,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"7:10948:3466":{"crate_id":7,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:2808:5513":{"crate_id":18,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"20:681:4513":{"crate_id":20,"path":["memchr","memmem","Finder"],"kind":"struct"},"19:9822:4678":{"crate_id":19,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"7:6085:3447":{"crate_id":7,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"7:888:3960":{"crate_id":7,"path":["std","collections","hash","map","Values"],"kind":"struct"},"23:7524:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"6:17:2729":{"crate_id":6,"path":["owning_ref","Erased"],"kind":"trait"},"20:609:4499":{"crate_id":20,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"19:13015:5251":{"crate_id":19,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"7:5320:6072":{"crate_id":7,"path":["std","process","Child"],"kind":"struct"},"7:11887:936":{"crate_id":7,"path":["std","never"],"kind":"primitive"},"1:41203:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:47214:6627":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"19:8256:19606":{"crate_id":19,"path":["object","common","AddressSize"],"kind":"enum"},"23:8334:36517":{"crate_id":23,"path":["serde","de","impls","deserialize","deserialize","KindVisitor"],"kind":"struct"},"1:43255:6494":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"18:3300:5519":{"crate_id":18,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:689:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"23:2810:4140":{"crate_id":23,"path":["serde","__private","ser","Unsupported"],"kind":"enum"},"19:11422:4864":{"crate_id":19,"path":["object","elf","Syminfo64"],"kind":"struct"},"7:8220:12893":{"crate_id":7,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"23:5524:36510":{"crate_id":23,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"19:11879:4959":{"crate_id":19,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:40306:6218":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:40116:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"8:4991:16892":{"crate_id":8,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:9410:3983":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"7:947:3641":{"crate_id":7,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"8:1525:14288":{"crate_id":8,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"23:8496:128":{"crate_id":23,"path":["serde","de","Error"],"kind":"trait"},"23:3404:4440":{"crate_id":23,"path":["serde","de","value","BoolDeserializer"],"kind":"struct"},"18:0:2723":{"crate_id":18,"path":["gimli"],"kind":"module"},"1:9106:210":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"18:6243:35732":{"crate_id":18,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"7:4125:12891":{"crate_id":7,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:39379:4187":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"19:13763:5453":{"crate_id":19,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"23:6274:36500":{"crate_id":23,"path":["serde","de","impls","deserialize","SeqVisitor"],"kind":"struct"},"1:22557:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"11:0:2716":{"crate_id":11,"path":["miniz_oxide"],"kind":"module"},"7:930:5973":{"crate_id":7,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:30864:3994":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:2738:2616":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:47785:6635":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"7:11910:789":{"crate_id":7,"path":["std","isize"],"kind":"primitive"},"7:8825:4164":{"crate_id":7,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:31:5965":{"crate_id":16,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"8:4836:16875":{"crate_id":8,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:2594:5504":{"crate_id":18,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:8256:5890":{"crate_id":18,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:43640:6509":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:9149:3019":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:3521:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"18:6535:3411":{"crate_id":18,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"7:1844:3278":{"crate_id":7,"path":["std","env","Args"],"kind":"struct"},"1:2163:3126":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"8:6776:17959":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:2506:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"18:2546:5502":{"crate_id":18,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:4808:795":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:49668:12397":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"7:11449:3952":{"crate_id":7,"path":["std","alloc","System"],"kind":"struct"},"8:4459:16835":{"crate_id":8,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"7:2362:12816":{"crate_id":7,"path":["std","fs","canonicalize"],"kind":"function"},"5:7181:4103":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"19:9322:35744":{"crate_id":19,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:42403:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"23:5586:36503":{"crate_id":23,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"5:35:3474":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"8:5857:17528":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"19:12915:5215":{"crate_id":19,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"13:2198:28811":{"crate_id":13,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:21337:12394":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"23:5794:36503":{"crate_id":23,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"7:11854:3953":{"crate_id":7,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"8:7532:17052":{"crate_id":8,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:46292:6570":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:6367:2958":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:47324:6628":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"13:2076:3644":{"crate_id":13,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"19:3142:4542":{"crate_id":19,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"7:5439:4152":{"crate_id":7,"path":["std","process","Stdio"],"kind":"struct"},"7:8427:12944":{"crate_id":7,"path":["std","path","Component"],"kind":"enum"},"18:6544:3877":{"crate_id":18,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:2603:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:43223:6492":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"23:768:36652":{"crate_id":23,"path":["serde","de","impls","CharVisitor"],"kind":"struct"},"1:43561:6505":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:6674:7249":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"19:9534:4659":{"crate_id":19,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"7:3933:12866":{"crate_id":7,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"7:7590:6090":{"crate_id":7,"path":["std","thread","Builder"],"kind":"struct"},"19:8979:35736":{"crate_id":19,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:21862:6280":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"19:10598:4801":{"crate_id":19,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:9624:3546":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:41289:3996":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"19:10823:4606":{"crate_id":19,"path":["object","read","SectionIndex"],"kind":"struct"},"18:154:3408":{"crate_id":18,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:40726:6241":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"8:6016:17542":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"19:11258:4846":{"crate_id":19,"path":["object","elf","FileHeader64"],"kind":"struct"},"23:5455:3735":{"crate_id":23,"path":["serde","de","ignored_any","IgnoredAny"],"kind":"struct"},"8:4698:16858":{"crate_id":8,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"19:12510:5077":{"crate_id":19,"path":["object","macho","IdentCommand"],"kind":"struct"},"19:10465:4759":{"crate_id":19,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"19:12461:5064":{"crate_id":19,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"8:500:13375":{"crate_id":8,"path":["libc","unix","rlimit"],"kind":"struct"},"23:2341:35931":{"crate_id":23,"path":["serde","__private","de","content","VariantDeserializer"],"kind":"struct"},"19:13721:5447":{"crate_id":19,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"7:4074:34543":{"crate_id":7,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"8:1752:14310":{"crate_id":8,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:7543:3885":{"crate_id":18,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:21:681":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"19:12178:5001":{"crate_id":19,"path":["object","macho","SymtabCommand"],"kind":"struct"},"8:6151:17573":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"8:506:13376":{"crate_id":8,"path":["libc","unix","rusage"],"kind":"struct"},"5:3276:3418":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"19:11282:4847":{"crate_id":19,"path":["object","elf","Ident"],"kind":"struct"},"7:8264:12922":{"crate_id":7,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"19:10721:4786":{"crate_id":19,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"14:0:2719":{"crate_id":14,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:7263:2861":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"23:6320:36507":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","SeqInPlaceVisitor"],"kind":"struct"},"19:11520:4874":{"crate_id":19,"path":["object","elf","Dyn32"],"kind":"struct"},"1:40389:6459":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:46682:6592":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"19:11299:4850":{"crate_id":19,"path":["object","elf","SectionHeader32"],"kind":"struct"},"7:5179:190":{"crate_id":7,"path":["std","path","Path"],"kind":"struct"},"7:901:3497":{"crate_id":7,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:6671:5681":{"crate_id":18,"path":["gimli","read","line","LineRow"],"kind":"struct"},"19:9265:4639":{"crate_id":19,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"8:488:13374":{"crate_id":8,"path":["libc","unix","timeval"],"kind":"struct"},"19:13332:5318":{"crate_id":19,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"23:6053:36510":{"crate_id":23,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"1:40042:6213":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"7:638:6046":{"crate_id":7,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"19:10316:4746":{"crate_id":19,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"7:8387:6481":{"crate_id":7,"path":["std","path","State"],"kind":"enum"},"8:6724:17957":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"13:1524:18638":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"23:892:36664":{"crate_id":23,"path":["serde","de","impls","PhantomDataVisitor"],"kind":"struct"},"18:7683:3891":{"crate_id":18,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:47464:6630":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"8:4790:16869":{"crate_id":8,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"7:8410:6138":{"crate_id":7,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:30466:24724":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"7:10702:119":{"crate_id":7,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"19:12923:5216":{"crate_id":19,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:41751:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:39075:2666":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:11717:6243":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:40034:6439":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:47072:6626":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"13:1540:3648":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"23:614:35932":{"crate_id":23,"path":["serde","de","value","private","MapAsEnum"],"kind":"struct"},"7:11210:6085":{"crate_id":7,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:20879:3125":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"23:7661:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"16:165:18643":{"crate_id":16,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:42674:4000":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"23:8033:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"4:0:1692":{"crate_id":4,"path":["scopeguard"],"kind":"module"},"19:9907:3773":{"crate_id":19,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"19:9641:4666":{"crate_id":19,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:8817:668":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:40438:6230":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:40296:3975":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:22359:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:41791:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:2245:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"22:6:2755":{"crate_id":22,"path":["stable_deref_trait","StableDeref"],"kind":"trait"},"8:5816:17527":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:43741:7326":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:7:5965":{"crate_id":16,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:40277:3974":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"18:7519:5821":{"crate_id":18,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"7:11072:4180":{"crate_id":7,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"7:6757:12968":{"crate_id":7,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:43265:3681":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"19:8283:19619":{"crate_id":19,"path":["object","common","BinaryFormat"],"kind":"enum"},"23:8316:36511":{"crate_id":23,"path":["serde","de","impls","deserialize","EnumVisitor"],"kind":"struct"},"1:42917:6246":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:20:2730":{"crate_id":6,"path":["owning_ref","IntoErased"],"kind":"trait"},"1:43210:6450":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"23:3217:36420":{"crate_id":23,"path":["serde","__private","ser","FlatMapSerializeMap"],"kind":"struct"},"1:39998:6436":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:3225:5518":{"crate_id":18,"path":["gimli","arch","AArch64"],"kind":"struct"},"19:9933:3760":{"crate_id":19,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"20:564:3739":{"crate_id":20,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"7:8784:3267":{"crate_id":7,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"8:1650:14300":{"crate_id":8,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"7:10722:33144":{"crate_id":7,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:21559:12826":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"23:6213:36500":{"crate_id":23,"path":["serde","de","impls","deserialize","SeqVisitor"],"kind":"struct"},"7:11893:1367":{"crate_id":7,"path":["std","slice"],"kind":"primitive"},"8:4371:16825":{"crate_id":8,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"0:1268:2423":{"crate_id":0,"path":["lock_api","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"19:11502:4873":{"crate_id":19,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"7:953:5976":{"crate_id":7,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"23:7618:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"23:668:4094":{"crate_id":23,"path":["serde","de","format","Buf"],"kind":"struct"},"7:3987:12870":{"crate_id":7,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:45990:6562":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"23:9652:128":{"crate_id":23,"path":["serde","__private","doc","Error"],"kind":"struct"},"19:9108:35738":{"crate_id":19,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"18:2448:5499":{"crate_id":18,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"23:8283:36512":{"crate_id":23,"path":["serde","de","impls","deserialize","MapVisitor"],"kind":"struct"},"5:3673:3669":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"7:3383:6120":{"crate_id":7,"path":["std","io","Read"],"kind":"trait"},"18:2862:5514":{"crate_id":18,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"19:1947:4537":{"crate_id":19,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:20760:12385":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"7:2477:6055":{"crate_id":7,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:21879:24654":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:7136:4182":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:46111:6566":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"7:2867:210":{"crate_id":7,"path":["std","io","error","Result"],"kind":"typedef"},"7:2360:12815":{"crate_id":7,"path":["std","fs","read_link"],"kind":"function"},"23:8374:36517":{"crate_id":23,"path":["serde","de","impls","deserialize","deserialize","KindVisitor"],"kind":"struct"},"19:13812:5468":{"crate_id":19,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"8:4999:16893":{"crate_id":8,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"0:1275:2452":{"crate_id":0,"path":["lock_api","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:2706:1810":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:43579:6506":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"0:30:1825":{"crate_id":0,"path":["lock_api","mutex","RawMutex"],"kind":"trait"},"8:6814:17962":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:2905:3957":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"23:1734:23509":{"crate_id":23,"path":["serde","ser","impossible","Impossible"],"kind":"struct"},"7:5686:6078":{"crate_id":7,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:4602:7193":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:40408:6228":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:12357:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"19:11821:4950":{"crate_id":19,"path":["object","macho","FatArch32"],"kind":"struct"},"1:9107:3018":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"5:1404:3959":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"7:7932:6105":{"crate_id":7,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"23:202:4432":{"crate_id":23,"path":["serde","de","value","StrDeserializer"],"kind":"struct"},"7:11912:1126":{"crate_id":7,"path":["std","reference"],"kind":"primitive"},"19:10735:4789":{"crate_id":19,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"7:6369:6082":{"crate_id":7,"path":["std","sync","once","Once"],"kind":"struct"},"0:602:2201":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockRecursive"],"kind":"trait"},"7:8075:3945":{"crate_id":7,"path":["std","io","util","Empty"],"kind":"struct"},"1:2796:2637":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:5586:3976":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"7:7942:12852":{"crate_id":7,"path":["std","io","error","ErrorKind"],"kind":"enum"},"8:6598:17952":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:3317:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"23:446:4439":{"crate_id":23,"path":["serde","de","value","MapDeserializer"],"kind":"struct"},"19:10743:4791":{"crate_id":19,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:11265:6259":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"19:13249:5300":{"crate_id":19,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:21443:28789":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:101:2732":{"crate_id":6,"path":["owning_ref","ToHandle"],"kind":"trait"},"1:8251:3979":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:5998:19560":{"crate_id":18,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:3640:4555":{"crate_id":18,"path":["gimli","arch","X86_64"],"kind":"struct"},"19:13453:5354":{"crate_id":19,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:40367:4467":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"19:13857:5474":{"crate_id":19,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:43884:6271":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:30360:24745":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"7:11331:4157":{"crate_id":7,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"13:2212:35665":{"crate_id":13,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"19:9796:4677":{"crate_id":19,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:30041:2786":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"7:1895:4099":{"crate_id":7,"path":["std","error","Report"],"kind":"struct"},"1:7161:7246":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"19:11770:4937":{"crate_id":19,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"11:445:18559":{"crate_id":11,"path":["miniz_oxide","MZError"],"kind":"enum"},"7:8870:12966":{"crate_id":7,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"19:12282:5037":{"crate_id":19,"path":["object","macho","DylibReference"],"kind":"struct"},"1:20729:12388":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:5834:2677":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:1463:6189":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"7:11054:4176":{"crate_id":7,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"7:1583:5984":{"crate_id":7,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"7:10628:6169":{"crate_id":7,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"8:4688:16857":{"crate_id":8,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"13:1050:18637":{"crate_id":13,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"7:7937:3943":{"crate_id":7,"path":["std","io","error","Custom"],"kind":"struct"},"23:7463:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"7:4990:6071":{"crate_id":7,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"19:11585:4890":{"crate_id":19,"path":["object","elf","Verneed"],"kind":"struct"},"18:6146:194":{"crate_id":18,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:22326:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"8:1594:14296":{"crate_id":8,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:0:2722":{"crate_id":17,"path":["addr2line"],"kind":"module"},"5:1443:3962":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"19:11993:4976":{"crate_id":19,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:1747:24727":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:2912:3696":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"8:4478:16838":{"crate_id":8,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"7:3132:33541":{"crate_id":7,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"23:7852:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"10:0:2715":{"crate_id":10,"path":["cfg_if"],"kind":"module"},"1:41871:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"18:3899:5526":{"crate_id":18,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:20909:12393":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"7:4256:4150":{"crate_id":7,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"7:8234:6117":{"crate_id":7,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"23:8192:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"7:10050:6160":{"crate_id":7,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"19:10840:4798":{"crate_id":19,"path":["object","read","SymbolIndex"],"kind":"struct"},"19:13564:5407":{"crate_id":19,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:44164:7333":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"13:2087:5978":{"crate_id":13,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"7:11035:3984":{"crate_id":7,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"7:11243:33269":{"crate_id":7,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"23:1515:23498":{"crate_id":23,"path":["serde","de","VariantAccess"],"kind":"trait"},"23:9110:128":{"crate_id":23,"path":["serde","ser","Error"],"kind":"trait"},"19:13257:5302":{"crate_id":19,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"23:4522:4453":{"crate_id":23,"path":["serde","de","value","I128Deserializer"],"kind":"struct"},"7:11003:4181":{"crate_id":7,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:30272:2713":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"18:4872:5543":{"crate_id":18,"path":["gimli","constants","DwDsc"],"kind":"struct"},"8:1576:14294":{"crate_id":8,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:21839:27404":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:7557:3886":{"crate_id":18,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:3510:3497":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"23:1873:2905":{"crate_id":23,"path":["serde","ser","SerializeTupleVariant"],"kind":"trait"},"7:9028:167":{"crate_id":7,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"13:675:3961":{"crate_id":13,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"7:7572:6042":{"crate_id":7,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:2744:2619":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"19:9748:3752":{"crate_id":19,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"20:719:4520":{"crate_id":20,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"20:652:4488":{"crate_id":20,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"7:11898:642":{"crate_id":7,"path":["std","f32"],"kind":"primitive"},"1:11938:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:20579:29246":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"8:587:13386":{"crate_id":8,"path":["libc","unix","servent"],"kind":"struct"},"23:784:36665":{"crate_id":23,"path":["serde","de","impls","StringInPlaceVisitor"],"kind":"struct"},"1:2768:2631":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"23:1297:23491":{"crate_id":23,"path":["serde","de","Expected"],"kind":"trait"},"23:7407:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"8:4845:16876":{"crate_id":8,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"19:9312:4640":{"crate_id":19,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"19:12236:5027":{"crate_id":19,"path":["object","macho","DylibModule32"],"kind":"struct"},"19:12592:5086":{"crate_id":19,"path":["object","macho","Nlist32"],"kind":"struct"},"7:5021:6071":{"crate_id":7,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:221:5972":{"crate_id":16,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"23:5742:36503":{"crate_id":23,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"1:10272:6255":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"7:4737:3438":{"crate_id":7,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:8214:5787":{"crate_id":18,"path":["gimli","read","value","Value"],"kind":"enum"},"1:42449:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"8:4757:16865":{"crate_id":8,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"19:10626:4778":{"crate_id":19,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:780:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:20938:12379":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"18:7077:19566":{"crate_id":18,"path":["gimli","read","op","DieReference"],"kind":"enum"},"19:10377:4749":{"crate_id":19,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:815:3483":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:6307:3869":{"crate_id":18,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:1351:3267":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"7:8806:4163":{"crate_id":7,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"7:3168:6058":{"crate_id":7,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:43084:6486":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"18:6400:5641":{"crate_id":18,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:40315:6221":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:7318:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:280:2694":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"23:871:36666":{"crate_id":23,"path":["serde","de","impls","OptionVisitor"],"kind":"struct"},"0:0:1700":{"crate_id":0,"path":["lock_api"],"kind":"module"},"1:7591:3270":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"20:671:4512":{"crate_id":20,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:7595:7244":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"18:5386:3748":{"crate_id":18,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"18:5779:3845":{"crate_id":18,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"7:9081:6156":{"crate_id":7,"path":["std","time","SystemTimeError"],"kind":"struct"},"23:7550:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"1:39358:5787":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"20:736:23480":{"crate_id":20,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:5976:3824":{"crate_id":18,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:39334:2660":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:4141:2613":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"19:13265:5304":{"crate_id":19,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:47721:4210":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:863:3485":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:46036:6564":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"18:5571:4073":{"crate_id":18,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"18:7437:5807":{"crate_id":18,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:6977:2595":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"13:119:3412":{"crate_id":13,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"7:2869:128":{"crate_id":7,"path":["std","io","error","Error"],"kind":"struct"},"23:1158:36670":{"crate_id":23,"path":["serde","de","impls","range","RangeVisitor"],"kind":"struct"},"0:292:2036":{"crate_id":0,"path":["lock_api","remutex","GetThreadId"],"kind":"trait"},"1:4042:7184":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"19:13324:5317":{"crate_id":19,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"7:8319:12931":{"crate_id":7,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:12330:24182":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"19:9866:4682":{"crate_id":19,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:7198:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"19:10440:4757":{"crate_id":19,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:21900:24659":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"23:1187:36508":{"crate_id":23,"path":["serde","de","impls","deserialize","deserialize","FieldVisitor"],"kind":"struct"},"18:5616:5554":{"crate_id":18,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"18:6876:3879":{"crate_id":18,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"23:5950:36503":{"crate_id":23,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"23:1309:1815":{"crate_id":23,"path":["serde","de","Deserialize"],"kind":"trait"},"7:3440:3018":{"crate_id":7,"path":["std","io","Write"],"kind":"trait"},"5:1078:32292":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"7:7460:4533":{"crate_id":7,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"7:2346:12811":{"crate_id":7,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:20536:3994":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"23:7247:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"8:7555:17055":{"crate_id":8,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"23:3319:35927":{"crate_id":23,"path":["serde","seed","InPlaceSeed"],"kind":"struct"},"1:6721:24114":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:2805:2644":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:40338:3977":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"23:8131:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"8:4404:16829":{"crate_id":8,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"18:6361:4080":{"crate_id":18,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:7202:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:42393:24650":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"18:7669:3889":{"crate_id":18,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:11424:6262":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"7:11902:743":{"crate_id":7,"path":["std","i32"],"kind":"primitive"},"1:21966:2791":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"7:3911:12864":{"crate_id":7,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:7005:6203":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"18:2668:5507":{"crate_id":18,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"7:10138:4175":{"crate_id":7,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"19:9959:4692":{"crate_id":19,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"7:2550:3430":{"crate_id":7,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"19:10068:4706":{"crate_id":19,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"7:480:3424":{"crate_id":7,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"19:13399:5340":{"crate_id":19,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"8:5862:17529":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"7:7697:6099":{"crate_id":7,"path":["std","error","private","Internal"],"kind":"struct"},"7:10865:4160":{"crate_id":7,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"8:4773:16867":{"crate_id":8,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"18:2404:5497":{"crate_id":18,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"19:10936:3786":{"crate_id":19,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:46370:6586":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"23:835:36514":{"crate_id":23,"path":["serde","de","impls","BytesVisitor"],"kind":"struct"},"1:20564:28791":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:21916:24731":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"8:4641:16854":{"crate_id":8,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"0:1207:2122":{"crate_id":0,"path":["lock_api","remutex","MappedReentrantMutexGuard"],"kind":"struct"},"7:8955:3937":{"crate_id":7,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"18:4327:5528":{"crate_id":18,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:4386:2605":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"5:1228:3644":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"13:731:3959":{"crate_id":13,"path":["hashbrown","map","Keys"],"kind":"struct"},"0:1215:218":{"crate_id":0,"path":["lock_api","rwlock","RwLockReadGuard"],"kind":"struct"},"18:6904:3881":{"crate_id":18,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"8:7526:17051":{"crate_id":8,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"18:6201:5622":{"crate_id":18,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"19:11924:4969":{"crate_id":19,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"7:5910:3440":{"crate_id":7,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:2522:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:22590:2792":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:963:3477":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"8:4865:16879":{"crate_id":8,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:45521:6546":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:40255:3973":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"13:783:3422":{"crate_id":13,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"4:60:2593":{"crate_id":4,"path":["scopeguard","Always"],"kind":"enum"},"19:13419:5346":{"crate_id":19,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"13:757:3497":{"crate_id":13,"path":["hashbrown","map","Drain"],"kind":"struct"},"18:5071:5549":{"crate_id":18,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:43956:6527":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:43479:6254":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:40149:6448":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"8:4920:16884":{"crate_id":8,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"23:154:4430":{"crate_id":23,"path":["serde","de","value","UnitDeserializer"],"kind":"struct"},"1:20742:12389":{"crate_id":1,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"1:40196:3530":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:41581:3267":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"19:8931:3770":{"crate_id":19,"path":["object","read","util","ByteString"],"kind":"struct"},"7:8141:3769":{"crate_id":7,"path":["std","io","Bytes"],"kind":"struct"},"8:4307:16821":{"crate_id":8,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"19:9577:4661":{"crate_id":19,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:8670:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:2763:2632":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"8:4423:16831":{"crate_id":8,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:40693:6237":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"8:1555:14292":{"crate_id":8,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"8:1657:14301":{"crate_id":8,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"19:10354:4748":{"crate_id":19,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"7:3449:33381":{"crate_id":7,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"7:11195:6084":{"crate_id":7,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"7:8091:3654":{"crate_id":7,"path":["std","io","IoSlice"],"kind":"struct"},"19:11136:4813":{"crate_id":19,"path":["object","archive","Header"],"kind":"struct"},"1:3197:2609":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"7:731:142":{"crate_id":7,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"8:4932:16885":{"crate_id":8,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"18:4702:5537":{"crate_id":18,"path":["gimli","constants","DwLang"],"kind":"struct"},"23:1451:23495":{"crate_id":23,"path":["serde","de","SeqAccess"],"kind":"trait"},"22:0:2726":{"crate_id":22,"path":["stable_deref_trait"],"kind":"module"},"23:2500:36392":{"crate_id":23,"path":["serde","__private","de","content","EnumRefDeserializer"],"kind":"struct"},"7:3060:4145":{"crate_id":7,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"7:1846:3652":{"crate_id":7,"path":["std","env","ArgsOs"],"kind":"struct"},"7:867:2958":{"crate_id":7,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"0:333:2077":{"crate_id":0,"path":["lock_api","remutex","ReentrantMutex"],"kind":"struct"},"19:10402:4751":{"crate_id":19,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"8:5058:16898":{"crate_id":8,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:880:3267":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"20:755:4526":{"crate_id":20,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"19:10416:4755":{"crate_id":19,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"8:579:13385":{"crate_id":8,"path":["libc","unix","tms"],"kind":"struct"},"7:8748:4181":{"crate_id":7,"path":["std","process","ExitStatus"],"kind":"struct"},"23:2233:35813":{"crate_id":23,"path":["serde","__private","de","content","ContentDeserializer"],"kind":"struct"},"5:7211:6206":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"8:5015:16894":{"crate_id":8,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"19:10270:4742":{"crate_id":19,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"8:6755:17958":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:42666:3999":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"19:8651:3748":{"crate_id":19,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:40677:6236":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"8:4681:12861":{"crate_id":8,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:40399:3978":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"23:5628:36510":{"crate_id":23,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"1:2470:7016":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"8:5022:16895":{"crate_id":8,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:9147:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"7:585:12770":{"crate_id":7,"path":["std","ascii","AsciiExt"],"kind":"trait"},"23:6183:36500":{"crate_id":23,"path":["serde","de","impls","deserialize","SeqVisitor"],"kind":"struct"},"1:42167:3021":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"7:11393:4159":{"crate_id":7,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"7:8925:33121":{"crate_id":7,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:43656:6440":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:43989:6272":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"7:11904:740":{"crate_id":7,"path":["std","i128"],"kind":"primitive"},"7:11493:6089":{"crate_id":7,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"7:11162:3939":{"crate_id":7,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"23:1148:36508":{"crate_id":23,"path":["serde","de","impls","range","deserialize","FieldVisitor"],"kind":"struct"},"1:40057:7199":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:41309:27402":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:4321:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:234:6481":{"crate_id":11,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"19:9617:4664":{"crate_id":19,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:0:443":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:8249:2687":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"19:12959:5245":{"crate_id":19,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"23:4436:4452":{"crate_id":23,"path":["serde","de","value","CharDeserializer"],"kind":"struct"},"19:12607:5090":{"crate_id":19,"path":["object","macho","Nlist64"],"kind":"struct"},"19:12224:5025":{"crate_id":19,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:11672:2787":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10804:6258":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:6578:3508":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:43763:6511":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"0:1199:2103":{"crate_id":0,"path":["lock_api","remutex","ArcReentrantMutexGuard"],"kind":"struct"},"5:1213:5978":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"18:6321:3871":{"crate_id":18,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:10053:6248":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"23:1259:36653":{"crate_id":23,"path":["serde","de","impls","FromStrVisitor"],"kind":"struct"},"18:5741:19559":{"crate_id":18,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:0:497":{"crate_id":1,"path":["core"],"kind":"module"},"5:1042:32294":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"7:8479:3267":{"crate_id":7,"path":["std","path","Iter"],"kind":"struct"},"5:5235:12670":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"23:1395:23494":{"crate_id":23,"path":["serde","de","Visitor"],"kind":"trait"},"19:13367:5329":{"crate_id":19,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"20:636:4505":{"crate_id":20,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"13:1634:2592":{"crate_id":13,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"23:8091:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"23:1057:36508":{"crate_id":23,"path":["serde","de","impls","deserialize","deserialize","FieldVisitor"],"kind":"struct"},"7:4845:12919":{"crate_id":7,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"7:3208:6060":{"crate_id":7,"path":["std","io","stdio","Stdout"],"kind":"struct"},"19:10000:4695":{"crate_id":19,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"19:9178:4638":{"crate_id":19,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"7:3210:6061":{"crate_id":7,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"19:11434:4066":{"crate_id":19,"path":["object","elf","Rel32"],"kind":"struct"},"1:4406:1809":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:4137:3437":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"7:4436:12895":{"crate_id":7,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:6218:4464":{"crate_id":18,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"19:11628:4906":{"crate_id":19,"path":["object","elf","NoteHeader64"],"kind":"struct"},"23:5482:36503":{"crate_id":23,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"7:11908:1498":{"crate_id":7,"path":["std","u64"],"kind":"primitive"},"1:39176:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"7:4574:34402":{"crate_id":7,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"20:531:4489":{"crate_id":20,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"0:9:1696":{"crate_id":0,"path":["lock_api","GuardNoSend"],"kind":"struct"},"16:160:5965":{"crate_id":16,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:2981:2654":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"5:7338:3515":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"8:1709:14306":{"crate_id":8,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"7:8160:6117":{"crate_id":7,"path":["std","net","tcp","Incoming"],"kind":"struct"},"19:9886:4684":{"crate_id":19,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"7:3680:4158":{"crate_id":7,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:44334:6535":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"7:11895:1481":{"crate_id":7,"path":["std","tuple"],"kind":"primitive"},"18:7366:19567":{"crate_id":18,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"7:11091:1870":{"crate_id":7,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:43792:6519":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"19:10303:4745":{"crate_id":19,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"19:386:4529":{"crate_id":19,"path":["object","read","any","Segment"],"kind":"struct"},"19:13169:5277":{"crate_id":19,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"7:3129:32859":{"crate_id":7,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"7:8968:4168":{"crate_id":7,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"20:644:4488":{"crate_id":20,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:43969:6531":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:10244:6253":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:4757:5539":{"crate_id":18,"path":["gimli","constants","DwId"],"kind":"struct"},"23:7310:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"5:5818:2676":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"23:5992:36503":{"crate_id":23,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"13:2192:35667":{"crate_id":13,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"19:12113:4995":{"crate_id":19,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:2524:5501":{"crate_id":18,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"12:0:2717":{"crate_id":12,"path":["adler"],"kind":"module"},"19:10569:4769":{"crate_id":19,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:46060:6565":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:7626:5824":{"crate_id":18,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"18:7635:5825":{"crate_id":18,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"8:6008:17541":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"19:8667:3749":{"crate_id":19,"path":["object","endian","BigEndian"],"kind":"struct"},"19:11615:4902":{"crate_id":19,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:40473:6232":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"7:6409:3453":{"crate_id":7,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:47732:4199":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"7:2540:3433":{"crate_id":7,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"19:13159:5276":{"crate_id":19,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:41597:2958":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:45622:6550":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"8:4553:16847":{"crate_id":8,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:481:18558":{"crate_id":11,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"13:1071:35675":{"crate_id":13,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"8:4827:16874":{"crate_id":8,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:21332:12384":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"7:11468:33777":{"crate_id":7,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:42898:6485":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"19:11484:4865":{"crate_id":19,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"7:7786:6100":{"crate_id":7,"path":["std","fs","ReadDir"],"kind":"struct"},"18:4510:5532":{"crate_id":18,"path":["gimli","constants","DwDs"],"kind":"struct"},"13:97:3694":{"crate_id":13,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:41951:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"18:6022:19561":{"crate_id":18,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:9526:3538":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"9:0:1543":{"crate_id":9,"path":["unwind"],"kind":"module"},"8:5779:17523":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"8:7509:17049":{"crate_id":8,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:8356:6243":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:9592:3541":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"7:11015:6147":{"crate_id":7,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"7:11903:744":{"crate_id":7,"path":["std","i64"],"kind":"primitive"},"1:2589:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"7:7791:6101":{"crate_id":7,"path":["std","fs","OpenOptions"],"kind":"struct"},"20:96:23470":{"crate_id":20,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"7:1982:185":{"crate_id":7,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:2407:3664":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"8:1546:14291":{"crate_id":8,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"8:5974:17537":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:39365:6304":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"18:7042:5734":{"crate_id":18,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"7:6188:3440":{"crate_id":7,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"7:7862:3669":{"crate_id":7,"path":["std","io","cursor","Cursor"],"kind":"struct"},"7:8124:3973":{"crate_id":7,"path":["std","io","Chain"],"kind":"struct"},"7:8154:6116":{"crate_id":7,"path":["std","io","Lines"],"kind":"struct"},"1:2788:2640":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"8:5880:17531":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:4255:2596":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"23:8364:36414":{"crate_id":23,"path":["serde","de","impls","deserialize","SocketAddrKind"],"kind":"enum"},"1:3931:3437":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"18:4480:5531":{"crate_id":18,"path":["gimli","constants","DwLle"],"kind":"struct"},"18:4728:5538":{"crate_id":18,"path":["gimli","constants","DwAddr"],"kind":"struct"},"23:2768:35752":{"crate_id":23,"path":["serde","__private","de","FlatInternallyTaggedAccess"],"kind":"struct"},"7:6538:2077":{"crate_id":7,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"19:9138:4637":{"crate_id":19,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:41530:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"18:6488:5645":{"crate_id":18,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"18:6236:3835":{"crate_id":18,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"19:11011:4803":{"crate_id":19,"path":["object","read","CodeView"],"kind":"struct"},"18:3815:5524":{"crate_id":18,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:47686:4209":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"7:5719:3933":{"crate_id":7,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"13:1091:3646":{"crate_id":13,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"23:1020:36506":{"crate_id":23,"path":["serde","de","impls","OsStringVisitor"],"kind":"struct"},"16:187:18650":{"crate_id":16,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"0:13:1697":{"crate_id":0,"path":["lock_api","mutex"],"kind":"module"},"18:4445:5530":{"crate_id":18,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:21803:3989":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"18:6990:5730":{"crate_id":18,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:41394:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:20804:12391":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"19:8360:19621":{"crate_id":19,"path":["object","common","ComdatKind"],"kind":"enum"},"5:2636:29916":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"18:5305:5551":{"crate_id":18,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:6597:3520":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"19:9275:35735":{"crate_id":19,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:20922:12826":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:10771:6257":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"9:32:18540":{"crate_id":9,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:21854:6279":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:22491:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:1630:588":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"23:984:36516":{"crate_id":23,"path":["serde","de","impls","PathVisitor"],"kind":"struct"},"8:7568:18523":{"crate_id":8,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"19:8389:19622":{"crate_id":19,"path":["object","common","SymbolKind"],"kind":"enum"},"18:3446:5520":{"crate_id":18,"path":["gimli","arch","RiscV"],"kind":"struct"},"7:11906:1496":{"crate_id":7,"path":["std","u16"],"kind":"primitive"},"13:1688:144":{"crate_id":13,"path":["hashbrown","set","HashSet"],"kind":"struct"},"8:4377:16826":{"crate_id":8,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"19:9772:4676":{"crate_id":19,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"8:4851:16877":{"crate_id":8,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"8:6651:14227":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"18:8025:5875":{"crate_id":18,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"0:1230:219":{"crate_id":0,"path":["lock_api","rwlock","RwLockWriteGuard"],"kind":"struct"},"7:4508:12912":{"crate_id":7,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"19:13135:5274":{"crate_id":19,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:3753:3418":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"7:11859:12775":{"crate_id":7,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"19:9895:4687":{"crate_id":19,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"23:2219:35929":{"crate_id":23,"path":["serde","__private","de","content","TagContentOtherFieldVisitor"],"kind":"struct"},"8:7491:17046":{"crate_id":8,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"19:13233:5297":{"crate_id":19,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"7:6586:217":{"crate_id":7,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:1422:5981":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"23:1107:36515":{"crate_id":23,"path":["serde","de","impls","deserialize","DurationVisitor"],"kind":"struct"},"8:5988:17538":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:42153:3020":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"23:512:23504":{"crate_id":23,"path":["serde","de","value","PairDeserializer"],"kind":"struct"},"19:12536:5079":{"crate_id":19,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:2929:2653":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"19:12449:5062":{"crate_id":19,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"8:4318:16822":{"crate_id":8,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:229:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:1242:5980":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"0:1168:167":{"crate_id":0,"path":["lock_api","mutex","MutexGuard"],"kind":"struct"},"18:6164:5620":{"crate_id":18,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"19:11785:4941":{"crate_id":19,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"8:526:13377":{"crate_id":8,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"18:5346:5552":{"crate_id":18,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:43778:6516":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"8:474:13372":{"crate_id":8,"path":["libc","unix","group"],"kind":"struct"},"7:11688:3473":{"crate_id":7,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"7:1768:610":{"crate_id":7,"path":["std","env"],"kind":"module"},"1:3169:2663":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:12:2728":{"crate_id":6,"path":["owning_ref","OwningRefMut"],"kind":"struct"},"19:10761:19630":{"crate_id":19,"path":["object","read","FileKind"],"kind":"enum"},"1:43153:3677":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:45561:6548":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"8:6848:17965":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"19:8823:3767":{"crate_id":19,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:5032:5548":{"crate_id":18,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:3088:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"19:10660:3780":{"crate_id":19,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:2264:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:7588:3269":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:21431:3987":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:44131:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"7:11027:33135":{"crate_id":7,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"8:6002:17540":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:40684:6082":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"8:7520:17050":{"crate_id":8,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:5485:3508":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:40718:6239":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"7:11891:1049":{"crate_id":7,"path":["std","pointer"],"kind":"primitive"},"7:530:3426":{"crate_id":7,"path":["std","thread","Packet"],"kind":"struct"},"0:1238:2323":{"crate_id":0,"path":["lock_api","rwlock","ArcRwLockWriteGuard"],"kind":"struct"},"1:7632:27323":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"18:5655:4077":{"crate_id":18,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"23:7328:36504":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"7:10416:6058":{"crate_id":7,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"7:0:1389":{"crate_id":7,"path":["std"],"kind":"module"},"8:1614:14298":{"crate_id":8,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"23:409:23503":{"crate_id":23,"path":["serde","de","value","ExpectedInSeq"],"kind":"struct"},"3:0:2588":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"7:5693:6081":{"crate_id":7,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"19:9188:35739":{"crate_id":19,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:9161:3024":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"7:8948:6155":{"crate_id":7,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:22425:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"15:226:3901":{"crate_id":15,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"23:172:4431":{"crate_id":23,"path":["serde","de","value","U32Deserializer"],"kind":"struct"},"9:79:18547":{"crate_id":9,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"15:0:2720":{"crate_id":15,"path":["std_detect"],"kind":"module"},"23:2890:36475":{"crate_id":23,"path":["serde","__private","ser","content","SerializeTupleVariantAsMapValue"],"kind":"struct"},"18:4596:5535":{"crate_id":18,"path":["gimli","constants","DwVis"],"kind":"struct"},"7:11892:312":{"crate_id":7,"path":["std","array"],"kind":"primitive"},"5:6695:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:3622:3477":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"19:10478:4760":{"crate_id":19,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"18:5811:5568":{"crate_id":18,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:39216:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:1612:3477":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"19:11891:4961":{"crate_id":19,"path":["object","macho","LcStr"],"kind":"struct"},"19:8490:19625":{"crate_id":19,"path":["object","common","RelocationEncoding"],"kind":"enum"},"7:5067:191":{"crate_id":7,"path":["std","path","PathBuf"],"kind":"struct"},"19:10589:4774":{"crate_id":19,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:40069:6441":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"7:9877:6473":{"crate_id":7,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"18:7596:19568":{"crate_id":18,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"7:5570:3441":{"crate_id":7,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:41991:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"19:13101:3801":{"crate_id":19,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"19:12433:5058":{"crate_id":19,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"13:1879:5986":{"crate_id":13,"path":["hashbrown","set","Union"],"kind":"struct"},"19:8632:19607":{"crate_id":19,"path":["object","endian","Endianness"],"kind":"enum"},"8:554:13381":{"crate_id":8,"path":["libc","unix","winsize"],"kind":"struct"},"18:4540:5533":{"crate_id":18,"path":["gimli","constants","DwEnd"],"kind":"struct"},"7:9374:129":{"crate_id":7,"path":["std","sys","unix","fs","File"],"kind":"struct"},"8:5071:16900":{"crate_id":8,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:41606:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"18:6575:19563":{"crate_id":18,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:12597:2692":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"5:4207:3267":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"23:4178:4449":{"crate_id":23,"path":["serde","de","value","UsizeDeserializer"],"kind":"struct"},"13:2204:35664":{"crate_id":13,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:6248:3497":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"19:13385:5333":{"crate_id":19,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"7:11900:745":{"crate_id":7,"path":["std","i8"],"kind":"primitive"},"7:11911:1553":{"crate_id":7,"path":["std","usize"],"kind":"primitive"},"23:6022:36503":{"crate_id":23,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"19:8310:19620":{"crate_id":19,"path":["object","common","SectionKind"],"kind":"enum"},"23:0:1620":{"crate_id":23,"path":["serde"],"kind":"module"},"7:10652:34388":{"crate_id":7,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:215:5970":{"crate_id":16,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"7:8730:6146":{"crate_id":7,"path":["std","process","CommandArgs"],"kind":"struct"},"7:11837:6183":{"crate_id":7,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:21088:12380":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:3775:3477":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"19:12059:4987":{"crate_id":19,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:39970:6433":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:3030:5517":{"crate_id":18,"path":["gimli","common","DwoId"],"kind":"struct"},"19:12388:5051":{"crate_id":19,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"19:11969:4975":{"crate_id":19,"path":["object","macho","Section64"],"kind":"struct"},"19:11446:4062":{"crate_id":19,"path":["object","elf","Rela32"],"kind":"struct"},"1:42695:6481":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"8:6706:17956":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"8:5747:17520":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"19:11813:4948":{"crate_id":19,"path":["object","macho","FatHeader"],"kind":"struct"},"13:1866:5984":{"crate_id":13,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:2780:2633":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"19:13744:5448":{"crate_id":19,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"19:11832:4953":{"crate_id":19,"path":["object","macho","FatArch64"],"kind":"struct"},"1:30836:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"18:2764:5511":{"crate_id":18,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:219:3897":{"crate_id":17,"path":["addr2line","RangeAttributes"],"kind":"struct"},"19:11234:4832":{"crate_id":19,"path":["object","elf","FileHeader32"],"kind":"struct"},"20:690:4515":{"crate_id":20,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"19:13625:5414":{"crate_id":19,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:43407:6501":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:42458:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:39982:24729":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:2908:3695":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"18:7065:5736":{"crate_id":18,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:40356:6458":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:2741:2617":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"7:4760:12877":{"crate_id":7,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:8129:5885":{"crate_id":18,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"23:339:4436":{"crate_id":23,"path":["serde","de","value","BytesDeserializer"],"kind":"struct"},"1:41671:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:4904:5544":{"crate_id":18,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:44096:7308":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:6336:5636":{"crate_id":18,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"19:10257:4741":{"crate_id":19,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:9362:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"5:1432:3961":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"19:8953:3750":{"crate_id":19,"path":["object","read","util","StringTable"],"kind":"struct"},"19:12372:5049":{"crate_id":19,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:12382:6275":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:43375:6251":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:11249:7266":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"12:36:35662":{"crate_id":12,"path":["adler","algo","U32X4"],"kind":"struct"},"13:867:5977":{"crate_id":13,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:4782:28372":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"23:3334:128":{"crate_id":23,"path":["serde","de","value","Error"],"kind":"struct"},"21:0:1031":{"crate_id":21,"path":["panic_unwind"],"kind":"module"},"18:2426:5498":{"crate_id":18,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"19:12419:5056":{"crate_id":19,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:43665:6213":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"19:9721:4674":{"crate_id":19,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"19:12259:5036":{"crate_id":19,"path":["object","macho","DylibModule64"],"kind":"struct"},"7:6236:206":{"crate_id":7,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"8:6110:17571":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"8:4960:16889":{"crate_id":8,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"19:13219:5294":{"crate_id":19,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:43357:6114":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:40206:6449":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"5:211:3476":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"7:8208:6066":{"crate_id":7,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"23:299:4435":{"crate_id":23,"path":["serde","de","value","CowStrDeserializer"],"kind":"struct"},"20:538:3737":{"crate_id":20,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"8:5065:16899":{"crate_id":8,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:7014:3497":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:9155:3022":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:4251:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"19:12046:4985":{"crate_id":19,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:32147:2622":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"8:7258:18335":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"8:4294:16820":{"crate_id":8,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"23:1199:36671":{"crate_id":23,"path":["serde","de","impls","deserialize","BoundVisitor"],"kind":"struct"},"19:10142:19713":{"crate_id":19,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"7:11909:1495":{"crate_id":7,"path":["std","u128"],"kind":"primitive"},"5:7266:6210":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"23:2803:36327":{"crate_id":23,"path":["serde","__private","ser","TaggedSerializer"],"kind":"struct"},"8:5870:17530":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"8:653:13434":{"crate_id":8,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:4366:3437":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"19:8718:3764":{"crate_id":19,"path":["object","endian","U32Bytes"],"kind":"struct"},"19:11600:4896":{"crate_id":19,"path":["object","elf","Vernaux"],"kind":"struct"},"0:617:2241":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockUpgradeDowngrade"],"kind":"trait"},"8:4344:16824":{"crate_id":8,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:41243:4192":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"19:562:4533":{"crate_id":19,"path":["object","read","any","Symbol"],"kind":"struct"},"19:11319:4860":{"crate_id":19,"path":["object","elf","SectionHeader64"],"kind":"struct"},"7:3135:33540":{"crate_id":7,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"8:1908:14453":{"crate_id":8,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:9803:12826":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:7148:12653":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"13:1873:5985":{"crate_id":13,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"19:11721:4912":{"crate_id":19,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"7:1568:3497":{"crate_id":7,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:7030:29945":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"7:2372:12821":{"crate_id":7,"path":["std","fs","read_dir"],"kind":"function"},"5:7081:2958":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:44084:7307":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"18:6854:5712":{"crate_id":18,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:9405:7259":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"18:6431:5643":{"crate_id":18,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"23:1094:36508":{"crate_id":23,"path":["serde","de","impls","deserialize","deserialize","FieldVisitor"],"kind":"struct"},"7:911:3418":{"crate_id":7,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"18:7803:5834":{"crate_id":18,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"7:10647:33244":{"crate_id":7,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:22458:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:45792:6556":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:2774:2634":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"23:927:36513":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","VecInPlaceVisitor"],"kind":"struct"},"1:3234:2610":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:2348:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"8:4527:16844":{"crate_id":8,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"0:625:217":{"crate_id":0,"path":["lock_api","rwlock","RwLock"],"kind":"struct"},"7:959:5977":{"crate_id":7,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:6293:5635":{"crate_id":18,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:6460:3875":{"crate_id":18,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"8:5051:16897":{"crate_id":8,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:8838:27322":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"8:6024:35597":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"18:6793:5707":{"crate_id":18,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"19:11556:4879":{"crate_id":19,"path":["object","elf","Verdef"],"kind":"struct"},"23:2323:36393":{"crate_id":23,"path":["serde","__private","de","content","EnumDeserializer"],"kind":"struct"},"1:46606:6590":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"23:5638:36503":{"crate_id":23,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"23:1963:36667":{"crate_id":23,"path":["serde","__private","de","borrow_cow_str","CowStrVisitor"],"kind":"struct"},"5:783:3480":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"8:6691:17954":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"18:2378:5496":{"crate_id":18,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"7:875:3959":{"crate_id":7,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"19:13612:5408":{"crate_id":19,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"0:614:2232":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockUpgradeFair"],"kind":"trait"},"7:2614:6057":{"crate_id":7,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"23:1331:1816":{"crate_id":23,"path":["serde","de","Deserializer"],"kind":"trait"},"19:9424:4648":{"crate_id":19,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"8:4492:16840":{"crate_id":8,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"15:110:35721":{"crate_id":15,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"19:1034:4535":{"crate_id":19,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"7:8469:6068":{"crate_id":7,"path":["std","path","Components"],"kind":"struct"},"23:7356:36509":{"crate_id":23,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"19:10691:19738":{"crate_id":19,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:43315:6498":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"19:10681:4782":{"crate_id":19,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:20990:12383":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"8:6800:17961":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:22524:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"20:548:141":{"crate_id":20,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"7:5334:4153":{"crate_id":7,"path":["std","process","ChildStdin"],"kind":"struct"},"18:7767:19569":{"crate_id":18,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"7:11894:1397":{"crate_id":7,"path":["std","str"],"kind":"primitive"},"1:4:1014":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"5:3163:29948":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:6999:2958":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"19:10491:4761":{"crate_id":19,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"8:4726:16861":{"crate_id":8,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"11:502:4095":{"crate_id":11,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"18:2337:3810":{"crate_id":18,"path":["gimli","common","LineEncoding"],"kind":"struct"},"7:7670:3929":{"crate_id":7,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"23:6063:36503":{"crate_id":23,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"8:6700:17955":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:47666:4197":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:40022:6438":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:1981:3669":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"13:859:5976":{"crate_id":13,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:46716:6593":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:7259:3260":{"crate_id":18,"path":["gimli","read","op","Location"],"kind":"enum"},"7:3170:6059":{"crate_id":7,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"23:6225:36507":{"crate_id":23,"path":["serde","de","impls","deserialize_in_place","SeqInPlaceVisitor"],"kind":"struct"},"1:22293:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"7:6485:12960":{"crate_id":7,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:3995:6214":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"23:9175:35961":{"crate_id":23,"path":["serde","__private","de","content","Content"],"kind":"enum"},"19:13651:5423":{"crate_id":19,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:2691:1883":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"8:6136:17572":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"19:13344:5324":{"crate_id":19,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"7:8485:6144":{"crate_id":7,"path":["std","path","Ancestors"],"kind":"struct"},"7:10209:6077":{"crate_id":7,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"19:13181:5280":{"crate_id":19,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"8:7538:17053":{"crate_id":8,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"19:8420:19623":{"crate_id":19,"path":["object","common","SymbolScope"],"kind":"enum"},"7:3939:12867":{"crate_id":7,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"7:7808:6102":{"crate_id":7,"path":["std","fs","Permissions"],"kind":"struct"},"20:481:4486":{"crate_id":20,"path":["memchr","cow","CowBytes"],"kind":"struct"},"8:6821:17963":{"crate_id":8,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"23:1085:7156":{"crate_id":23,"path":["serde","de","impls","deserialize","Field"],"kind":"enum"},"19:9453:19642":{"crate_id":19,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"7:6907:3455":{"crate_id":7,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"19:12576:5084":{"crate_id":19,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:2839:2647":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"19:11861:4958":{"crate_id":19,"path":["object","macho","MachHeader64"],"kind":"struct"},"7:6101:3450":{"crate_id":7,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"8:62:13002":{"crate_id":8,"path":["libc","unix","DIR"],"kind":"enum"},"8:1588:14295":{"crate_id":8,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:3872:5525":{"crate_id":18,"path":["gimli","constants","DwCfa"],"kind":"struct"},"19:13803:5464":{"crate_id":19,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"23:782:36661":{"crate_id":23,"path":["serde","de","impls","StringVisitor"],"kind":"struct"},"20:574:4488":{"crate_id":20,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"7:6865:6997":{"crate_id":7,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"23:1986:36654":{"crate_id":23,"path":["serde","__private","de","borrow_cow_bytes","CowBytesVisitor"],"kind":"struct"},"5:265:3477":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"18:5708:3843":{"crate_id":18,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"19:9596:4662":{"crate_id":19,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"7:10826:4094":{"crate_id":7,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"19:10857:19632":{"crate_id":19,"path":["object","read","SymbolSection"],"kind":"enum"},"1:40102:6446":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:40083:7200":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"18:5797:3850":{"crate_id":18,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"13:279:3638":{"crate_id":13,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"}},"external_crates":{"23":{"name":"serde","html_root_url":"https://docs.rs/serde/1.0.143/"},"20":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"stable_deref_trait","html_root_url":null},"19":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"7":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"9":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"owning_ref","html_root_url":null},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}