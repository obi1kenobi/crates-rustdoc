{"root":"0:0:2596","crate_version":"0.16.0","includes_private":true,"index":{"b:2:2548-0:226:1786":{"id":"b:2:2548-0:226:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[283,0],"end":[542,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:146:939","0:147:1851","0:148:1787","0:149:1797","0:150:1800","0:151:1804","0:152:1811","0:153:1807","0:154:1815"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:149:1797":{"id":"0:149:1797","crate_id":0,"name":"initial_indent","span":{"filename":"src/lib.rs","begin":[388,4],"end":[393,5]},"visibility":"public","docs":"Change [`self.initial_indent`]. The initial indentation is\nused on the very first line of output.\n\n# Examples\n\nClassic paragraph indentation can be achieved by specifying an\ninitial indentation and wrapping each paragraph by itself:\n\n```\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(16).initial_indent(\"    \");\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"    This is a\",\n                \"little example.\"]);\n```\n\n[`self.initial_indent`]: #structfield.initial_indent","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["indent",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:2855":{"id":"0:194:2855","crate_id":0,"name":"Custom","span":{"filename":"src/word_splitters.rs","begin":[88,4],"end":[88,40]},"visibility":"default","docs":"Use a custom function as the word splitter.\n\nThis varian lets you implement a custom word splitter using\nyour own function.\n\n# Examples\n\n```\nuse textwrap::WordSplitter;\n\nfn split_at_underscore(word: &str) -> Vec<usize> {\n    word.match_indices('_').map(|(idx, _)| idx + 1).collect()\n}\n\nlet word_splitter = WordSplitter::Custom(split_at_underscore);\nassert_eq!(word_splitter.split_points(\"a_long_identifier\"),\n           vec![2, 7]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:196:1606"]},"discriminant":null}}},"a:2:8250:10597-0:62:3349":{"id":"a:2:8250:10597-0:62:3349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8250:10597","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineNumbers","id":"0:62:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:8249:10598-0:270:2183":{"id":"a:2:8249:10598-0:270:2183","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8249:10598","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:219:668":{"id":"0:219:668","crate_id":0,"name":"fmt","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,9],"end":[185,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2248-0:216:3071":{"id":"b:2:2248-0:216:3071","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2250:1777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3319-0:294:1791":{"id":"b:2:3319-0:294:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[233,9],"end":[233,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:306:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:25:2879":{"id":"0:25:2879","crate_id":0,"name":"strip_ansi_escape_sequences","span":{"filename":"src/word_separators.rs","begin":[231,0],"end":[243,1]},"visibility":{"restricted":{"parent":"0:11:1781","path":"::word_separators"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"unicode-linebreak\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:3349":{"id":"0:62:3349","crate_id":0,"name":"LineNumbers","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[160,0],"end":[162,1]},"visibility":{"restricted":{"parent":"0:55:3069","path":"::wrap_algorithms::optimal_fit"}},"docs":"Cache for line numbers. This is necessary to avoid a O(n**2)\nbehavior when computing line numbers in [`wrap_optimal_fit`].","links":{"`wrap_optimal_fit`":"0:71:3070"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:63:3350"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:64","a:2:2701:228-0:62:3349","a:2:8249:10598-0:62:3349","a:2:8250:10597-0:62:3349","a:2:2684:220-0:62:3349","a:2:2741:3817-0:62:3349","b:2:2542-0:62:3349","b:2:2248-0:62:3349","b:2:2553-0:62:3349","b:2:2251-0:62:3349","b:2:2538-0:62:3349","b:2:3319-0:62:3349","b:2:2548-0:62:3349"]}}},"2:12013:39807":{"id":"2:12013:39807","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12041:39813":{"id":"2:12041:39813","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43621:9036","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254:613":{"id":"0:254:613","crate_id":0,"name":"eq","span":{"filename":"src/line_ending.rs","begin":[7,29],"end":[7,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2251-0:216:3071":{"id":"b:2:2251-0:216:3071","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2253:3352"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5387:40477":{"id":"5:5387:40477","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[18,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:104:316"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8249:10598-0:62:3349":{"id":"a:2:8249:10598-0:62:3349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8249:10598","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineNumbers","id":"0:62:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2553-0:62:3349":{"id":"b:2:2553-0:62:3349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineNumbers","id":"0:62:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6:1779":{"id":"0:6:1779","crate_id":0,"name":"dedent","span":{"filename":"src/indentation.rs","begin":[95,0],"end":[150,1]},"visibility":"public","docs":"Removes common leading whitespace from each line.\n\nThis function will look at each non-empty line and determine the\nmaximum amount of whitespace that can be removed from all lines:\n\n```\nuse textwrap::dedent;\n\nassert_eq!(dedent(\"\n    1st line\n      2nd line\n    3rd line\n\"), \"\n1st line\n  2nd line\n3rd line\n\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:939":{"id":"0:19:939","crate_id":0,"name":"new","span":{"filename":"src/word_separators.rs","begin":[176,4],"end":[186,5]},"visibility":"public","docs":"Create a new word separator.\n\nThe best available algorithm is used by default, i.e.,\n[`WordSeparator::UnicodeBreakProperties`] if available,\notherwise [`WordSeparator::AsciiSpace`].","links":{"`WordSeparator::UnicodeBreakProperties`":"0:181:2353","`WordSeparator::AsciiSpace`":"0:179:2285"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2248-0:242:1788":{"id":"b:2:2248-0:242:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2250:1777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:119:3246":{"id":"0:119:3246","crate_id":0,"name":"whitespace_width","span":{"filename":"src/core.rs","begin":[203,4],"end":[203,38]},"visibility":"default","docs":"Displayed width of the whitespace that must follow the word\nwhen the word is not at the end of a line.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12016:39809":{"id":"2:12016:39809","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12014:39808"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2741:3817-0:226:1786":{"id":"a:2:2741:3817-0:226:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:3817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:237":{"id":"0:237","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[33,9],"end":[33,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:238:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3321:1491":{"id":"2:3321:1491","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39341:8822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[191,0],"end":[195,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:84:613":{"id":"0:84:613","crate_id":0,"name":"eq","span":{"filename":"src/wrap_algorithms.rs","begin":[110,4],"end":[117,5]},"visibility":"default","docs":"Compare two wrap algorithms.\n\n```\nuse textwrap::WrapAlgorithm;\n\nassert_eq!(WrapAlgorithm::FirstFit, WrapAlgorithm::FirstFit);\n#[cfg(feature = \"smawk\")] {\n    assert_eq!(WrapAlgorithm::new_optimal_fit(), WrapAlgorithm::new_optimal_fit());\n}\n```\n\nNote that `WrapAlgorithm::Custom1` values never compare equal:\n\n```\nuse textwrap::WrapAlgorithm;\n\nassert_ne!(WrapAlgorithm::Custom(|words, line_widths| vec![words]),\n           WrapAlgorithm::Custom(|words, line_widths| vec![words]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:3130":{"id":"0:89:3130","crate_id":0,"name":"new_optimal_fit","span":{"filename":"src/wrap_algorithms.rs","begin":[155,4],"end":[157,5]},"visibility":"public","docs":"New [`WrapAlgorithm::OptimalFit`] with default penalties. This\nworks well for monospace text.\n\n**Note:** Only available when the `smawk` Cargo feature is\nenabled.","links":{"`WrapAlgorithm::OptimalFit`":"0:229:3093"},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100-0:226:1786":{"id":"0:100-0:226:1786","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,0],"end":[219,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"wrap_algorithms::WrapAlgorithm","name":"WrapAlgorithm","id":"0:226:1786","glob":false}}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,9],"end":[7,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:248:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5390:40478":{"id":"5:5390:40478","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:234:1606":{"id":"0:234:1606","crate_id":0,"name":"0","span":{"filename":"src/wrap_algorithms.rs","begin":[87,11],"end":[87,97]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"function_pointer":{"decl":{"inputs":[["words",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}],["line_widths",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"primitive":"usize"}}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6695:244","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}}}},"0:258:2031":{"id":"0:258:2031","crate_id":0,"name":"NonEmptyLines","span":{"filename":"src/line_ending.rs","begin":[35,0],"end":[35,49]},"visibility":"crate","docs":"An iterator over the lines of a string, as tuples of string slice\nand [`LineEnding`] value; it only emits non-empty lines (i.e. having\nsome content before the terminating `\\r\\n` or `\\n`).\n\nThis struct is used internally by the library.","links":{"`LineEnding`":"0:242:1788"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":["0:261:1606"]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:2701:228-0:258:2031","a:2:8249:10598-0:258:2031","a:2:8250:10597-0:258:2031","a:2:2684:220-0:258:2031","a:2:2741:3817-0:258:2031","b:2:2542-0:258:2031","b:2:2248-0:258:2031","b:2:2553-0:258:2031","b:2:2251-0:258:2031","b:2:7206-0:258:2031","b:2:2538-0:258:2031","b:2:3319-0:258:2031","b:2:2548-0:258:2031","b:5:684-0:258:2031","0:262","0:105","0:265","0:268"]}}},"a:2:8249:10598-0:242:1788":{"id":"a:2:8249:10598-0:242:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8249:10598","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2701:228-0:202:3072":{"id":"a:2:2701:228-0:202:3072","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2553-0:242:1788":{"id":"b:2:2553-0:242:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:201:423":{"id":"0:201:423","crate_id":0,"name":"clone","span":{"filename":"src/word_splitters.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2684:220-0:178:1782":{"id":"a:2:2684:220-0:178:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2612:10260":{"id":"2:2612:10260","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3382:8720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:1970":{"id":"0:90:1970","crate_id":0,"name":"wrap","span":{"filename":"src/wrap_algorithms.rs","begin":[165,4],"end":[188,5]},"visibility":"public","docs":"Wrap words according to line widths.\n\nThe `line_widths` slice gives the target line width for each\nline (the last slice element is repeated as necessary). This\ncan be used to implement hanging indentation.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["words",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}],["line_widths",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"primitive":"usize"}}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6695:244","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2552:1478":{"id":"2:2552:1478","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[170,0],"end":[200,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:19:939","0:20:2179"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2553-0:226:1786":{"id":"b:2:2553-0:226:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2701:228-0:242:1788":{"id":"a:2:2701:228-0:242:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:248:423":{"id":"0:248:423","crate_id":0,"name":"clone","span":{"filename":"src/line_ending.rs","begin":[7,9],"end":[7,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2548-0:178:1782":{"id":"b:2:2548-0:178:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:107:2857":{"id":"0:107:2857","crate_id":0,"name":"Item","span":{"filename":"src/line_ending.rs","begin":[38,4],"end":[38,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]}}}},"0:131":{"id":"0:131","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[304,0],"end":[323,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Fragment","id":"0:117:3073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:132:1586","0:133:3246","0:134:3245"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:684-0:294:1791":{"id":"b:5:684-0:294:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:686:2191","5:687:2192","5:688:4055"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:272:2188":{"id":"0:272:2188","crate_id":0,"name":"word","span":{"filename":"src/core.rs","begin":[217,4],"end":[217,21]},"visibility":"public","docs":"Word content.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"b:2:2251-0:258:2031":{"id":"b:2:2251-0:258:2031","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2253:3352"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[277,0],"end":[281,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:143:694"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12011:811":{"id":"2:12011:811","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11888:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,16],"end":[185,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:222:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2684:220-0:226:1786":{"id":"a:2:2684:220-0:226:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2741:3817-0:62:3349":{"id":"a:2:2741:3817-0:62:3349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:3817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineNumbers","id":"0:62:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3319-0:242:1788":{"id":"b:2:3319-0:242:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2542-0:258:2031":{"id":"b:2:2542-0:258:2031","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:212:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:161:2008":{"id":"0:161:2008","crate_id":0,"name":"unfill","span":{"filename":"src/lib.rs","begin":[690,0],"end":[742,1]},"visibility":"public","docs":"Unpack a paragraph of already-wrapped text.\n\nThis function attempts to recover the original text from a single\nparagraph of text produced by the [`fill`] function. This means\nthat it turns\n\n```text\ntextwrap: a small\nlibrary for\nwrapping text.\n```\n\nback into\n\n```text\ntextwrap: a small library for wrapping text.\n```\n\nIn addition, it will recognize a common prefix and a common line\nending among the lines.\n\nThe prefix of the first line is returned in\n[`Options::initial_indent`] and the prefix (if any) of the the\nother lines is returned in [`Options::subsequent_indent`].\n\nLine ending is returned in [`Options::line_ending`]. If line ending\ncan not be confidently detected (mixed or no line endings in the\ninput), [`LineEnding::LF`] will be returned.\n\nIn addition to `' '`, the prefixes can consist of characters used\nfor unordered lists (`'-'`, `'+'`, and `'*'`) and block quotes\n(`'>'`) in Markdown as well as characters often used for inline\ncomments (`'#'` and `'/'`).\n\nThe text must come from a single wrapped paragraph. This means\nthat there can be no empty lines (`\"\\n\\n\"` or `\"\\r\\n\\r\\n\"`) within\nthe text. It is unspecified what happens if `unfill` is called on\nmore than one paragraph of text.\n\n# Examples\n\n```\nuse textwrap::{LineEnding, unfill};\n\nlet (text, options) = unfill(\"\\\n* This is an\n  example of\n  a list item.\n\");\n\nassert_eq!(text, \"This is an example of a list item.\\n\");\nassert_eq!(options.initial_indent, \"* \");\nassert_eq!(options.subsequent_indent, \"  \");\nassert_eq!(options.line_ending, LineEnding::LF);\n```","links":{"`LineEnding::LF`":"0:245:1837","`Options::subsequent_indent`":"0:150:1800","`fill`":"0:157:660","`Options::initial_indent`":"0:149:1797","`Options::line_ending`":"0:148:1787"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12037:2289":{"id":"2:12037:2289","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43343:6940","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12038:37393":{"id":"2:12038:37393","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12039:37385"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43631:9037","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2542-0:202:3072":{"id":"b:2:2542-0:202:3072","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12103:2728":{"id":"2:12103:2728","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:2021":{"id":"2:12110:2021","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:15831"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2741:3817-0:258:2031":{"id":"a:2:2741:3817-0:258:2031","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:3817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2248-0:294:1791":{"id":"b:2:2248-0:294:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2250:1777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2542-0:62:3349":{"id":"b:2:2542-0:62:3349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineNumbers","id":"0:62:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:55:3069":{"id":"0:55:3069","crate_id":0,"name":"optimal_fit","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[1,0],"end":[433,1]},"visibility":{"restricted":{"parent":"0:54:1785","path":"::wrap_algorithms"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:202:3072","0:62:3349","0:216:3071","0:71:3070"],"is_stripped":false}}},"2:12135:39825":{"id":"2:12135:39825","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4535:39825"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43656:8958","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135:1804":{"id":"0:135:1804","crate_id":0,"name":"break_words","span":{"filename":"src/core.rs","begin":[330,0],"end":[343,1]},"visibility":"public","docs":"Forcibly break words wider than `line_width` into smaller words.\n\nThis simply calls [`Word::break_apart`] on words that are too\nwide. This means that no extra `'-'` is inserted, the word is\nsimply broken into smaller pieces.","links":{"`Word::break_apart`":"0:127:3602"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["words",{"generic":"I"}],["line_width",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Vec","id":"5:6695:244","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:7208:2857":{"id":"2:7208:2857","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"2:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:204:3302":{"id":"0:204:3302","crate_id":0,"name":"overflow_penalty","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[70,4],"end":[70,31]},"visibility":"public","docs":"Per-character cost for lines that overflow the target line width.\n\nWith a default value of 50², every single character costs as\nmuch as leaving a gap of 50 characters behind. This is because\nwe assign as cost of `gap * gap` to a short line. When\nwrapping monospace text, we can overflow the line by 1\ncharacter in extreme cases:\n\n```\nuse textwrap::core::Word;\nuse textwrap::wrap_algorithms::{wrap_optimal_fit, Penalties};\n\nlet short = \"foo \";\nlet long = \"x\".repeat(50);\nlet length = (short.len() + long.len()) as f64;\nlet fragments = vec![Word::from(short), Word::from(&long)];\nlet penalties = Penalties::new();\n\n// Perfect fit, both words are on a single line with no overflow.\nlet wrapped = wrap_optimal_fit(&fragments, &[length], &penalties).unwrap();\nassert_eq!(wrapped, vec![&[Word::from(short), Word::from(&long)]]);\n\n// The words no longer fit, yet we get a single line back. While\n// the cost of overflow (`1 * 2500`) is the same as the cost of the\n// gap (`50 * 50 = 2500`), the tie is broken by `nline_penalty`\n// which makes it cheaper to overflow than to use two lines.\nlet wrapped = wrap_optimal_fit(&fragments, &[length - 1.0], &penalties).unwrap();\nassert_eq!(wrapped, vec![&[Word::from(short), Word::from(&long)]]);\n\n// The cost of overflow would be 2 * 2500, whereas the cost of\n// the gap is only `49 * 49 + nline_penalty = 2401 + 1000 =\n// 3401`. We therefore get two lines.\nlet wrapped = wrap_optimal_fit(&fragments, &[length - 2.0], &penalties).unwrap();\nassert_eq!(wrapped, vec![&[Word::from(short)],\n                         &[Word::from(&long)]]);\n```\n\nThis only happens if the overflowing word is 50 characters\nlong _and_ if the word overflows the line by exactly one\ncharacter. If it overflows by more than one character, the\noverflow penalty will quickly outgrow the cost of the gap, as\nseen above.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"a:2:2684:220-0:270:2183":{"id":"a:2:2684:220-0:270:2183","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:143:694":{"id":"0:143:694","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[278,4],"end":[280,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["width",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12131:33138":{"id":"2:12131:33138","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39552:33134","Self::is_ascii":"2:12130:32648"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39552:33134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5399:40480":{"id":"5:5399:40480","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:280:2856","`String`":"5:7241:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:2856","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:4533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:694":{"id":"0:126:694","crate_id":0,"name":"from","span":{"filename":"src/core.rs","begin":[239,4],"end":[247,5]},"visibility":"public","docs":"Construct a `Word` from a string.\n\nA trailing stretch of `' '` is automatically taken to be the\nwhitespace part of the word.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["word",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:10406":{"id":"2:12137:10406","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4536:10406"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43665:8721","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2248-0:226:1786":{"id":"b:2:2248-0:226:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2250:1777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2251-0:202:3072":{"id":"b:2:2251-0:202:3072","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2253:3352"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2741:3817-0:242:1788":{"id":"a:2:2741:3817-0:242:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:3817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,29],"end":[22,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2694:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:209:423":{"id":"0:209:423","crate_id":0,"name":"clone","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:37385":{"id":"2:12039:37385","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12038:37393"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43640:9038","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245:1837":{"id":"0:245:1837","crate_id":0,"name":"LF","span":{"filename":"src/line_ending.rs","begin":[15,4],"end":[15,6]},"visibility":"default","docs":"_Line feed_ – a line ending historically used in Unix.\n Corresponds to the ASCII control character `0x0A` or `\\n`","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:275:1586":{"id":"0:275:1586","crate_id":0,"name":"width","span":{"filename":"src/core.rs","begin":[223,4],"end":[223,27]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,27],"end":[185,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2695:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:270:2183":{"id":"0:270:2183","crate_id":0,"name":"Word","span":{"filename":"src/core.rs","begin":[215,0],"end":[224,1]},"visibility":"public","docs":"A piece of wrappable text, including any trailing whitespace.\n\nA `Word` is an example of a [`Fragment`], so it has a width,\ntrailing whitespace, and potentially a penalty item.","links":{"`Fragment`":"0:117:3073"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:272:2188","0:273:2189","0:274:2193","0:275:1586"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:124","a:2:2701:228-0:270:2183","a:2:8249:10598-0:270:2183","a:2:8250:10597-0:270:2183","a:2:2684:220-0:270:2183","a:2:2741:3817-0:270:2183","b:2:2542-0:270:2183","b:2:2248-0:270:2183","b:2:2553-0:270:2183","b:2:2251-0:270:2183","b:2:2538-0:270:2183","b:2:3319-0:270:2183","b:2:2548-0:270:2183","b:5:684-0:270:2183","0:286","0:291","0:284","0:279","0:276","0:121","0:131","0:289","0:281"]}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[262,0],"end":[275,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:140:694"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2684:220-0:216:3071":{"id":"a:2:2684:220-0:216:3071","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12084:39816":{"id":"2:12084:39816","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:15829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:39821":{"id":"2:12106:39821","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5400:2241":{"id":"5:5400:2241","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:229:3093":{"id":"0:229:3093","crate_id":0,"name":"OptimalFit","span":{"filename":"src/wrap_algorithms.rs","begin":[55,4],"end":[55,25]},"visibility":"default","docs":"Wrap words using an advanced algorithm with look-ahead.\n\nThis wrapping algorithm considers the entire paragraph to find\noptimal line breaks. When wrapping text, \"penalties\" are\nassigned to line breaks based on the gaps left at the end of\nlines. See [`Penalties`] for details.\n\nThe underlying wrapping algorithm is implemented by\n[`wrap_optimal_fit`], please see that function for examples.\n\n**Note:** Only available when the `smawk` Cargo feature is\nenabled.","links":{"`Penalties`":"0:202:3072","`wrap_optimal_fit`":"0:71:3070"},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:231:1606"]},"discriminant":null}}},"0:101:1787":{"id":"0:101:1787","crate_id":0,"name":"line_ending","span":{"filename":"src/line_ending.rs","begin":[1,0],"end":[88,1]},"visibility":"crate","docs":"Line ending detection and conversion.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:242:1788","0:258:2031"],"is_stripped":false}}},"0:168:2171":{"id":"0:168:2171","crate_id":0,"name":"wrap_single_line","span":{"filename":"src/lib.rs","begin":[1004,0],"end":[1015,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["line",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}],["options",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["lines",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:6695:244","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:689:111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12043:1960":{"id":"2:12043:1960","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:15831"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2701:228-0:258:2031":{"id":"a:2:2701:228-0:258:2031","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:296:1586":{"id":"0:296:1586","crate_id":0,"name":"width","span":{"filename":"src/lib.rs","begin":[236,4],"end":[236,20]},"visibility":"public","docs":"The width in columns at which the text will be wrapped.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"2:12052:2897":{"id":"2:12052:2897","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41396:179","prim@char":"1:11888:419","self::pattern":"2:11712:15831"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:668":{"id":"0:251:668","crate_id":0,"name":"fmt","span":{"filename":"src/line_ending.rs","begin":[7,22],"end":[7,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[226,0],"end":[232,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:122:230","0:123:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:178:1782":{"id":"0:178:1782","crate_id":0,"name":"WordSeparator","span":{"filename":"src/word_separators.rs","begin":[42,0],"end":[123,1]},"visibility":"public","docs":"Describes where words occur in a line of text.\n\nThe simplest approach is say that words are separated by one or\nmore ASCII spaces (`' '`). This works for Western languages\nwithout emojis. A more complex approach is to use the Unicode line\nbreaking algorithm, which finds break points in non-ASCII text.\n\nThe line breaks occur between words, please see\n[`WordSplitter`](crate::WordSplitter) for options of how to handle\nhyphenation of individual words.\n\n# Examples\n\n```\nuse textwrap::core::Word;\nuse textwrap::WordSeparator::AsciiSpace;\n\nlet words = AsciiSpace.find_words(\"Hello World!\").collect::<Vec<_>>();\nassert_eq!(words, vec![Word::from(\"Hello \"), Word::from(\"World!\")]);\n```","links":{"crate::WordSplitter":"0:189:1784"},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:179:2285","0:181:2353","0:183:2855"],"impls":["0:18","a:2:2701:228-0:178:1782","a:2:8249:10598-0:178:1782","a:2:8250:10597-0:178:1782","a:2:2684:220-0:178:1782","a:2:2741:3817-0:178:1782","b:2:2542-0:178:1782","b:2:2248-0:178:1782","b:2:2553-0:178:1782","b:2:2251-0:178:1782","b:2:2538-0:178:1782","b:2:3319-0:178:1782","b:2:2548-0:178:1782","b:5:684-0:178:1782","0:188","0:14","0:186","0:16"]}}},"a:2:8250:10597-0:189:1784":{"id":"a:2:8250:10597-0:189:1784","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8250:10597","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2553-0:189:1784":{"id":"b:2:2553-0:189:1784","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:140:694":{"id":"0:140:694","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[263,4],"end":[274,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["options",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12069:2729":{"id":"2:12069:2729","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11712:15831","str::split":"2:12060:2170","prim@char":"1:11888:419","`DoubleEndedIterator`":"2:7240:121","str::rsplit_terminator":"2:12072:39814"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43407:9029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:1783":{"id":"0:35:1783","crate_id":0,"name":"word_splitters","span":{"filename":"src/word_splitters.rs","begin":[1,0],"end":[314,1]},"visibility":"public","docs":"Word splitting functionality.\n\nTo wrap text into lines, long words sometimes need to be split\nacross lines. The [`WordSplitter`] enum defines this\nfunctionality.","links":{"`WordSplitter`":"0:189:1784"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:189:1784","0:48:2180"],"is_stripped":false}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,40],"end":[7,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2695:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[214,16],"end":[214,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:684-0:202:3072":{"id":"b:5:684-0:202:3072","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:686:2191","5:687:2192","5:688:4055"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3319-0:216:3071":{"id":"b:2:3319-0:216:3071","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2548-0:216:3071":{"id":"b:2:2548-0:216:3071","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[234,0],"end":[302,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:126:694","0:127:3602"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:7209:4010":{"id":"2:7209:4010","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:150:1800":{"id":"0:150:1800","crate_id":0,"name":"subsequent_indent","span":{"filename":"src/lib.rs","begin":[424,4],"end":[429,5]},"visibility":"public","docs":"Change [`self.subsequent_indent`]. The subsequent indentation\nis used on lines following the first line of output.\n\n# Examples\n\nCombining initial and subsequent indentation lets you format a\nsingle paragraph as a bullet list:\n\n```\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(12)\n    .initial_indent(\"* \")\n    .subsequent_indent(\"  \");\n#[cfg(feature = \"smawk\")]\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"* This is\",\n                \"  a little\",\n                \"  example.\"]);\n\n// Without the `smawk` feature, the wrapping is a little different:\n#[cfg(not(feature = \"smawk\"))]\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"* This is a\",\n                \"  little\",\n                \"  example.\"]);\n```\n\n[`self.subsequent_indent`]: #structfield.subsequent_indent","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["indent",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:3506":{"id":"0:112:3506","crate_id":0,"name":"ANSI_FINAL_BYTE","span":{"filename":"src/core.rs","begin":[42,0],"end":[42,72]},"visibility":{"restricted":{"parent":"0:110:497","path":"::core"}},"docs":"The final bytes of an ANSI escape sequence must be in this range.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"std::ops::RangeInclusive","id":"2:39258:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}}},"a:2:2701:228-0:216:3071":{"id":"a:2:2701:228-0:216:3071","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12133:32645":{"id":"2:12133:32645","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:3031":{"id":"2:12093:3031","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11712:15831","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::rmatch_indices":"2:12096:39818"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43507:9031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[214,29],"end":[214,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2694:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8250:10597-0:226:1786":{"id":"a:2:8250:10597-0:226:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8250:10597","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12049:2034":{"id":"2:12049:2034","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:15831"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:15829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:39818":{"id":"2:12096:39818","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11712:15831","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::match_indices":"2:12093:3031"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43525:9032","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:15829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:688:4055":{"id":"5:688:4055","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:2246":{"id":"0:66:2246","crate_id":0,"name":"get","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[173,4],"end":[181,5]},"visibility":{"restricted":{"parent":"0:55:3069","path":"::wrap_algorithms::optimal_fit"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"primitive":"usize"}],["minima",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"primitive":"usize"},{"generic":"T"}]}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1852":{"id":"0:155:1852","crate_id":0,"name":"termwidth","span":{"filename":"src/lib.rs","begin":[567,0],"end":[569,1]},"visibility":"public","docs":"Return the current terminal width.\n\nIf the terminal width cannot be determined (typically because the\nstandard output is not connected to a terminal), a default width\nof 80 characters will be used.\n\n# Examples\n\nCreate an [`Options`] for wrapping at the current terminal width\nwith a two column margin to the left and the right:\n\n```no_run\nuse textwrap::{termwidth, Options};\n\nlet width = termwidth() - 4; // Two columns on each side.\nlet options = Options::new(width)\n    .initial_indent(\"  \")\n    .subsequent_indent(\"  \");\n```\n\n**Note:** Only available when the `terminal_size` Cargo feature is\nenabled.","links":{"`Options`":"0:294:1791"},"attrs":["#[cfg(feature = \"terminal_size\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:3246":{"id":"0:133:3246","crate_id":0,"name":"whitespace_width","span":{"filename":"src/core.rs","begin":[313,4],"end":[315,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[41,16],"end":[41,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5644-0:216:3071":{"id":"b:5:5644-0:216:3071","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:227:2315":{"id":"0:227:2315","crate_id":0,"name":"FirstFit","span":{"filename":"src/wrap_algorithms.rs","begin":[40,4],"end":[40,12]},"visibility":"default","docs":"Wrap words using a fast and simple algorithm.\n\nThis algorithm uses no look-ahead when finding line breaks.\nImplemented by [`wrap_first_fit`], please see that function for\ndetails and examples.","links":{"`wrap_first_fit`":"0:96:2286"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12046:2746":{"id":"2:12046:2746","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:15831"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2701:228-0:189:1784":{"id":"a:2:2701:228-0:189:1784","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2684:220-0:242:1788":{"id":"a:2:2684:220-0:242:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12081:39815":{"id":"2:12081:39815","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:668":{"id":"0:40:668","crate_id":0,"name":"fmt","span":{"filename":"src/word_splitters.rs","begin":[102,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2548-0:62:3349":{"id":"b:2:2548-0:62:3349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineNumbers","id":"0:62:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:243:2033":{"id":"0:243:2033","crate_id":0,"name":"CRLF","span":{"filename":"src/line_ending.rs","begin":[12,4],"end":[12,8]},"visibility":"default","docs":"_Carriage return and line feed_ – a line ending sequence\nhistorically used in Windows. Corresponds to the sequence\nof ASCII control characters `0x0D 0x0A` or `\\r\\n`","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:132:1586":{"id":"0:132:1586","crate_id":0,"name":"width","span":{"filename":"src/core.rs","begin":[306,4],"end":[308,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:230":{"id":"0:122:230","crate_id":0,"name":"Target","span":{"filename":"src/core.rs","begin":[227,4],"end":[227,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"0:297:1787":{"id":"0:297:1787","crate_id":0,"name":"line_ending","span":{"filename":"src/lib.rs","begin":[238,4],"end":[238,31]},"visibility":"public","docs":"Line ending used for breaking lines.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:12019:3463":{"id":"2:12019:3463","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11279:2293"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12029:33239":{"id":"2:12029:33239","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:17:668":{"id":"0:17:668","crate_id":0,"name":"fmt","span":{"filename":"src/word_separators.rs","begin":[160,4],"end":[167,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262":{"id":"0:262","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:264:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5384:4398":{"id":"5:5384:4398","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:1807":{"id":"0:153:1807","crate_id":0,"name":"wrap_algorithm","span":{"filename":"src/lib.rs","begin":[485,4],"end":[496,5]},"visibility":"public","docs":"Change [`self.wrap_algorithm`].\n\nSee the [`wrap_algorithms::WrapAlgorithm`] trait for details on\nthe choices.\n\n[`self.wrap_algorithm`]: #structfield.wrap_algorithm","links":{"`wrap_algorithms::WrapAlgorithm`":"0:226:1786"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["wrap_algorithm",{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:3271":{"id":"0:203:3271","crate_id":0,"name":"nline_penalty","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[26,4],"end":[26,28]},"visibility":"public","docs":"Per-line penalty. This is added for every line, which makes it\nexpensive to output more lines than the minimum required.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"b:2:3319-0:202:3072":{"id":"b:2:3319-0:202:3072","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2548-0:202:3072":{"id":"b:2:2548-0:202:3072","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12087:2968":{"id":"2:12087:2968","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11712:15831","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::matches":"2:12087:2968"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43561:9033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186":{"id":"0:186","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:187:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2251-0:62:3349":{"id":"b:2:2251-0:62:3349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineNumbers","id":"0:62:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2253:3352"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:160:1965":{"id":"0:160:1965","crate_id":0,"name":"fill_slow_path","span":{"filename":"src/lib.rs","begin":[619,0],"end":[633,1]},"visibility":"crate","docs":"Slow path for fill.\n\nThis is taken when `text` is longer than `options.width`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["options",{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8250:10597-0:216:3071":{"id":"a:2:8250:10597-0:216:3071","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8250:10597","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:79-0:202:3072":{"id":"0:79-0:202:3072","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[21,55],"end":[21,64]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"import":{"source":"optimal_fit::Penalties","name":"Penalties","id":"0:202:3072","glob":false}}},"2:12033:2749":{"id":"2:12033:2749","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12034:33262"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:668":{"id":"0:212:668","crate_id":0,"name":"fmt","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218":{"id":"0:218","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,9],"end":[185,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:219:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3319-0:226:1786":{"id":"b:2:3319-0:226:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:216:3071":{"id":"0:216:3071","crate_id":0,"name":"OverflowError","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[186,0],"end":[186,25]},"visibility":"public","docs":"Overflow error during the [`wrap_optimal_fit`] computation.","links":{"`wrap_optimal_fit`":"0:71:3070"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:2:2701:228-0:216:3071","a:2:8249:10598-0:216:3071","a:2:8250:10597-0:216:3071","a:2:2684:220-0:216:3071","a:2:2741:3817-0:216:3071","b:2:2542-0:216:3071","b:2:2248-0:216:3071","b:2:2553-0:216:3071","b:2:2251-0:216:3071","b:2:2538-0:216:3071","b:2:3319-0:216:3071","b:2:2610-0:216:3071","b:2:2548-0:216:3071","b:5:5644-0:216:3071","0:68","0:70","0:218","0:223","0:221","0:220","0:224"]}}},"0:54:1785":{"id":"0:54:1785","crate_id":0,"name":"wrap_algorithms","span":{"filename":"src/wrap_algorithms.rs","begin":[1,0],"end":[411,1]},"visibility":"public","docs":"Word wrapping algorithms.\n\nAfter a text has been broken into words (or [`Fragment`]s), one\nnow has to decide how to break the fragments into lines. The\nsimplest algorithm for this is implemented by [`wrap_first_fit`]:\nit uses no look-ahead and simply adds fragments to the line as\nlong as they fit. However, this can lead to poor line breaks if a\nlarge fragment almost-but-not-quite fits on a line. When that\nhappens, the fragment is moved to the next line and it will leave\nbehind a large gap. A more advanced algorithm, implemented by\n[`wrap_optimal_fit`], will take this into account. The optimal-fit\nalgorithm considers all possible line breaks and will attempt to\nminimize the gaps left behind by overly short lines.\n\nWhile both algorithms run in linear time, the first-fit algorithm\nis about 4 times faster than the optimal-fit algorithm.","links":{"`Fragment`":"0:117:3073","`wrap_optimal_fit`":"0:71:3070","`wrap_first_fit`":"0:96:2286"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:55:3069","0:77-0:71:3070","0:78-0:216:3071","0:79-0:202:3072","0:226:1786","0:96:2286"],"is_stripped":false}}},"0:289":{"id":"0:289","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[214,40],"end":[214,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2695:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:302:1811":{"id":"0:302:1811","crate_id":0,"name":"word_separator","span":{"filename":"src/lib.rs","begin":[255,4],"end":[255,37]},"visibility":"public","docs":"The line breaking algorithm to use, see\n[`word_separators::WordSeparator`] trait for an overview and\npossible implementations.","links":{"`word_separators::WordSeparator`":"0:178:1782"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:2:2684:220-0:294:1791":{"id":"a:2:2684:220-0:294:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2542-0:216:3071":{"id":"b:2:2542-0:216:3071","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116:2019":{"id":"0:116:2019","crate_id":0,"name":"display_width","span":{"filename":"src/core.rs","begin":[175,0],"end":[185,1]},"visibility":"public","docs":"Compute the display width of `text` while skipping over ANSI\nescape sequences.\n\n# Examples\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(display_width(\"Café Plain\"), 10);\nassert_eq!(display_width(\"\\u{1b}[31mCafé Rouge\\u{1b}[0m\"), 10);\n```\n\n**Note:** When the `unicode-width` Cargo feature is disabled, the\nwidth of a `char` is determined by a crude approximation which\nsimply counts chars below U+1100 as 1 column wide, and all other\ncharacters as 2 columns wide. With the feature enabled, function\nwill correctly deal with [combining characters] in their\ndecomposed form (see [Unicode equivalence]).\n\nAn example of a decomposed character is “é”, which can be\ndecomposed into: “e” followed by a combining acute accent: “◌́”.\nWithout the `unicode-width` Cargo feature, every `char` below\nU+1100 has a width of 1. This includes the combining accent:\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(display_width(\"Cafe Plain\"), 10);\n#[cfg(feature = \"unicode-width\")]\nassert_eq!(display_width(\"Cafe\\u{301} Plain\"), 10);\n#[cfg(not(feature = \"unicode-width\"))]\nassert_eq!(display_width(\"Cafe\\u{301} Plain\"), 11);\n```\n\n## Emojis and CJK Characters\n\nCharacters such as emojis and [CJK characters] used in the\nChinese, Japanese, and Korean langauges are seen as double-width,\neven if the `unicode-width` feature is disabled:\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(display_width(\"😂😭🥺🤣✨😍🙏🥰😊🔥\"), 20);\nassert_eq!(display_width(\"你好\"), 4);  // “Nǐ hǎo” or “Hello” in Chinese\n```\n\n# Limitations\n\nThe displayed width of a string cannot always be computed from the\nstring alone. This is because the width depends on the rendering\nengine used. This is particularly visible with [emoji modifier\nsequences] where a base emoji is modified with, e.g., skin tone or\nhair color modifiers. It is up to the rendering engine to detect\nthis and to produce a suitable emoji.\n\nA simple example is “❤️”, which consists of “❤” (U+2764: Black\nHeart Symbol) followed by U+FE0F (Variation Selector-16). By\nitself, “❤” is a black heart, but if you follow it with the\nvariant selector, you may get a wider red heart.\n\nA more complex example would be “👨‍🦰” which should depict a man\nwith red hair. Here the computed width is too large — and the\nwidth differs depending on the use of the `unicode-width` feature:\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(\"👨‍🦰\".chars().collect::<Vec<char>>(), ['\\u{1f468}', '\\u{200d}', '\\u{1f9b0}']);\n#[cfg(feature = \"unicode-width\")]\nassert_eq!(display_width(\"👨‍🦰\"), 4);\n#[cfg(not(feature = \"unicode-width\"))]\nassert_eq!(display_width(\"👨‍🦰\"), 6);\n```\n\nThis happens because the grapheme consists of three code points:\n“👨” (U+1F468: Man), Zero Width Joiner (U+200D), and “🦰”\n(U+1F9B0: Red Hair). You can see them above in the test. With\n`unicode-width` enabled, the ZWJ is correctly seen as having zero\nwidth, without it is counted as a double-width character.\n\n## Terminal Support\n\nModern browsers typically do a great job at combining characters\nas shown above, but terminals often struggle more. As an example,\nGnome Terminal version 3.38.1, shows “❤️” as a big red heart, but\nshows \"👨‍🦰\" as “👨🦰”.\n\n[combining characters]: https://en.wikipedia.org/wiki/Combining_character\n[Unicode equivalence]: https://en.wikipedia.org/wiki/Unicode_equivalence\n[CJK characters]: https://en.wikipedia.org/wiki/CJK_characters\n[emoji modifier sequences]: https://unicode.org/emoji/charts/full-emoji-modifiers.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2684:220-0:202:3072":{"id":"a:2:2684:220-0:202:3072","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2542-0:178:1782":{"id":"b:2:2542-0:178:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:307":{"id":"0:307","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[233,16],"end":[233,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:309:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12132:32649":{"id":"2:12132:32649","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:613":{"id":"0:42:613","crate_id":0,"name":"eq","span":{"filename":"src/word_splitters.rs","begin":[114,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[90,0],"end":[118,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:86:668":{"id":"0:86:668","crate_id":0,"name":"fmt","span":{"filename":"src/wrap_algorithms.rs","begin":[121,4],"end":[128,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2542-0:270:2183":{"id":"b:2:2542-0:270:2183","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2538-0:216:3071":{"id":"b:2:2538-0:216:3071","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:1938"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:117:3073":{"id":"0:117:3073","crate_id":0,"name":"Fragment","span":{"filename":"src/core.rs","begin":[197,0],"end":[208,1]},"visibility":"public","docs":"A (text) fragment denotes the unit which we wrap into lines.\n\nFragments represent an abstract _word_ plus the _whitespace_\nfollowing the word. In case the word falls at the end of the line,\nthe whitespace is dropped and a so-called _penalty_ is inserted\ninstead (typically `\"-\"` if the word was hyphenated).\n\nFor wrapping purposes, the precise content of the word, the\nwhitespace, and the penalty is irrelevant. All we need to know is\nthe displayed width of each part, which this trait provides.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:118:1586","0:119:3246","0:120:3245"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"std::fmt::Debug","id":"2:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:131"]}}},"0:9-0:6:1779":{"id":"0:9-0:6:1779","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[210,29],"end":[210,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::indentation::dedent","name":"dedent","id":"0:6:1779","glob":false}}},"b:2:3319-0:62:3349":{"id":"b:2:3319-0:62:3349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineNumbers","id":"0:62:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12122:39823":{"id":"2:12122:39823","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:15831"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2875":{"id":"0:27:2875","crate_id":0,"name":"find_words_unicode_break_properties","span":{"filename":"src/word_separators.rs","begin":[254,0],"end":[316,1]},"visibility":{"restricted":{"parent":"0:11:1781","path":"::word_separators"}},"docs":"Find words in line. ANSI escape sequences are ignored in `line`.","links":{},"attrs":["#[cfg(feature = \"unicode-linebreak\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["line",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:2856","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Iterator","id":"2:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2884":{"id":"0:26:2884","crate_id":0,"name":"SHY","span":{"filename":"src/word_separators.rs","begin":[250,0],"end":[250,29]},"visibility":{"restricted":{"parent":"0:11:1781","path":"::word_separators"}},"docs":"Soft hyphen, also knows as a “shy hyphen”. Should show up as ‘-’\nif a line is broken at this point, and otherwise be invisible.\nTextwrap does not currently support breaking words at soft\nhyphens.","links":{},"attrs":["#[cfg(feature = \"unicode-linebreak\")]"],"deprecation":null,"inner":{"constant":{"type":{"primitive":"char"},"expr":"'\\u{00ad}'","value":"'\\u{ad}'","is_literal":true}}},"b:2:2542-0:189:1784":{"id":"b:2:2542-0:189:1784","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:108:953":{"id":"0:108:953","crate_id":0,"name":"next","span":{"filename":"src/line_ending.rs","begin":[40,4],"end":[59,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7318:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11:1781":{"id":"0:11:1781","crate_id":0,"name":"word_separators","span":{"filename":"src/word_separators.rs","begin":[1,0],"end":[481,1]},"visibility":"crate","docs":"Functionality for finding words.\n\nIn order to wrap text, we need to know where the legal break\npoints are, i.e., where the words of the text are. This means that\nwe need to define what a \"word\" is.\n\nA simple approach is to simply split the text on whitespace, but\nthis does not work for East-Asian languages such as Chinese or\nJapanese where there are no spaces between words. Breaking a long\nsequence of emojis is another example where line breaks might be\nwanted even if there are no whitespace to be found.\n\nThe [`WordSeparator`] trait is responsible for determining where\nthere words are in a line of text. Please refer to the trait and\nthe structs which implement it for more information.","links":{"`WordSeparator`":"0:178:1782"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:178:1782","0:22:2874","0:25:2879","0:26:2884","0:27:2875"],"is_stripped":false}}},"b:5:684-0:189:1784":{"id":"b:5:684-0:189:1784","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:686:2191","5:687:2192","5:688:4055"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:44:2304":{"id":"0:44:2304","crate_id":0,"name":"split_points","span":{"filename":"src/word_splitters.rs","begin":[143,4],"end":[172,5]},"visibility":"public","docs":"Return all possible indices where `word` can be split.\n\nThe indices are in the range `0..word.len()`. They point to\nthe index _after_ the split point, i.e., after `-` if\nsplitting on hyphens. This way, `word.split_at(idx)` will\nbreak the word into two well-formed pieces.\n\n# Examples\n\n```\nuse textwrap::WordSplitter;\nassert_eq!(WordSplitter::NoHyphenation.split_points(\"cannot-be-split\"), vec![]);\nassert_eq!(WordSplitter::HyphenSplitter.split_points(\"can-be-split\"), vec![4, 7]);\nassert_eq!(WordSplitter::Custom(|word| vec![word.len()/2]).split_points(\"middle\"), vec![3]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["word",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6695:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5:1780":{"id":"0:5:1780","crate_id":0,"name":"indent","span":{"filename":"src/indentation.rs","begin":[52,0],"end":[75,1]},"visibility":"public","docs":"Indent each line by the given prefix.\n\n# Examples\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\"First line.\\nSecond line.\\n\", \"  \"),\n           \"  First line.\\n  Second line.\\n\");\n```\n\nWhen indenting, trailing whitespace is stripped from the prefix.\nThis means that empty lines remain empty afterwards:\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\"First line.\\n\\n\\nSecond line.\\n\", \"  \"),\n           \"  First line.\\n\\n\\n  Second line.\\n\");\n```\n\nNotice how `\"\\n\\n\\n\"` remained as `\"\\n\\n\\n\"`.\n\nThis feature is useful when you want to indent text and have a\nspace between your prefix and the text. In this case, you _don't_\nwant a trailing space on empty lines:\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\"foo = 123\\n\\nprint(foo)\\n\", \"# \"),\n           \"# foo = 123\\n#\\n# print(foo)\\n\");\n```\n\nNotice how `\"\\n\\n\"` became `\"\\n#\\n\"` instead of `\"\\n# \\n\"` which\nwould have trailing whitespace.\n\nLeading and trailing whitespace coming from the text itself is\nkept unchanged:\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\" \\t  Foo   \", \"->\"), \"-> \\t  Foo   \");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["prefix",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:224":{"id":"0:224","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,27],"end":[185,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8249:10598-0:258:2031":{"id":"a:2:8249:10598-0:258:2031","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8249:10598","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3319-0:189:1784":{"id":"b:2:3319-0:189:1784","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8250:10597-0:270:2183":{"id":"a:2:8250:10597-0:270:2183","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8250:10597","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:189:1784":{"id":"0:189:1784","crate_id":0,"name":"WordSplitter","span":{"filename":"src/word_splitters.rs","begin":[37,0],"end":[99,1]},"visibility":"public","docs":"The `WordSplitter` enum describes where words can be split.\n\nIf the textwrap crate has been compiled with the `hyphenation`\nCargo feature enabled, you will find a\n[`WordSplitter::Hyphenation`] variant. Use this struct for\nlanguage-aware hyphenation:\n\n```\n#[cfg(feature = \"hyphenation\")] {\n    use hyphenation::{Language, Load, Standard};\n    use textwrap::{wrap, Options, WordSplitter};\n\n    let text = \"Oxidation is the loss of electrons.\";\n    let dictionary = Standard::from_embedded(Language::EnglishUS).unwrap();\n    let options = Options::new(8).word_splitter(WordSplitter::Hyphenation(dictionary));\n    assert_eq!(wrap(text, &options), vec![\"Oxida-\",\n                                          \"tion is\",\n                                          \"the loss\",\n                                          \"of elec-\",\n                                          \"trons.\"]);\n}\n```\n\nPlease see the documentation for the [hyphenation] crate for more\ndetails.\n\n[hyphenation]: https://docs.rs/hyphenation/","links":{"`WordSplitter::Hyphenation`":"0:197:2429"},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:190:2420","0:192:1838","0:194:2855","0:197:2429"],"impls":["0:43","a:2:2701:228-0:189:1784","a:2:8249:10598-0:189:1784","a:2:8250:10597-0:189:1784","a:2:2684:220-0:189:1784","a:2:2741:3817-0:189:1784","b:2:2542-0:189:1784","b:2:2248-0:189:1784","b:2:2553-0:189:1784","b:2:2251-0:189:1784","b:2:2538-0:189:1784","b:2:3319-0:189:1784","b:2:2548-0:189:1784","b:5:684-0:189:1784","0:200","0:39","0:41"]}}},"0:109-0:242:1788":{"id":"0:109-0:242:1788","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[222,0],"end":[222,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"line_ending::LineEnding","name":"LineEnding","id":"0:242:1788","glob":false}}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[113,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:42:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5646:1455":{"id":"5:5646:1455","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120:3245":{"id":"0:120:3245","crate_id":0,"name":"penalty_width","span":{"filename":"src/core.rs","begin":[207,4],"end":[207,35]},"visibility":"default","docs":"Displayed width of the penalty that must be inserted if the\nword falls at the end of a line.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:152:1811":{"id":"0:152:1811","crate_id":0,"name":"word_separator","span":{"filename":"src/lib.rs","begin":[466,4],"end":[477,5]},"visibility":"public","docs":"Change [`self.word_separator`].\n\nSee [`word_separators::WordSeparator`] for details on the choices.\n\n[`self.word_separator`]: #structfield.word_separator","links":{"`word_separators::WordSeparator`":"0:178:1782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["word_separator",{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:684-0:242:1788":{"id":"b:5:684-0:242:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:686:2191","5:687:2192","5:688:4055"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2538-0:294:1791":{"id":"b:2:2538-0:294:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2541:1938"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2741:3817-0:178:1782":{"id":"a:2:2741:3817-0:178:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:3817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:78-0:216:3071":{"id":"0:78-0:216:3071","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[21,40],"end":[21,53]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"import":{"source":"optimal_fit::OverflowError","name":"OverflowError","id":"0:216:3071","glob":false}}},"0:34-0:178:1782":{"id":"0:34-0:178:1782","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"word_separators::WordSeparator","name":"WordSeparator","id":"0:178:1782","glob":false}}},"2:12012:1962":{"id":"2:12012:1962","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:39826":{"id":"2:12138:39826","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4533:39826"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43674:8957","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12020:39810":{"id":"2:12020:39810","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:1586":{"id":"0:118:1586","crate_id":0,"name":"width","span":{"filename":"src/core.rs","begin":[199,4],"end":[199,27]},"visibility":"default","docs":"Displayed width of word represented by this fragment.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:303:1815":{"id":"0:303:1815","crate_id":0,"name":"word_splitter","span":{"filename":"src/lib.rs","begin":[259,4],"end":[259,35]},"visibility":"public","docs":"The method for splitting words. This can be used to prohibit\nsplitting words on hyphens, or it can be used to implement\nlanguage-aware machine hyphenation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:110:497":{"id":"0:110:497","crate_id":0,"name":"core","span":{"filename":"src/core.rs","begin":[1,0],"end":[433,1]},"visibility":"public","docs":"Building blocks for advanced wrapping functionality.\n\nThe functions and structs in this module can be used to implement\nadvanced wrapping functionality when the [`wrap`](super::wrap) and\n[`fill`](super::fill) function don't do what you want.\n\nIn general, you want to follow these steps when wrapping\nsomething:\n\n1. Split your input into [`Fragment`]s. These are abstract blocks\n   of text or content which can be wrapped into lines. See\n   [`WordSeparator`](crate::word_separators::WordSeparator) for\n   how to do this for text.\n\n2. Potentially split your fragments into smaller pieces. This\n   allows you to implement things like hyphenation. If you use the\n   `Word` type, you can use [`WordSplitter`](crate::WordSplitter)\n   enum for this.\n\n3. Potentially break apart fragments that are still too large to\n   fit on a single line. This is implemented in [`break_words`].\n\n4. Finally take your fragments and put them into lines. There are\n   two algorithms for this in the\n   [`wrap_algorithms`](crate::wrap_algorithms) module:\n   [`wrap_optimal_fit`](crate::wrap_algorithms::wrap_optimal_fit)\n   and [`wrap_first_fit`](crate::wrap_algorithms::wrap_first_fit).\n   The former produces better line breaks, the latter is faster.\n\n5. Iterate through the slices returned by the wrapping functions\n   and construct your lines of output.\n\nPlease [open an issue](https://github.com/mgeisler/textwrap/) if\nthe functionality here is not sufficient or if you have ideas for\nimproving it. We would love to hear from you!","links":{"super::fill":"0:157:660","crate::word_separators::WordSeparator":"0:178:1782","`Fragment`":"0:117:3073","`break_words`":"0:135:1804","super::wrap":"0:165:1970","crate::WordSplitter":"0:189:1784","crate::wrap_algorithms::wrap_optimal_fit":"0:71:3070","crate::wrap_algorithms":"0:54:1785","crate::wrap_algorithms::wrap_first_fit":"0:96:2286"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:111:3502","0:112:3506","0:113:2806","0:115:3512","0:116:2019","0:117:3073","0:270:2183","0:135:1804"],"is_stripped":false}}},"0:179:2285":{"id":"0:179:2285","crate_id":0,"name":"AsciiSpace","span":{"filename":"src/word_separators.rs","begin":[55,4],"end":[55,14]},"visibility":"default","docs":"Find words by splitting on runs of `' '` characters.\n\n# Examples\n\n```\nuse textwrap::core::Word;\nuse textwrap::WordSeparator::AsciiSpace;\n\nlet words = AsciiSpace.find_words(\"Hello   World!\").collect::<Vec<_>>();\nassert_eq!(words, vec![Word::from(\"Hello   \"),\n                       Word::from(\"World!\")]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:196:1606":{"id":"0:196:1606","crate_id":0,"name":"0","span":{"filename":"src/word_splitters.rs","begin":[88,11],"end":[88,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"function_pointer":{"decl":{"inputs":[["word",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6695:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}}}},"b:2:2542-0:242:1788":{"id":"b:2:2542-0:242:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[152,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:61:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:187:423":{"id":"0:187:423","crate_id":0,"name":"clone","span":{"filename":"src/word_separators.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[214,40],"end":[214,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:146:939":{"id":"0:146:939","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[313,4],"end":[324,5]},"visibility":"public","docs":"Creates a new [`Options`] with the specified width.\n\nThe other fields are given default values as follows:\n\n```\n# use textwrap::{LineEnding, Options, WordSplitter, WordSeparator, WrapAlgorithm};\n# let width = 80;\nlet options = Options::new(width);\nassert_eq!(options.line_ending, LineEnding::LF);\nassert_eq!(options.initial_indent, \"\");\nassert_eq!(options.subsequent_indent, \"\");\nassert_eq!(options.break_words, true);\n\n#[cfg(feature = \"unicode-linebreak\")]\nassert_eq!(options.word_separator, WordSeparator::UnicodeBreakProperties);\n#[cfg(not(feature = \"unicode-linebreak\"))]\nassert_eq!(options.word_separator, WordSeparator::AsciiSpace);\n\n#[cfg(feature = \"smawk\")]\nassert_eq!(options.wrap_algorithm, WrapAlgorithm::new_optimal_fit());\n#[cfg(not(feature = \"smawk\"))]\nassert_eq!(options.wrap_algorithm, WrapAlgorithm::FirstFit);\n\nassert_eq!(options.word_splitter, WordSplitter::HyphenSplitter);\n```\n\nNote that the default word separator and wrap algorithms\nchanges based on the available Cargo features. The best\navailable algorithms are used by default.","links":{"`Options`":"0:294:1791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["width",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:39822":{"id":"2:12107:39822","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:15831"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11737:15828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12125:39824":{"id":"2:12125:39824","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:15831"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:15829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,29],"end":[22,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:215:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12134:32644":{"id":"2:12134:32644","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:613":{"id":"0:288:613","crate_id":0,"name":"eq","span":{"filename":"src/core.rs","begin":[214,29],"end":[214,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2248-0:202:3072":{"id":"b:2:2248-0:202:3072","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2250:1777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2248-0:62:3349":{"id":"b:2:2248-0:62:3349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineNumbers","id":"0:62:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2250:1777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:684-0:270:2183":{"id":"b:5:684-0:270:2183","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:686:2191","5:687:2192","5:688:4055"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:10-0:5:1780":{"id":"0:10-0:5:1780","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[210,37],"end":[210,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::indentation::indent","name":"indent","id":"0:5:1780","glob":false}}},"2:12042:37398":{"id":"2:12042:37398","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43649:8777","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:686:2191":{"id":"5:686:2191","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[194,0],"end":[194,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","cause","source","provide","type_id"],"trait":{"name":"Error","id":"2:2603:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8250:10597-0:202:3072":{"id":"a:2:8250:10597-0:202:3072","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8250:10597","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12128:26585":{"id":"2:12128:26585","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11673:127","`FromStr`":"2:11672:10609"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11672:10609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11672:10609","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5402:32646":{"id":"5:5402:32646","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12134:32644"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2544:694":{"id":"2:2544:694","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:3502":{"id":"0:111:3502","crate_id":0,"name":"CSI","span":{"filename":"src/core.rs","begin":[40,0],"end":[40,40]},"visibility":{"restricted":{"parent":"0:110:497","path":"::core"}},"docs":"The CSI or “Control Sequence Introducer” introduces an ANSI escape\nsequence. This is typically used for colored text and will be\nignored when computing the text width.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"tuple":[{"primitive":"char"},{"primitive":"char"}]},"expr":"_","value":null,"is_literal":false}}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,16],"end":[7,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:53-0:189:1784":{"id":"0:53-0:189:1784","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[216,0],"end":[216,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"word_splitters::WordSplitter","name":"WordSplitter","id":"0:189:1784","glob":false}}},"a:2:8250:10597-0:242:1788":{"id":"a:2:8250:10597-0:242:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8250:10597","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:181:2353":{"id":"0:181:2353","crate_id":0,"name":"UnicodeBreakProperties","span":{"filename":"src/word_separators.rs","begin":[119,4],"end":[119,26]},"visibility":"default","docs":"Split `line` into words using Unicode break properties.\n\nThis word separator uses the Unicode line breaking algorithm\ndescribed in [Unicode Standard Annex\n#14](https://www.unicode.org/reports/tr14/) to find legal places\nto break lines. There is a small difference in that the U+002D\n(Hyphen-Minus) and U+00AD (Soft Hyphen) don’t create a line break:\nto allow a line break at a hyphen, use\n[`WordSplitter::HyphenSplitter`](crate::WordSplitter::HyphenSplitter).\nSoft hyphens are not currently supported.\n\n# Examples\n\nUnlike [`WordSeparator::AsciiSpace`], the Unicode line\nbreaking algorithm will find line break opportunities between\nsome characters with no intervening whitespace:\n\n```\n#[cfg(feature = \"unicode-linebreak\")] {\nuse textwrap::core::Word;\nuse textwrap::WordSeparator::UnicodeBreakProperties;\n\nassert_eq!(UnicodeBreakProperties.find_words(\"Emojis: 😂😍\").collect::<Vec<_>>(),\n           vec![Word::from(\"Emojis: \"),\n                Word::from(\"😂\"),\n                Word::from(\"😍\")]);\n\nassert_eq!(UnicodeBreakProperties.find_words(\"CJK: 你好\").collect::<Vec<_>>(),\n           vec![Word::from(\"CJK: \"),\n                Word::from(\"你\"),\n                Word::from(\"好\")]);\n}\n```\n\nA U+2060 (Word Joiner) character can be inserted if you want to\nmanually override the defaults and keep the characters together:\n\n```\n#[cfg(feature = \"unicode-linebreak\")] {\nuse textwrap::core::Word;\nuse textwrap::WordSeparator::UnicodeBreakProperties;\n\nassert_eq!(UnicodeBreakProperties.find_words(\"Emojis: 😂\\u{2060}😍\").collect::<Vec<_>>(),\n           vec![Word::from(\"Emojis: \"),\n                Word::from(\"😂\\u{2060}😍\")]);\n}\n```\n\nThe Unicode line breaking algorithm will also automatically\nsuppress break breaks around certain punctuation characters::\n\n```\n#[cfg(feature = \"unicode-linebreak\")] {\nuse textwrap::core::Word;\nuse textwrap::WordSeparator::UnicodeBreakProperties;\n\nassert_eq!(UnicodeBreakProperties.find_words(\"[ foo ] bar !\").collect::<Vec<_>>(),\n           vec![Word::from(\"[ foo ] \"),\n                Word::from(\"bar !\")]);\n}\n```","links":{"`WordSeparator::AsciiSpace`":"0:179:2285","crate::WordSplitter::HyphenSplitter":"0:192:1838"},"attrs":["#[cfg(feature = \"unicode-linebreak\")]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:7210:784":{"id":"2:7210:784","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2251-0:189:1784":{"id":"b:2:2251-0:189:1784","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2253:3352"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2538-0:202:3072":{"id":"b:2:2538-0:202:3072","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:1938"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2701:228-0:294:1791":{"id":"a:2:2701:228-0:294:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8250:10597-0:294:1791":{"id":"a:2:8250:10597-0:294:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8250:10597","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:165:1970":{"id":"0:165:1970","crate_id":0,"name":"wrap","span":{"filename":"src/lib.rs","begin":[989,0],"end":[1002,1]},"visibility":"public","docs":"Wrap a line of text at a given width.\n\nThe result is a vector of lines, each line is of type [`Cow<'_,\nstr>`](Cow), which means that the line will borrow from the input\n`&str` if possible. The lines do not have trailing whitespace,\nincluding a final `'\\n'`. Please use the [`fill`] function if you\nneed a [`String`] instead.\n\nThe easiest way to use this function is to pass an integer for\n`width_or_options`:\n\n```\nuse textwrap::wrap;\n\nlet lines = wrap(\"Memory safety without garbage collection.\", 15);\nassert_eq!(lines, &[\n    \"Memory safety\",\n    \"without garbage\",\n    \"collection.\",\n]);\n```\n\nIf you need to customize the wrapping, you can pass an [`Options`]\ninstead of an `usize`:\n\n```\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(15)\n    .initial_indent(\"- \")\n    .subsequent_indent(\"  \");\nlet lines = wrap(\"Memory safety without garbage collection.\", &options);\nassert_eq!(lines, &[\n    \"- Memory safety\",\n    \"  without\",\n    \"  garbage\",\n    \"  collection.\",\n]);\n```\n\n# Optimal-Fit Wrapping\n\nBy default, `wrap` will try to ensure an even right margin by\nfinding breaks which avoid short lines. We call this an\n“optimal-fit algorithm” since the line breaks are computed by\nconsidering all possible line breaks. The alternative is a\n“first-fit algorithm” which simply accumulates words until they no\nlonger fit on the line.\n\nAs an example, using the first-fit algorithm to wrap the famous\nHamlet quote “To be, or not to be: that is the question” in a\nnarrow column with room for only 10 characters looks like this:\n\n```\n# use textwrap::{WrapAlgorithm::FirstFit, Options, wrap};\n#\n# let lines = wrap(\"To be, or not to be: that is the question\",\n#                  Options::new(10).wrap_algorithm(FirstFit));\n# assert_eq!(lines.join(\"\\n\") + \"\\n\", \"\\\nTo be, or\nnot to be:\nthat is\nthe\nquestion\n# \");\n```\n\nNotice how the second to last line is quite narrow because\n“question” was too large to fit? The greedy first-fit algorithm\ndoesn’t look ahead, so it has no other option than to put\n“question” onto its own line.\n\nWith the optimal-fit wrapping algorithm, the previous lines are\nshortened slightly in order to make the word “is” go into the\nsecond last line:\n\n```\n# #[cfg(feature = \"smawk\")] {\n# use textwrap::{Options, WrapAlgorithm, wrap};\n#\n# let lines = wrap(\n#     \"To be, or not to be: that is the question\",\n#     Options::new(10).wrap_algorithm(WrapAlgorithm::new_optimal_fit())\n# );\n# assert_eq!(lines.join(\"\\n\") + \"\\n\", \"\\\nTo be,\nor not to\nbe: that\nis the\nquestion\n# \"); }\n```\n\nPlease see [`WrapAlgorithm`] for details on the choices.\n\n# Examples\n\nThe returned iterator yields lines of type `Cow<'_, str>`. If\npossible, the wrapped lines will borrow from the input string. As\nan example, a hanging indentation, the first line can borrow from\nthe input, but the subsequent lines become owned strings:\n\n```\nuse std::borrow::Cow::{Borrowed, Owned};\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(15).subsequent_indent(\"....\");\nlet lines = wrap(\"Wrapping text all day long.\", &options);\nlet annotated = lines\n    .iter()\n    .map(|line| match line {\n        Borrowed(text) => format!(\"[Borrowed] {}\", text),\n        Owned(text) => format!(\"[Owned]    {}\", text),\n    })\n    .collect::<Vec<_>>();\nassert_eq!(\n    annotated,\n    &[\n        \"[Borrowed] Wrapping text\",\n        \"[Owned]    ....all day\",\n        \"[Owned]    ....long.\",\n    ]\n);\n```\n\n## Leading and Trailing Whitespace\n\nAs a rule, leading whitespace (indentation) is preserved and\ntrailing whitespace is discarded.\n\nIn more details, when wrapping words into lines, words are found\nby splitting the input text on space characters. One or more\nspaces (shown here as “␣”) are attached to the end of each word:\n\n```text\n\"Foo␣␣␣bar␣baz\" -> [\"Foo␣␣␣\", \"bar␣\", \"baz\"]\n```\n\nThese words are then put into lines. The interword whitespace is\npreserved, unless the lines are wrapped so that the `\"Foo␣␣␣\"`\nword falls at the end of a line:\n\n```\nuse textwrap::wrap;\n\nassert_eq!(wrap(\"Foo   bar baz\", 10), vec![\"Foo   bar\", \"baz\"]);\nassert_eq!(wrap(\"Foo   bar baz\", 8), vec![\"Foo\", \"bar baz\"]);\n```\n\nNotice how the trailing whitespace is removed in both case: in the\nfirst example, `\"bar␣\"` becomes `\"bar\"` and in the second case\n`\"Foo␣␣␣\"` becomes `\"Foo\"`.\n\nLeading whitespace is preserved when the following word fits on\nthe first line. To understand this, consider how words are found\nin a text with leading spaces:\n\n```text\n\"␣␣foo␣bar\" -> [\"␣␣\", \"foo␣\", \"bar\"]\n```\n\nWhen put into lines, the indentation is preserved if `\"foo\"` fits\non the first line, otherwise you end up with an empty line:\n\n```\nuse textwrap::wrap;\n\nassert_eq!(wrap(\"  foo bar\", 8), vec![\"  foo\", \"bar\"]);\nassert_eq!(wrap(\"  foo bar\", 4), vec![\"\", \"foo\", \"bar\"]);\n```","links":{"`Options`":"0:294:1791","Cow":"5:689:111","`WrapAlgorithm`":"0:226:1786","`fill`":"0:157:660","`String`":"5:7241:224"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["width_or_options",{"generic":"Opt"}]],"output":{"resolved_path":{"name":"Vec","id":"5:6695:244","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:689:111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Opt"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2251-0:226:1786":{"id":"b:2:2251-0:226:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2253:3352"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:185:1606":{"id":"0:185:1606","crate_id":0,"name":"0","span":{"filename":"src/word_separators.rs","begin":[122,11],"end":[122,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"function_pointer":{"decl":{"inputs":[["line",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:2856","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Iterator","id":"2:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}}}},"0:15:613":{"id":"0:15:613","crate_id":0,"name":"eq","span":{"filename":"src/word_separators.rs","begin":[149,4],"end":[156,5]},"visibility":"default","docs":"Compare two word separators.\n\n```\nuse textwrap::WordSeparator;\n\nassert_eq!(WordSeparator::AsciiSpace, WordSeparator::AsciiSpace);\n#[cfg(feature = \"unicode-linebreak\")] {\n    assert_eq!(WordSeparator::UnicodeBreakProperties,\n               WordSeparator::UnicodeBreakProperties);\n}\n```\n\nNote that `WordSeparator::Custom` values never compare equal:\n\n```\nuse textwrap::WordSeparator;\nuse textwrap::core::Word;\nfn word_separator(line: &str) -> Box<dyn Iterator<Item = Word<'_>> + '_> {\n    Box::new(line.split_inclusive(' ').map(Word::from))\n}\nassert_ne!(WordSeparator::Custom(word_separator),\n           WordSeparator::Custom(word_separator));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8249:10598-0:226:1786":{"id":"a:2:8249:10598-0:226:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8249:10598","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,16],"end":[185,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2694:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2538-0:226:1786":{"id":"b:2:2538-0:226:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:1938"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2553-0:216:3071":{"id":"b:2:2553-0:216:3071","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2553-0:294:1791":{"id":"b:2:2553-0:294:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2538-0:62:3349":{"id":"b:2:2538-0:62:3349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineNumbers","id":"0:62:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:1938"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12063:33270":{"id":"2:12063:33270","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:15831"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11535:8757","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2251-0:294:1791":{"id":"b:2:2251-0:294:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2253:3352"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12010":{"id":"2:12010","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12011:811","2:12012:1962","2:12013:39807","2:12014:39808","2:12016:39809","2:12019:3463","2:12020:39810","2:12021:314","2:12022:33240","2:12023:2246","2:12025:33237","2:12027:33238","2:12029:33239","2:12031:39811","2:12032:39812","2:12033:2749","2:12034:33262","2:12035:2027","2:12036:2025","2:12037:2289","2:12038:37393","2:12039:37385","2:12040:2017","2:12041:39813","2:12042:37398","2:12043:1960","2:12046:2746","2:12049:2034","2:12052:2897","2:12056:4007","2:12060:2170","2:12063:33270","2:12066:33272","2:12069:2729","2:12072:39814","2:12075:33274","2:12078:33276","2:12081:39815","2:12084:39816","2:12087:2968","2:12090:39817","2:12093:3031","2:12096:39818","2:12099:2730","2:12101:39819","2:12103:2728","2:12105:39820","2:12106:39821","2:12107:39822","2:12110:2021","2:12113:31287","2:12116:2066","2:12119:1963","2:12122:39823","2:12125:39824","2:12128:26585","2:12130:32648","2:12131:33138","2:12132:32649","2:12133:32645","2:12134:32644","2:12135:39825","2:12137:10406","2:12138:39826"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12014:39808":{"id":"2:12014:39808","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2538-0:178:1782":{"id":"b:2:2538-0:178:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:1938"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:205:3334":{"id":"0:205:3334","crate_id":0,"name":"short_last_line_fraction","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[123,4],"end":[123,39]},"visibility":"public","docs":"When should the a single word on the last line be considered\n\"too short\"?\n\nIf the last line of the text consist of a single word and if\nthis word is shorter than `1 / short_last_line_fraction` of\nthe line width, then the final line will be considered \"short\"\nand `short_last_line_penalty` is added as an extra penalty.\n\nThe effect of this is to avoid a final line consisting of a\nsingle small word. For example, with a\n`short_last_line_penalty` of 25 (the default), a gap of up to\n5 columns will be seen as more desirable than having a final\nshort line.\n\n## Examples\n\n```\nuse textwrap::{wrap, wrap_algorithms, Options, WrapAlgorithm};\n\nlet text = \"This is a demo of the short last line penalty.\";\n\n// The first-fit algorithm leaves a single short word on the last line:\nassert_eq!(wrap(text, Options::new(37).wrap_algorithm(WrapAlgorithm::FirstFit)),\n           vec![\"This is a demo of the short last line\",\n                \"penalty.\"]);\n\n#[cfg(feature = \"smawk\")] {\nlet mut penalties = wrap_algorithms::Penalties::new();\n\n// Since \"penalty.\" is shorter than 25% of the line width, the\n// optimal-fit algorithm adds a penalty of 25. This is enough\n// to move \"line \" down:\nassert_eq!(wrap(text, Options::new(37).wrap_algorithm(WrapAlgorithm::OptimalFit(penalties))),\n           vec![\"This is a demo of the short last\",\n                \"line penalty.\"]);\n\n// We can change the meaning of \"short\" lines. Here, only words\n// shorter than 1/10th of the line width will be considered short:\npenalties.short_last_line_fraction = 10;\nassert_eq!(wrap(text, Options::new(37).wrap_algorithm(WrapAlgorithm::OptimalFit(penalties))),\n           vec![\"This is a demo of the short last line\",\n                \"penalty.\"]);\n\n// If desired, the penalty can also be disabled:\npenalties.short_last_line_fraction = 4;\npenalties.short_last_line_penalty = 0;\nassert_eq!(wrap(text, Options::new(37).wrap_algorithm(WrapAlgorithm::OptimalFit(penalties))),\n           vec![\"This is a demo of the short last line\",\n                \"penalty.\"]);\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"0:95:60":{"id":"0:95:60","crate_id":0,"name":"default","span":{"filename":"src/wrap_algorithms.rs","begin":[192,4],"end":[194,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2286":{"id":"0:96:2286","crate_id":0,"name":"wrap_first_fit","span":{"filename":"src/wrap_algorithms.rs","begin":[345,0],"end":[369,1]},"visibility":"public","docs":"Wrap abstract fragments into lines with a first-fit algorithm.\n\nThe `line_widths` slice gives the target line width for each line\n(the last slice element is repeated as necessary). This can be\nused to implement hanging indentation.\n\nThe fragments must already have been split into the desired\nwidths, this function will not (and cannot) attempt to split them\nfurther when arranging them into lines.\n\n# First-Fit Algorithm\n\nThis implements a simple “greedy” algorithm: accumulate fragments\none by one and when a fragment no longer fits, start a new line.\nThere is no look-ahead, we simply take first fit of the fragments\nwe find.\n\nWhile fast and predictable, this algorithm can produce poor line\nbreaks when a long fragment is moved to a new line, leaving behind\na large gap:\n\n```\nuse textwrap::core::Word;\nuse textwrap::wrap_algorithms::wrap_first_fit;\nuse textwrap::WordSeparator;\n\n// Helper to convert wrapped lines to a Vec<String>.\nfn lines_to_strings(lines: Vec<&[Word<'_>]>) -> Vec<String> {\n    lines.iter().map(|line| {\n        line.iter().map(|word| &**word).collect::<Vec<_>>().join(\" \")\n    }).collect::<Vec<_>>()\n}\n\nlet text = \"These few words will unfortunately not wrap nicely.\";\nlet words = WordSeparator::AsciiSpace.find_words(text).collect::<Vec<_>>();\nassert_eq!(lines_to_strings(wrap_first_fit(&words, &[15.0])),\n           vec![\"These few words\",\n                \"will\",  // <-- short line\n                \"unfortunately\",\n                \"not wrap\",\n                \"nicely.\"]);\n\n// We can avoid the short line if we look ahead:\n#[cfg(feature = \"smawk\")]\nuse textwrap::wrap_algorithms::{wrap_optimal_fit, Penalties};\n#[cfg(feature = \"smawk\")]\nassert_eq!(lines_to_strings(wrap_optimal_fit(&words, &[15.0], &Penalties::new()).unwrap()),\n           vec![\"These few\",\n                \"words will\",\n                \"unfortunately\",\n                \"not wrap\",\n                \"nicely.\"]);\n```\n\nThe [`wrap_optimal_fit`] function was used above to get better\nline breaks. It uses an advanced algorithm which tries to avoid\nshort lines. This function is about 4 times faster than\n[`wrap_optimal_fit`].\n\n# Examples\n\nImagine you're building a house site and you have a number of\ntasks you need to execute. Things like pour foundation, complete\nframing, install plumbing, electric cabling, install insulation.\n\nThe construction workers can only work during daytime, so they\nneed to pack up everything at night. Because they need to secure\ntheir tools and move machines back to the garage, this process\ntakes much more time than the time it would take them to simply\nswitch to another task.\n\nYou would like to make a list of tasks to execute every day based\non your estimates. You can model this with a program like this:\n\n```\nuse textwrap::core::{Fragment, Word};\nuse textwrap::wrap_algorithms::wrap_first_fit;\n\n#[derive(Debug)]\nstruct Task<'a> {\n    name: &'a str,\n    hours: f64,   // Time needed to complete task.\n    sweep: f64,   // Time needed for a quick sweep after task during the day.\n    cleanup: f64, // Time needed for full cleanup if day ends with this task.\n}\n\nimpl Fragment for Task<'_> {\n    fn width(&self) -> f64 { self.hours }\n    fn whitespace_width(&self) -> f64 { self.sweep }\n    fn penalty_width(&self) -> f64 { self.cleanup }\n}\n\n// The morning tasks\nlet tasks = vec![\n    Task { name: \"Foundation\",  hours: 4.0, sweep: 2.0, cleanup: 3.0 },\n    Task { name: \"Framing\",     hours: 3.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Plumbing\",    hours: 2.0, sweep: 2.0, cleanup: 2.0 },\n    Task { name: \"Electrical\",  hours: 2.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Insulation\",  hours: 2.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Drywall\",     hours: 3.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Floors\",      hours: 3.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Countertops\", hours: 1.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Bathrooms\",   hours: 2.0, sweep: 1.0, cleanup: 2.0 },\n];\n\n// Fill tasks into days, taking `day_length` into account. The\n// output shows the hours worked per day along with the names of\n// the tasks for that day.\nfn assign_days<'a>(tasks: &[Task<'a>], day_length: f64) -> Vec<(f64, Vec<&'a str>)> {\n    let mut days = Vec::new();\n    // Assign tasks to days. The assignment is a vector of slices,\n    // with a slice per day.\n    let assigned_days: Vec<&[Task<'a>]> = wrap_first_fit(&tasks, &[day_length]);\n    for day in assigned_days.iter() {\n        let last = day.last().unwrap();\n        let work_hours: f64 = day.iter().map(|t| t.hours + t.sweep).sum();\n        let names = day.iter().map(|t| t.name).collect::<Vec<_>>();\n        days.push((work_hours - last.sweep + last.cleanup, names));\n    }\n    days\n}\n\n// With a single crew working 8 hours a day:\nassert_eq!(\n    assign_days(&tasks, 8.0),\n    [\n        (7.0, vec![\"Foundation\"]),\n        (8.0, vec![\"Framing\", \"Plumbing\"]),\n        (7.0, vec![\"Electrical\", \"Insulation\"]),\n        (5.0, vec![\"Drywall\"]),\n        (7.0, vec![\"Floors\", \"Countertops\"]),\n        (4.0, vec![\"Bathrooms\"]),\n    ]\n);\n\n// With two crews working in shifts, 16 hours a day:\nassert_eq!(\n    assign_days(&tasks, 16.0),\n    [\n        (14.0, vec![\"Foundation\", \"Framing\", \"Plumbing\"]),\n        (15.0, vec![\"Electrical\", \"Insulation\", \"Drywall\", \"Floors\"]),\n        (6.0, vec![\"Countertops\", \"Bathrooms\"]),\n    ]\n);\n```\n\nApologies to anyone who actually knows how to build a house and\nknows how long each step takes :-)","links":{"`wrap_optimal_fit`":"0:71:3070"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["fragments",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}],["line_widths",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6695:244","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fragment","id":"0:117:3073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12021:314":{"id":"2:12021:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12022:33240","`u8`":"1:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2684:220-0:62:3349":{"id":"a:2:2684:220-0:62:3349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineNumbers","id":"0:62:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:273:2189":{"id":"0:273:2189","crate_id":0,"name":"whitespace","span":{"filename":"src/core.rs","begin":[219,4],"end":[219,27]},"visibility":"public","docs":"Whitespace to insert if the word does not fall at the end of a line.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"a:2:2741:3817-0:216:3071":{"id":"a:2:2741:3817-0:216:3071","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:3817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2557:1477":{"id":"2:2557:1477","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:2855":{"id":"0:183:2855","crate_id":0,"name":"Custom","span":{"filename":"src/word_separators.rs","begin":[122,4],"end":[122,69]},"visibility":"default","docs":"Find words using a custom word separator","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:185:1606"]},"discriminant":null}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[125,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[120,0],"end":[129,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:20:2179":{"id":"0:20:2179","crate_id":0,"name":"find_words","span":{"filename":"src/word_separators.rs","begin":[192,4],"end":[199,5]},"visibility":"public","docs":"Find all words in `line`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["line",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:2856","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Iterator","id":"2:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2541:1938":{"id":"2:2541:1938","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2515:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2553-0:270:2183":{"id":"b:2:2553-0:270:2183","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:7206-0:258:2031":{"id":"b:2:7206-0:258:2031","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7208:2857","2:7209:4010","2:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,22],"end":[7,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:251:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2684:220-0:258:2031":{"id":"a:2:2684:220-0:258:2031","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,16],"end":[22,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:238:423":{"id":"0:238:423","crate_id":0,"name":"clone","span":{"filename":"src/wrap_algorithms.rs","begin":[33,9],"end":[33,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115:3512":{"id":"0:115:3512","crate_id":0,"name":"ch_width","span":{"filename":"src/core.rs","begin":[64,0],"end":[66,1]},"visibility":{"restricted":{"parent":"0:110:497","path":"::core"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"unicode-width\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ch",{"primitive":"char"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8249:10598-0:202:3072":{"id":"a:2:8249:10598-0:202:3072","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8249:10598","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2538-0:270:2183":{"id":"b:2:2538-0:270:2183","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2541:1938"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:300:1804":{"id":"0:300:1804","crate_id":0,"name":"break_words","span":{"filename":"src/lib.rs","begin":[248,4],"end":[248,25]},"visibility":"public","docs":"Allow long words to be broken if they cannot fit on a line.\nWhen set to `false`, some lines may be longer than\n`self.width`. See the [`Options::break_words`] method.","links":{"`Options::break_words`":"0:151:1804"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"bool"}}},"b:2:2548-0:294:1791":{"id":"b:2:2548-0:294:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2596":{"id":"0:0:2596","crate_id":0,"name":"textwrap","span":{"filename":"src/lib.rs","begin":[1,0],"end":[2058,1]},"visibility":"public","docs":"The textwrap library provides functions for word wrapping and\nindenting text.\n\n# Wrapping Text\n\nWrapping text can be very useful in command-line programs where\nyou want to format dynamic output nicely so it looks good in a\nterminal. A quick example:\n\n```\n# #[cfg(feature = \"smawk\")] {\nlet text = \"textwrap: a small library for wrapping text.\";\nassert_eq!(textwrap::wrap(text, 18),\n           vec![\"textwrap: a\",\n                \"small library for\",\n                \"wrapping text.\"]);\n# }\n```\n\nThe [`wrap`] function returns the individual lines, use [`fill`]\nis you want the lines joined with `'\\n'` to form a `String`.\n\nIf you enable the `hyphenation` Cargo feature, you can get\nautomatic hyphenation for a number of languages:\n\n```\n#[cfg(feature = \"hyphenation\")] {\nuse hyphenation::{Language, Load, Standard};\nuse textwrap::{wrap, Options, WordSplitter};\n\nlet text = \"textwrap: a small library for wrapping text.\";\nlet dictionary = Standard::from_embedded(Language::EnglishUS).unwrap();\nlet options = Options::new(18).word_splitter(WordSplitter::Hyphenation(dictionary));\nassert_eq!(wrap(text, &options),\n           vec![\"textwrap: a small\",\n                \"library for wrap-\",\n                \"ping text.\"]);\n}\n```\n\nSee also the [`unfill`] and [`refill`] functions which allow you to\nmanipulate already wrapped text.\n\n## Wrapping Strings at Compile Time\n\nIf your strings are known at compile time, please take a look at\nthe procedural macros from the [textwrap-macros] crate.\n\n## Displayed Width vs Byte Size\n\nTo word wrap text, one must know the width of each word so one can\nknow when to break lines. This library will by default measure the\nwidth of text using the _displayed width_, not the size in bytes.\nThe `unicode-width` Cargo feature controls this.\n\nThis is important for non-ASCII text. ASCII characters such as `a`\nand `!` are simple and take up one column each. This means that\nthe displayed width is equal to the string length in bytes.\nHowever, non-ASCII characters and symbols take up more than one\nbyte when UTF-8 encoded: `é` is `0xc3 0xa9` (two bytes) and `⚙` is\n`0xe2 0x9a 0x99` (three bytes) in UTF-8, respectively.\n\nThis is why we take care to use the displayed width instead of the\nbyte count when computing line lengths. All functions in this\nlibrary handle Unicode characters like this when the\n`unicode-width` Cargo feature is enabled (it is enabled by\ndefault).\n\n# Indentation and Dedentation\n\nThe textwrap library also offers functions for adding a prefix to\nevery line of a string and to remove leading whitespace. As an\nexample, the [`indent`] function allows you to turn lines of text\ninto a bullet list:\n\n```\nlet before = \"\\\nfoo\nbar\nbaz\n\";\nlet after = \"\\\n* foo\n* bar\n* baz\n\";\nassert_eq!(textwrap::indent(before, \"* \"), after);\n```\n\nRemoving leading whitespace is done with [`dedent`]:\n\n```\nlet before = \"\n    Some\n      indented\n        text\n\";\nlet after = \"\nSome\n  indented\n    text\n\";\nassert_eq!(textwrap::dedent(before), after);\n```\n\n# Cargo Features\n\nThe textwrap library can be slimmed down as needed via a number of\nCargo features. This means you only pay for the features you\nactually use.\n\nThe full dependency graph, where dashed lines indicate optional\ndependencies, is shown below:\n\n<img src=\"https://raw.githubusercontent.com/mgeisler/textwrap/master/images/textwrap-0.16.0.svg\">\n\n## Default Features\n\nThese features are enabled by default:\n\n* `unicode-linebreak`: enables finding words using the\n  [unicode-linebreak] crate, which implements the line breaking\n  algorithm described in [Unicode Standard Annex\n  #14](https://www.unicode.org/reports/tr14/).\n\n  This feature can be disabled if you are happy to find words\n  separated by ASCII space characters only. People wrapping text\n  with emojis or East-Asian characters will want most likely want\n  to enable this feature. See [`WordSeparator`] for details.\n\n* `unicode-width`: enables correct width computation of non-ASCII\n  characters via the [unicode-width] crate. Without this feature,\n  every [`char`] is 1 column wide, except for emojis which are 2\n  columns wide. See the [`core::display_width`] function for\n  details.\n\n  This feature can be disabled if you only need to wrap ASCII\n  text, or if the functions in [`core`] are used directly with\n  [`core::Fragment`]s for which the widths have been computed in\n  other ways.\n\n* `smawk`: enables linear-time wrapping of the whole paragraph via\n  the [smawk] crate. See the [`wrap_algorithms::wrap_optimal_fit`]\n  function for details on the optimal-fit algorithm.\n\n  This feature can be disabled if you only ever intend to use\n  [`wrap_algorithms::wrap_first_fit`].\n\n<!-- begin binary-sizes -->\n\nWith Rust 1.64.0, the size impact of the above features on your\nbinary is as follows:\n\n| Configuration                            |  Binary Size |    Delta |\n| :---                                     |         ---: |     ---: |\n| quick-and-dirty implementation           |       289 KB |     — KB |\n| textwrap without default features        |       305 KB |    16 KB |\n| textwrap with smawk                      |       317 KB |    28 KB |\n| textwrap with unicode-width              |       309 KB |    20 KB |\n| textwrap with unicode-linebreak          |       342 KB |    53 KB |\n\n<!-- end binary-sizes -->\n\nThe above sizes are the stripped sizes and the binary is compiled\nin release mode with this profile:\n\n```toml\n[profile.release]\nlto = true\ncodegen-units = 1\n```\n\nSee the [binary-sizes demo] if you want to reproduce these\nresults.\n\n## Optional Features\n\nThese Cargo features enable new functionality:\n\n* `terminal_size`: enables automatic detection of the terminal\n  width via the [terminal_size] crate. See the\n  [`Options::with_termwidth`] constructor for details.\n\n* `hyphenation`: enables language-sensitive hyphenation via the\n  [hyphenation] crate. See the [`word_splitters::WordSplitter`]\n  trait for details.\n\n[unicode-linebreak]: https://docs.rs/unicode-linebreak/\n[unicode-width]: https://docs.rs/unicode-width/\n[smawk]: https://docs.rs/smawk/\n[binary-sizes demo]: https://github.com/mgeisler/textwrap/tree/master/examples/binary-sizes\n[textwrap-macros]: https://docs.rs/textwrap-macros/\n[terminal_size]: https://docs.rs/terminal_size/\n[hyphenation]: https://docs.rs/hyphenation/","links":{"`dedent`":"0:6:1779","`word_splitters::WordSplitter`":"0:189:1784","`refill`":"0:162:2061","`wrap`":"0:165:1970","`unfill`":"0:161:2008","`Options::with_termwidth`":"0:147:1851","`char`":"1:11888:419","`core::display_width`":"0:116:2019","`wrap_algorithms::wrap_optimal_fit`":"0:71:3070","`WordSeparator`":"0:178:1782","`fill`":"0:157:660","`indent`":"0:5:1780","`core::Fragment`":"0:117:3073","`wrap_algorithms::wrap_first_fit`":"0:96:2286","`core`":"0:110:497"},"attrs":["#![doc(html_root_url = \"https://docs.rs/textwrap/0.16.0\")]","#![forbid(unsafe_code)]","#![deny(missing_docs)]","#![deny(missing_debug_implementations)]","#![allow(clippy :: redundant_field_names)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:4:1778","0:11:1781","0:35:1783","0:54:1785","0:101:1787","0:110:497","0:9-0:6:1779","0:10-0:5:1780","0:34-0:178:1782","0:53-0:189:1784","0:100-0:226:1786","0:109-0:242:1788","0:294:1791","0:155:1852","0:157:660","0:160:1965","0:161:2008","0:162:2061","0:165:1970","0:168:2171","0:170:2172","0:173:2232","0:176:2283"],"is_stripped":false}}},"2:12035:2027":{"id":"2:12035:2027","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43327:8770","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:1787":{"id":"0:148:1787","crate_id":0,"name":"line_ending","span":{"filename":"src/lib.rs","begin":[363,4],"end":[368,5]},"visibility":"public","docs":"Change [`self.line_ending`]. This specifies which of the\nsupported line endings should be used to break the lines of the\ninput text.\n\n# Examples\n\n```\nuse textwrap::{refill, LineEnding, Options};\n\nlet options = Options::new(15).line_ending(LineEnding::CRLF);\nassert_eq!(refill(\"This is a little example.\", options),\n           \"This is a\\r\\nlittle example.\");\n```\n\n[`self.line_ending`]: #structfield.line_ending","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["line_ending",{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12036:2025":{"id":"2:12036:2025","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43333:9027","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[164,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"LineNumbers","id":"0:62:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:939","0:66:2246"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2248-0:178:1782":{"id":"b:2:2248-0:178:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2250:1777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2542-0:226:1786":{"id":"b:2:2542-0:226:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12090:39817":{"id":"2:12090:39817","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11712:15831","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::matches":"2:12087:2968"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43579:9034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:15829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:2730":{"id":"2:12099:2730","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:39819":{"id":"2:12101:39819","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2553-0:202:3072":{"id":"b:2:2553-0:202:3072","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:190:2420":{"id":"0:190:2420","crate_id":0,"name":"NoHyphenation","span":{"filename":"src/word_splitters.rs","begin":[50,4],"end":[50,17]},"visibility":"default","docs":"Use this as a [`Options.word_splitter`] to avoid any kind of\nhyphenation:\n\n```\nuse textwrap::{wrap, Options, WordSplitter};\n\nlet options = Options::new(8).word_splitter(WordSplitter::NoHyphenation);\nassert_eq!(wrap(\"foo bar-baz\", &options),\n           vec![\"foo\", \"bar-baz\"]);\n```\n\n[`Options.word_splitter`]: super::Options::word_splitter","links":{"super::Options::word_splitter":"0:154:1815"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:71:3070":{"id":"0:71:3070","crate_id":0,"name":"wrap_optimal_fit","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[302,0],"end":[389,1]},"visibility":"public","docs":"Wrap abstract fragments into lines with an optimal-fit algorithm.\n\nThe `line_widths` slice gives the target line width for each line\n(the last slice element is repeated as necessary). This can be\nused to implement hanging indentation.\n\nThe fragments must already have been split into the desired\nwidths, this function will not (and cannot) attempt to split them\nfurther when arranging them into lines.\n\n# Optimal-Fit Algorithm\n\nThe algorithm considers all possible break points and picks the\nbreaks which minimizes the gaps at the end of each line. More\nprecisely, the algorithm assigns a cost or penalty to each break\npoint, determined by `cost = gap * gap` where `gap = target_width -\nline_width`. Shorter lines are thus penalized more heavily since\nthey leave behind a larger gap.\n\nWe can illustrate this with the text “To be, or not to be: that is\nthe question”. We will be wrapping it in a narrow column with room\nfor only 10 characters. The [greedy\nalgorithm](super::wrap_first_fit) will produce these lines, each\nannotated with the corresponding penalty:\n\n```text\n\"To be, or\"   1² =  1\n\"not to be:\"  0² =  0\n\"that is\"     3² =  9\n\"the\"         7² = 49\n\"question\"    2² =  4\n```\n\nWe see that line four with “the” leaves a gap of 7 columns, which\ngives it a penalty of 49. The sum of the penalties is 63.\n\nThere are 10 words, which means that there are `2_u32.pow(9)` or\n512 different ways to typeset it. We can compute\nthe sum of the penalties for each possible line break and search\nfor the one with the lowest sum:\n\n```text\n\"To be,\"     4² = 16\n\"or not to\"  1² =  1\n\"be: that\"   2² =  4\n\"is the\"     4² = 16\n\"question\"   2² =  4\n```\n\nThe sum of the penalties is 41, which is better than what the\ngreedy algorithm produced.\n\nSearching through all possible combinations would normally be\nprohibitively slow. However, it turns out that the problem can be\nformulated as the task of finding column minima in a cost matrix.\nThis matrix has a special form (totally monotone) which lets us\nuse a [linear-time algorithm called\nSMAWK](https://lib.rs/crates/smawk) to find the optimal break\npoints.\n\nThis means that the time complexity remains O(_n_) where _n_ is\nthe number of words. Compared to\n[`wrap_first_fit`](super::wrap_first_fit), this function is about\n4 times slower.\n\nThe optimization of per-line costs over the entire paragraph is\ninspired by the line breaking algorithm used in TeX, as described\nin the 1981 article [_Breaking Paragraphs into\nLines_](http://www.eprg.org/G53DOC/pdfs/knuth-plass-breaking.pdf)\nby Knuth and Plass. The implementation here is based on [Python\ncode by David\nEppstein](https://github.com/jfinkels/PADS/blob/master/pads/wrap.py).\n\n# Errors\n\nIn case of an overflow during the cost computation, an `Err` is\nreturned. Overflows happens when fragments or lines have infinite\nwidths (`f64::INFINITY`) or if the widths are so large that the\ngaps at the end of lines have sizes larger than `f64::MAX.sqrt()`\n(approximately 1e154):\n\n```\nuse textwrap::core::Fragment;\nuse textwrap::wrap_algorithms::{wrap_optimal_fit, OverflowError, Penalties};\n\n#[derive(Debug, PartialEq)]\nstruct Word(f64);\n\nimpl Fragment for Word {\n    fn width(&self) -> f64 { self.0 }\n    fn whitespace_width(&self) -> f64 { 1.0 }\n    fn penalty_width(&self) -> f64 { 0.0 }\n}\n\n// Wrapping overflows because 1e155 * 1e155 = 1e310, which is\n// larger than f64::MAX:\nassert_eq!(wrap_optimal_fit(&[Word(0.0), Word(0.0)], &[1e155], &Penalties::default()),\n           Err(OverflowError));\n```\n\nWhen using fragment widths and line widths which fit inside an\n`u64`, overflows cannot happen. This means that fragments derived\nfrom a `&str` cannot cause overflows.\n\n**Note:** Only available when the `smawk` Cargo feature is\nenabled.","links":{"super::wrap_first_fit":"0:96:2286"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["fragments",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}],["line_widths",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"primitive":"f64"}}}}],["penalties",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6695:244","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fragment","id":"0:117:3073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2538-0:242:1788":{"id":"b:2:2538-0:242:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:1938"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:134:3245":{"id":"0:134:3245","crate_id":0,"name":"penalty_width","span":{"filename":"src/core.rs","begin":[320,4],"end":[322,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:241":{"id":"0:241","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[33,16],"end":[33,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3319-0:270:2183":{"id":"b:2:3319-0:270:2183","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12031:39811":{"id":"2:12031:39811","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11894:1397","str::slice_mut_unchecked":"2:12032:39812","crate::ops::Index":"2:2981:4467"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:301:1807":{"id":"0:301:1807","crate_id":0,"name":"wrap_algorithm","span":{"filename":"src/lib.rs","begin":[251,4],"end":[251,37]},"visibility":"public","docs":"Wrapping algorithm to use, see the implementations of the\n[`wrap_algorithms::WrapAlgorithm`] trait for details.","links":{"`wrap_algorithms::WrapAlgorithm`":"0:226:1786"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:12119:1963":{"id":"2:12119:1963","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:15831"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:15829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2553-0:258:2031":{"id":"b:2:2553-0:258:2031","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2548-0:258:2031":{"id":"b:2:2548-0:258:2031","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2741:3817-0:270:2183":{"id":"a:2:2741:3817-0:270:2183","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:3817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[127,0],"end":[173,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:44:2304"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12116:2066":{"id":"2:12116:2066","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:15831"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:15829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5401:32647":{"id":"5:5401:32647","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12133:32645"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:552":{"id":"0:123:552","crate_id":0,"name":"deref","span":{"filename":"src/core.rs","begin":[229,4],"end":[231,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:2898:117","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:2874":{"id":"0:22:2874","crate_id":0,"name":"find_words_ascii_space","span":{"filename":"src/word_separators.rs","begin":[202,0],"end":[227,1]},"visibility":{"restricted":{"parent":"0:11:1781","path":"::word_separators"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["line",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:2856","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Iterator","id":"2:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,29],"end":[7,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2694:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:267:423":{"id":"0:267:423","crate_id":0,"name":"clone","span":{"filename":"src/line_ending.rs","begin":[34,16],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2548-0:270:2183":{"id":"b:2:2548-0:270:2183","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:276":{"id":"0:276","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[214,9],"end":[214,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:278:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:162:2061":{"id":"0:162:2061","crate_id":0,"name":"refill","span":{"filename":"src/lib.rs","begin":[798,0],"end":[817,1]},"visibility":"public","docs":"Refill a paragraph of wrapped text with a new width.\n\nThis function will first use the [`unfill`] function to remove\nnewlines from the text. Afterwards the text is filled again using\nthe [`fill`] function.\n\nThe `new_width_or_options` argument specify the new width and can\nspecify other options as well — except for\n[`Options::initial_indent`] and [`Options::subsequent_indent`],\nwhich are deduced from `filled_text`.\n\n# Examples\n\n```\nuse textwrap::refill;\n\n// Some loosely wrapped text. The \"> \" prefix is recognized automatically.\nlet text = \"\\\n> Memory\n> safety without garbage\n> collection.\n\";\n\nassert_eq!(refill(text, 20), \"\\\n> Memory safety\n> without garbage\n> collection.\n\");\n\nassert_eq!(refill(text, 40), \"\\\n> Memory safety without garbage\n> collection.\n\");\n\nassert_eq!(refill(text, 60), \"\\\n> Memory safety without garbage collection.\n\");\n```\n\nYou can also reshape bullet points:\n\n```\nuse textwrap::refill;\n\nlet text = \"\\\n- This is my\n  list item.\n\";\n\nassert_eq!(refill(text, 20), \"\\\n- This is my list\n  item.\n\");\n```","links":{"`Options::subsequent_indent`":"0:150:1800","`fill`":"0:157:660","`unfill`":"0:161:2008","`Options::initial_indent`":"0:149:1797"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["filled_text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["new_width_or_options",{"generic":"Opt"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Opt"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8250:10597-0:178:1782":{"id":"a:2:8250:10597-0:178:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8250:10597","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2548-0:242:1788":{"id":"b:2:2548-0:242:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:242:1788":{"id":"0:242:1788","crate_id":0,"name":"LineEnding","span":{"filename":"src/line_ending.rs","begin":[8,0],"end":[16,1]},"visibility":"public","docs":"Supported line endings. Like in the Rust standard library, two line\nendings are supported: `\\r\\n` and `\\n`","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:243:2033","0:245:1837"],"impls":["0:103","a:2:2701:228-0:242:1788","a:2:8249:10598-0:242:1788","a:2:8250:10597-0:242:1788","a:2:2684:220-0:242:1788","a:2:2741:3817-0:242:1788","b:2:2542-0:242:1788","b:2:2248-0:242:1788","b:2:2553-0:242:1788","b:2:2251-0:242:1788","b:2:2538-0:242:1788","b:2:3319-0:242:1788","b:2:2548-0:242:1788","b:5:684-0:242:1788","0:249","0:247","0:253","0:250","0:255","0:252","0:256"]}}},"a:2:2684:220-0:189:1784":{"id":"a:2:2684:220-0:189:1784","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12072:39814":{"id":"2:12072:39814","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11712:15831","str::split":"2:12060:2170","prim@char":"1:11888:419","str::split_terminator":"2:12069:2729"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43425:9030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:15829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12130:32648":{"id":"2:12130:32648","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:939":{"id":"0:59:939","crate_id":0,"name":"new","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[141,4],"end":[149,5]},"visibility":"public","docs":"Default penalties for monospace text.\n\nThe penalties here work well for monospace text. This is\nbecause they expect the gaps at the end of lines to be roughly\nin the range `0..100`. If the gaps are larger, the\n`overflow_penalty` and `hyphen_penalty` become insignificant.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:3072":{"id":"0:202:3072","crate_id":0,"name":"Penalties","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[23,0],"end":[132,1]},"visibility":"public","docs":"Penalties for\n[`WrapAlgorithm::OptimalFit`](crate::WrapAlgorithm::OptimalFit)\nand [`wrap_optimal_fit`].\n\nThis wrapping algorithm in [`wrap_optimal_fit`] considers the\nentire paragraph to find optimal line breaks. When wrapping text,\n\"penalties\" are assigned to line breaks based on the gaps left at\nthe end of lines. The penalties are given by this struct, with\n[`Penalties::default`] assigning penalties that work well for\nmonospace text.\n\nIf you are wrapping proportional text, you are advised to assign\nyour own penalties according to your font size. See the individual\npenalties below for details.\n\n**Note:** Only available when the `smawk` Cargo feature is\nenabled.","links":{"crate::WrapAlgorithm::OptimalFit":"0:229:3093","`wrap_optimal_fit`":"0:71:3070","`Penalties::default`":"0:61:60"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:203:3271","0:204:3302","0:205:3334","0:206:3337","0:207:3339"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:58","a:2:2701:228-0:202:3072","a:2:8249:10598-0:202:3072","a:2:8250:10597-0:202:3072","a:2:2684:220-0:202:3072","a:2:2741:3817-0:202:3072","b:2:2542-0:202:3072","b:2:2248-0:202:3072","b:2:2553-0:202:3072","b:2:2251-0:202:3072","b:2:2538-0:202:3072","b:2:3319-0:202:3072","b:2:2548-0:202:3072","b:5:684-0:202:3072","0:208","0:211","0:210","0:60","0:214","0:213"]}}},"b:2:3319-0:178:1782":{"id":"b:2:3319-0:178:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:61:60":{"id":"0:61:60","crate_id":0,"name":"default","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[153,4],"end":[155,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2610-0:216:3071":{"id":"b:2:2610-0:216:3071","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2603:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3370:15862","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:10260"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"0:226:1786":{"id":"0:226:1786","crate_id":0,"name":"WrapAlgorithm","span":{"filename":"src/wrap_algorithms.rs","begin":[34,0],"end":[88,1]},"visibility":"public","docs":"Describes how to wrap words into lines.\n\nThe simplest approach is to wrap words one word at a time and\naccept the first way of wrapping which fit\n([`WrapAlgorithm::FirstFit`]). If the `smawk` Cargo feature is\nenabled, a more complex algorithm is available which will look at\nan entire paragraph at a time in order to find optimal line breaks\n([`WrapAlgorithm::OptimalFit`]).","links":{"`WrapAlgorithm::OptimalFit`":"0:229:3093","`WrapAlgorithm::FirstFit`":"0:227:2315"},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:227:2315","0:229:3093","0:232:2855"],"impls":["0:87","a:2:2701:228-0:226:1786","a:2:8249:10598-0:226:1786","a:2:8250:10597-0:226:1786","a:2:2684:220-0:226:1786","a:2:2741:3817-0:226:1786","b:2:2542-0:226:1786","b:2:2248-0:226:1786","b:2:2553-0:226:1786","b:2:2251-0:226:1786","b:2:2538-0:226:1786","b:2:3319-0:226:1786","b:2:2548-0:226:1786","b:5:684-0:226:1786","0:241","0:94","0:237","0:83","0:85"]}}},"0:39":{"id":"0:39","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[101,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:40:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5382":{"id":"5:5382","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5383:40476","5:5384:4398","5:5387:40477","5:5390:40478","5:5398:40479","5:5399:40480","5:5400:2241","5:5401:32647","5:5402:32646"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:309:423":{"id":"0:309:423","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[233,16],"end":[233,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:1606":{"id":"0:199:1606","crate_id":0,"name":"0","span":{"filename":"src/word_splitters.rs","begin":[98,16],"end":[98,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"hyphenation::Standard","id":"25:666:2297","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:197:2429":{"id":"0:197:2429","crate_id":0,"name":"Hyphenation","span":{"filename":"src/word_splitters.rs","begin":[98,4],"end":[98,38]},"visibility":"default","docs":"A hyphenation dictionary can be used to do language-specific\nhyphenation using patterns from the [hyphenation] crate.\n\n**Note:** Only available when the `hyphenation` Cargo feature is\nenabled.\n\n[hyphenation]: https://docs.rs/hyphenation/","links":{},"attrs":["#[cfg(feature = \"hyphenation\")]"],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:199:1606"]},"discriminant":null}}},"0:306:668":{"id":"0:306:668","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[233,9],"end":[233,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8249:10598-0:178:1782":{"id":"a:2:8249:10598-0:178:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8249:10598","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:176:2283":{"id":"0:176:2283","crate_id":0,"name":"fill_inplace","span":{"filename":"src/lib.rs","begin":[1260,0],"end":[1293,1]},"visibility":"public","docs":"Fill `text` in-place without reallocating the input string.\n\nThis function works by modifying the input string: some `' '`\ncharacters will be replaced by `'\\n'` characters. The rest of the\ntext remains untouched.\n\nSince we can only replace existing whitespace in the input with\n`'\\n'` (there is no space for `\"\\r\\n\"`), we cannot do hyphenation\nnor can we split words longer than the line width. We also need to\nuse `AsciiSpace` as the word separator since we need `' '`\ncharacters between words in order to replace some of them with a\n`'\\n'`. Indentation is also ruled out. In other words,\n`fill_inplace(width)` behaves as if you had called [`fill`] with\nthese options:\n\n```\n# use textwrap::{core, LineEnding, Options, WordSplitter, WordSeparator, WrapAlgorithm};\n# let width = 80;\nOptions::new(width)\n    .break_words(false)\n    .line_ending(LineEnding::LF)\n    .word_separator(WordSeparator::AsciiSpace)\n    .wrap_algorithm(WrapAlgorithm::FirstFit)\n    .word_splitter(WordSplitter::NoHyphenation);\n```\n\nThe wrap algorithm is [`WrapAlgorithm::FirstFit`] since this\nis the fastest algorithm — and the main reason to use\n`fill_inplace` is to get the string broken into newlines as fast\nas possible.\n\nA last difference is that (unlike [`fill`]) `fill_inplace` can\nleave trailing whitespace on lines. This is because we wrap by\ninserting a `'\\n'` at the final whitespace in the input string:\n\n```\nlet mut text = String::from(\"Hello   World!\");\ntextwrap::fill_inplace(&mut text, 10);\nassert_eq!(text, \"Hello  \\nWorld!\");\n```\n\nIf we didn't do this, the word `World!` would end up being\nindented. You can avoid this if you make sure that your input text\nhas no double spaces.\n\n# Performance\n\nIn benchmarks, `fill_inplace` is about twice as fast as [`fill`].\nPlease see the [`linear`\nbenchmark](https://github.com/mgeisler/textwrap/blob/master/benchmarks/linear.rs)\nfor details.","links":{"`fill`":"0:157:660","`WrapAlgorithm::FirstFit`":"0:227:2315"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["width",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2538-0:189:1784":{"id":"b:2:2538-0:189:1784","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:1938"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2548-0:189:1784":{"id":"b:2:2548-0:189:1784","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:264:668":{"id":"0:264:668","crate_id":0,"name":"fmt","span":{"filename":"src/line_ending.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298:1797":{"id":"0:298:1797","crate_id":0,"name":"initial_indent","span":{"filename":"src/lib.rs","begin":[241,4],"end":[241,31]},"visibility":"public","docs":"Indentation used for the first line of output. See the\n[`Options::initial_indent`] method.","links":{"`Options::initial_indent`":"0:149:1797"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"0:170:2172":{"id":"0:170:2172","crate_id":0,"name":"wrap_single_line_slow_path","span":{"filename":"src/lib.rs","begin":[1020,0],"end":[1097,1]},"visibility":"crate","docs":"Wrap a single line of text.\n\nThis is taken when `line` is longer than `options.width`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["line",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}],["options",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["lines",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:6695:244","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:689:111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2741:3817-0:202:3072":{"id":"a:2:2741:3817-0:202:3072","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:3817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2741:3817-0:294:1791":{"id":"a:2:2741:3817-0:294:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:3817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2701:228-0:226:1786":{"id":"a:2:2701:228-0:226:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[134,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:939"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:231:1606":{"id":"0:231:1606","crate_id":0,"name":"0","span":{"filename":"src/wrap_algorithms.rs","begin":[55,15],"end":[55,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:88:939":{"id":"0:88:939","crate_id":0,"name":"new","span":{"filename":"src/wrap_algorithms.rs","begin":[137,4],"end":[147,5]},"visibility":"public","docs":"Create new wrap algorithm.\n\nThe best wrapping algorithm is used by default, i.e.,\n[`WrapAlgorithm::OptimalFit`] if available, otherwise\n[`WrapAlgorithm::FirstFit`].","links":{"`WrapAlgorithm::OptimalFit`":"0:229:3093","`WrapAlgorithm::FirstFit`":"0:227:2315"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294:1791":{"id":"0:294:1791","crate_id":0,"name":"Options","span":{"filename":"src/lib.rs","begin":[234,0],"end":[260,1]},"visibility":"public","docs":"Holds configuration options for wrapping and filling text.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:296:1586","0:297:1787","0:298:1797","0:299:1800","0:300:1804","0:301:1807","0:302:1811","0:303:1815"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:144","a:2:2701:228-0:294:1791","a:2:8249:10598-0:294:1791","a:2:8250:10597-0:294:1791","a:2:2684:220-0:294:1791","a:2:2741:3817-0:294:1791","b:2:2542-0:294:1791","b:2:2248-0:294:1791","b:2:2553-0:294:1791","b:2:2251-0:294:1791","b:2:2538-0:294:1791","b:2:3319-0:294:1791","b:2:2548-0:294:1791","b:5:684-0:294:1791","0:304","0:307","0:141","0:138"]}}},"2:12034:33262":{"id":"2:12034:33262","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12033:2749"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2248-0:258:2031":{"id":"b:2:2248-0:258:2031","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2250:1777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2248-0:189:1784":{"id":"b:2:2248-0:189:1784","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2250:1777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:687:2192":{"id":"5:687:2192","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:3602":{"id":"0:127:3602","crate_id":0,"name":"break_apart","span":{"filename":"src/core.rs","begin":[262,4],"end":[301,5]},"visibility":"public","docs":"Break this word into smaller words with a width of at most\n`line_width`. The whitespace and penalty from this `Word` is\nadded to the last piece.\n\n# Examples\n\n```\nuse textwrap::core::Word;\nassert_eq!(\n    Word::from(\"Hello!  \").break_apart(3).collect::<Vec<_>>(),\n    vec![Word::from(\"Hel\"), Word::from(\"lo!  \")]\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Self"}}}],["line_width",{"primitive":"usize"}]],"output":{"impl_trait":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'b"}]},"c_variadic":false},"generics":{"params":[{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2701:228-0:270:2183":{"id":"a:2:2701:228-0:270:2183","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:207:3339":{"id":"0:207:3339","crate_id":0,"name":"hyphen_penalty","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[131,4],"end":[131,29]},"visibility":"public","docs":"Penalty for lines ending with a hyphen.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"5:5398:40479":{"id":"5:5398:40479","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:660":{"id":"0:157:660","crate_id":0,"name":"fill","span":{"filename":"src/lib.rs","begin":[603,0],"end":[614,1]},"visibility":"public","docs":"Fill a line of text at a given width.\n\nThe result is a [`String`], complete with newlines between each\nline. Use the [`wrap`] function if you need access to the\nindividual lines.\n\nThe easiest way to use this function is to pass an integer for\n`width_or_options`:\n\n```\nuse textwrap::fill;\n\nassert_eq!(\n    fill(\"Memory safety without garbage collection.\", 15),\n    \"Memory safety\\nwithout garbage\\ncollection.\"\n);\n```\n\nIf you need to customize the wrapping, you can pass an [`Options`]\ninstead of an `usize`:\n\n```\nuse textwrap::{fill, Options};\n\nlet options = Options::new(15)\n    .initial_indent(\"- \")\n    .subsequent_indent(\"  \");\nassert_eq!(\n    fill(\"Memory safety without garbage collection.\", &options),\n    \"- Memory safety\\n  without\\n  garbage\\n  collection.\"\n);\n```","links":{"`Options`":"0:294:1791","`wrap`":"0:165:1970","`String`":"5:7241:224"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["width_or_options",{"generic":"Opt"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Opt"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2551:128":{"id":"2:2551:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:5:684-0:178:1782":{"id":"b:5:684-0:178:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:686:2191","5:687:2192","5:688:4055"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[188,0],"end":[192,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8249:10598-0:294:1791":{"id":"a:2:8249:10598-0:294:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8249:10598","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2248-0:270:2183":{"id":"b:2:2248-0:270:2183","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2250:1777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8249:10598-0:189:1784":{"id":"a:2:8249:10598-0:189:1784","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8249:10598","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:268":{"id":"0:268","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[34,23],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2253:3352":{"id":"2:2253:3352","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2251-0:270:2183":{"id":"b:2:2251-0:270:2183","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2253:3352"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:278:668":{"id":"0:278:668","crate_id":0,"name":"fmt","span":{"filename":"src/core.rs","begin":[214,9],"end":[214,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208":{"id":"0:208","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:209:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,40],"end":[7,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:684-0:258:2031":{"id":"b:5:684-0:258:2031","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:686:2191","5:687:2192","5:688:4055"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:261:1606":{"id":"0:261:1606","crate_id":0,"name":"0","span":{"filename":"src/line_ending.rs","begin":[35,36],"end":[35,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"0:283:423":{"id":"0:283:423","crate_id":0,"name":"clone","span":{"filename":"src/core.rs","begin":[214,22],"end":[214,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12027:33238":{"id":"2:12027:33238","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:2806":{"id":"0:113:2806","crate_id":0,"name":"skip_ansi_escape_sequence","span":{"filename":"src/core.rs","begin":[48,0],"end":[60,1]},"visibility":"crate","docs":"Skip ANSI escape sequences. The `ch` is the current `char`, the\n`chars` provide the following characters. The `chars` will be\nmodified if `ch` is the start of an ANSI escape sequence.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ch",{"primitive":"char"}],["chars",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"I"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"char"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:1815":{"id":"0:154:1815","crate_id":0,"name":"word_splitter","span":{"filename":"src/lib.rs","begin":[530,4],"end":[541,5]},"visibility":"public","docs":"Change [`self.word_splitter`]. The\n[`word_splitters::WordSplitter`] is used to fit part of a word\ninto the current line when wrapping text.\n\nSee [`Options::break_words`] instead if you want to control the\nhandling of words longer than the line width.\n\n# Examples\n\n```\nuse textwrap::{wrap, Options, WordSplitter};\n\n// The default is WordSplitter::HyphenSplitter.\nlet options = Options::new(5);\nassert_eq!(wrap(\"foo-bar-baz\", &options),\n           vec![\"foo-\", \"bar-\", \"baz\"]);\n\n// The word is now so long that break_words kick in:\nlet options = Options::new(5)\n    .word_splitter(WordSplitter::NoHyphenation);\nassert_eq!(wrap(\"foo-bar-baz\", &options),\n           vec![\"foo-b\", \"ar-ba\", \"z\"]);\n\n// If you want to breaks at all, disable both:\nlet options = Options::new(5)\n    .break_words(false)\n    .word_splitter(WordSplitter::NoHyphenation);\nassert_eq!(wrap(\"foo-bar-baz\", &options),\n           vec![\"foo-bar-baz\"]);\n```\n\n[`self.word_splitter`]: #structfield.word_splitter","links":{"`word_splitters::WordSplitter`":"0:189:1784","`Options::break_words`":"0:151:1804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["word_splitter",{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2538-0:258:2031":{"id":"b:2:2538-0:258:2031","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2541:1938"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12056:4007":{"id":"2:12056:4007","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41396:179","prim@char":"1:11888:419","self::pattern":"2:11712:15831"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:15829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[159,0],"end":[168,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:48:2180":{"id":"0:48:2180","crate_id":0,"name":"split_words","span":{"filename":"src/word_splitters.rs","begin":[181,0],"end":[218,1]},"visibility":"public","docs":"Split words into smaller words according to the split points given\nby `word_splitter`.\n\nNote that we split all words, regardless of their length. This is\nto more cleanly separate the business of splitting (including\nautomatic hyphenation) from the business of word wrapping.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["words",{"generic":"I"}],["word_splitter",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"impl_trait":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8249:10598-0:216:3071":{"id":"a:2:8249:10598-0:216:3071","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8249:10598","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2250:1777":{"id":"2:2250:1777","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2701:228-0:62:3349":{"id":"a:2:2701:228-0:62:3349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineNumbers","id":"0:62:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[131,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:939","0:89:3130","0:90:1970"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:206:3337":{"id":"0:206:3337","crate_id":0,"name":"short_last_line_penalty","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[128,4],"end":[128,38]},"visibility":"public","docs":"Penalty for a last line with a single short word.\n\nSet this to zero if you do not want to penalize short last lines.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,29],"end":[7,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:254:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8250:10597-0:258:2031":{"id":"a:2:8250:10597-0:258:2031","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8250:10597","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:63:3350":{"id":"0:63:3350","crate_id":0,"name":"line_numbers","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[161,4],"end":[161,37]},"visibility":{"restricted":{"parent":"0:55:3069","path":"::wrap_algorithms::optimal_fit"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"RefCell","id":"2:4251:207","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6695:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:299:1800":{"id":"0:299:1800","crate_id":0,"name":"subsequent_indent","span":{"filename":"src/lib.rs","begin":[244,4],"end":[244,34]},"visibility":"public","docs":"Indentation used for subsequent lines of output. See the\n[`Options::subsequent_indent`] method.","links":{"`Options::subsequent_indent`":"0:150:1800"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"b:2:2553-0:178:1782":{"id":"b:2:2553-0:178:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2251-0:178:1782":{"id":"b:2:2251-0:178:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2253:3352"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:173:2232":{"id":"0:173:2232","crate_id":0,"name":"wrap_columns","span":{"filename":"src/lib.rs","begin":[1156,0],"end":[1207,1]},"visibility":"public","docs":"Wrap text into columns with a given total width.\n\nThe `left_gap`, `middle_gap` and `right_gap` arguments specify the\nstrings to insert before, between, and after the columns. The\ntotal width of all columns and all gaps is specified using the\n`total_width_or_options` argument. This argument can simply be an\ninteger if you want to use default settings when wrapping, or it\ncan be a [`Options`] value if you want to customize the wrapping.\n\nIf the columns are narrow, it is recommended to set\n[`Options::break_words`] to `true` to prevent words from\nprotruding into the margins.\n\nThe per-column width is computed like this:\n\n```\n# let (left_gap, middle_gap, right_gap) = (\"\", \"\", \"\");\n# let columns = 2;\n# let options = textwrap::Options::new(80);\nlet inner_width = options.width\n    - textwrap::core::display_width(left_gap)\n    - textwrap::core::display_width(right_gap)\n    - textwrap::core::display_width(middle_gap) * (columns - 1);\nlet column_width = inner_width / columns;\n```\n\nThe `text` is wrapped using [`wrap`] and the given `options`\nargument, but the width is overwritten to the computed\n`column_width`.\n\n# Panics\n\nPanics if `columns` is zero.\n\n# Examples\n\n```\nuse textwrap::wrap_columns;\n\nlet text = \"\\\nThis is an example text, which is wrapped into three columns. \\\nNotice how the final column can be shorter than the others.\";\n\n#[cfg(feature = \"smawk\")]\nassert_eq!(wrap_columns(text, 3, 50, \"| \", \" | \", \" |\"),\n           vec![\"| This is       | into three    | column can be  |\",\n                \"| an example    | columns.      | shorter than   |\",\n                \"| text, which   | Notice how    | the others.    |\",\n                \"| is wrapped    | the final     |                |\"]);\n\n// Without the `smawk` feature, the middle column is a little more uneven:\n#[cfg(not(feature = \"smawk\"))]\nassert_eq!(wrap_columns(text, 3, 50, \"| \", \" | \", \" |\"),\n           vec![\"| This is an    | three         | column can be  |\",\n                \"| example text, | columns.      | shorter than   |\",\n                \"| which is      | Notice how    | the others.    |\",\n                \"| wrapped into  | the final     |                |\"]);","links":{"`Options::break_words`":"0:151:1804","`wrap`":"0:165:1970","`Options`":"0:294:1791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["columns",{"primitive":"usize"}],["total_width_or_options",{"generic":"Opt"}],["left_gap",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["middle_gap",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["right_gap",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6695:244","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Opt"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2741:3817-0:189:1784":{"id":"a:2:2741:3817-0:189:1784","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:3817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:222:613":{"id":"0:222:613","crate_id":0,"name":"eq","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,16],"end":[185,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OverflowError","id":"0:216:3071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12025:33237":{"id":"2:12025:33237","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12060:2170":{"id":"2:12060:2170","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11712:15831","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::split_whitespace":"2:12038:37393","str::rsplit":"2:12066:33272"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43357:8755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12066:33272":{"id":"2:12066:33272","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11712:15831","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::split":"2:12060:2170"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43375:8760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:15829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4:1778":{"id":"0:4:1778","crate_id":0,"name":"indentation","span":{"filename":"src/indentation.rs","begin":[1,0],"end":[347,1]},"visibility":"crate","docs":"Functions related to adding and removing indentation from lines of\ntext.\n\nThe functions here can be used to uniformly indent or dedent\n(unindent) word wrapped lines of text.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:5:1780","0:6:1779"],"is_stripped":false}}},"0:65:939":{"id":"0:65:939","crate_id":0,"name":"new","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[165,4],"end":[171,5]},"visibility":{"restricted":{"parent":"0:55:3069","path":"::wrap_algorithms::optimal_fit"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["size",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:668":{"id":"0:69:668","crate_id":0,"name":"fmt","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[189,4],"end":[191,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2542-0:294:1791":{"id":"b:2:2542-0:294:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:294:1791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[214,29],"end":[214,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:288:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12040:2017":{"id":"2:12040:2017","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43611:9035","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:33276":{"id":"2:12078:33276","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11888:419","str::splitn":"2:12075:33274","self::pattern":"2:11712:15831"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43479:8763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:15829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:316":{"id":"0:104:316","crate_id":0,"name":"as_str","span":{"filename":"src/line_ending.rs","begin":[21,4],"end":[26,5]},"visibility":"public","docs":"Turns this [`LineEnding`] value into its ASCII representation.","links":{"`LineEnding`":"0:242:1788"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:39820":{"id":"2:12105:39820","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77-0:71:3070":{"id":"0:77-0:71:3070","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[21,22],"end":[21,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"import":{"source":"optimal_fit::wrap_optimal_fit","name":"wrap_optimal_fit","id":"0:71:3070","glob":false}}},"b:5:684-0:226:1786":{"id":"b:5:684-0:226:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:226:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:686:2191","5:687:2192","5:688:4055"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:232:2855":{"id":"0:232:2855","crate_id":0,"name":"Custom","span":{"filename":"src/wrap_algorithms.rs","begin":[87,4],"end":[87,98]},"visibility":"default","docs":"Custom wrapping function.\n\nUse this if you want to implement your own wrapping algorithm.\nThe function can freely decide how to turn a slice of\n[`Word`]s into lines.\n\n# Example\n\n```\nuse textwrap::core::Word;\nuse textwrap::{wrap, Options, WrapAlgorithm};\n\nfn stair<'a, 'b>(words: &'b [Word<'a>], _: &'b [usize]) -> Vec<&'b [Word<'a>]> {\n    let mut lines = Vec::new();\n    let mut step = 1;\n    let mut start_idx = 0;\n    while start_idx + step <= words.len() {\n      lines.push(&words[start_idx .. start_idx+step]);\n      start_idx += step;\n      step += 1;\n    }\n    lines\n}\n\nlet options = Options::new(10).wrap_algorithm(WrapAlgorithm::Custom(stair));\nassert_eq!(wrap(\"First, second, third, fourth, fifth, sixth\", options),\n           vec![\"First,\",\n                \"second, third,\",\n                \"fourth, fifth, sixth\"]);\n```","links":{"`Word`":"0:270:2183"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:234:1606"]},"discriminant":null}}},"b:2:3319-0:258:2031":{"id":"b:2:3319-0:258:2031","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[214,22],"end":[214,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:270:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:283:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2701:228-0:178:1782":{"id":"a:2:2701:228-0:178:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:178:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:265":{"id":"0:265","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[34,16],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:267:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:274:2193":{"id":"0:274:2193","crate_id":0,"name":"penalty","span":{"filename":"src/core.rs","begin":[221,4],"end":[221,24]},"visibility":"public","docs":"Penalty string to insert if the word falls at the end of a line.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"2:12022:33240":{"id":"2:12022:33240","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:2246":{"id":"2:12023:2246","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2251-0:242:1788":{"id":"b:2:2251-0:242:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:242:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2253:3352"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12113:31287":{"id":"2:12113:31287","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:15831"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2556:128":{"id":"2:2556:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32020:9725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:147:1851":{"id":"0:147:1851","crate_id":0,"name":"with_termwidth","span":{"filename":"src/lib.rs","begin":[344,4],"end":[346,5]},"visibility":"public","docs":"Creates a new [`Options`] with `width` set to the current\nterminal width. If the terminal width cannot be determined\n(typically because the standard input and output is not\nconnected to a terminal), a width of 80 characters will be\nused. Other settings use the same defaults as\n[`Options::new`].\n\nEquivalent to:\n\n```no_run\nuse textwrap::{termwidth, Options};\n\nlet options = Options::new(termwidth());\n```\n\n**Note:** Only available when the `terminal_size` feature is\nenabled.","links":{"`Options::new`":"0:146:939","`Options`":"0:294:1791"},"attrs":["#[cfg(feature = \"terminal_size\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:33274":{"id":"2:12075:33274","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:15831","str::rsplitn":"2:12078:33276"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43461:8762","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105":{"id":"0:105","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[37,0],"end":[60,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_collect","take_while","intersperse","next_chunk","max","skip","gt","cmp_by","max_by","rev","__iterator_get_unchecked","fold","by_ref","collect_into","map_while","intersperse_with","size_hint","find","max_by_key","unzip","collect","reduce","sum","partition","partial_cmp_by","scan","ge","for_each","enumerate","advance_by","zip","flat_map","eq_by","cloned","lt","try_reduce","partition_in_place","flatten","filter_map","nth","cmp","eq","position","is_sorted","cycle","min","find_map","is_partitioned","fuse","count","peekable","step_by","copied","all","ne","is_sorted_by","filter","last","try_find","min_by","try_fold","array_chunks","inspect","partial_cmp","skip_while","take","chain","any","le","map","is_sorted_by_key","product","min_by_key","rposition","try_for_each"],"trait":{"name":"Iterator","id":"2:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NonEmptyLines","id":"0:258:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:107:2857","0:108:953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:151:1804":{"id":"0:151:1804","crate_id":0,"name":"break_words","span":{"filename":"src/lib.rs","begin":[454,4],"end":[459,5]},"visibility":"public","docs":"Change [`self.break_words`]. This controls if words longer\nthan `self.width` can be broken, or if they will be left\nsticking out into the right margin.\n\nSee [`Options::word_splitter`] instead if you want to control\nhyphenation.\n\n# Examples\n\n```\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(4).break_words(true);\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"This\",\n                \"is a\",\n                \"litt\",\n                \"le\",\n                \"exam\",\n                \"ple.\"]);\n```\n\n[`self.break_words`]: #structfield.break_words","links":{"`Options::word_splitter`":"0:154:1815"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["setting",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:1838":{"id":"0:192:1838","crate_id":0,"name":"HyphenSplitter","span":{"filename":"src/word_splitters.rs","begin":[68,4],"end":[68,18]},"visibility":"default","docs":"`HyphenSplitter` is the default `WordSplitter` used by\n[`Options::new`](super::Options::new). It will split words on\nexisting hyphens in the word.\n\nIt will only use hyphens that are surrounded by alphanumeric\ncharacters, which prevents a word like `\"--foo-bar\"` from\nbeing split into `\"--\"` and `\"foo-bar\"`.\n\n# Examples\n\n```\nuse textwrap::WordSplitter;\n\nassert_eq!(WordSplitter::HyphenSplitter.split_points(\"--foo-bar\"),\n           vec![6]);\n```","links":{"super::Options::new":"0:146:939"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12032:39812":{"id":"2:12032:39812","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11894:1397","crate::ops::IndexMut":"2:2985:4468","str::slice_unchecked":"2:12031:39811"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:613":{"id":"0:215:613","crate_id":0,"name":"eq","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,29],"end":[22,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Penalties","id":"0:202:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5383:40476":{"id":"5:5383:40476","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:2856","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:4533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:2856","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:4533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200":{"id":"0:200","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:189:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:201:423"],"negative":false,"synthetic":false,"blanket_impl":null}}}},"paths":{"17:10478:7297":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:44152:9061":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:554:4949":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:5468:4738":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:13651:7946":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"31:6067:5754":{"crate_id":31,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"1:8171:10525":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"34:8524:5806":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"24:804:42425":{"crate_id":24,"path":["fst","raw","counting_writer","CountingWriter"],"kind":"struct"},"22:614:41997":{"crate_id":22,"path":["serde","de","value","private","MapAsEnum"],"kind":"struct"},"16:6400:8249":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:8234:9321":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:3370:15862":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:22425:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"31:6304:6214":{"crate_id":31,"path":["linux_raw_sys","general","tcphdr"],"kind":"struct"},"31:7730:6541":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_recvmsg_out"],"kind":"struct"},"34:7603:5683":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:7571:10490":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:12902:7724":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"34:6145:5457":{"crate_id":34,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:2161:15931":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"31:5610:6092":{"crate_id":31,"path":["linux_raw_sys","general","ipv6_opt_hdr"],"kind":"struct"},"22:5734:42258":{"crate_id":22,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"1:3939:10535":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:3292:10513":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:7821:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:42476:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:2378:8038":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5963:8168":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:10626:7316":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"31:6012:4917":{"crate_id":31,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"34:8714:5857":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"31:4815:5949":{"crate_id":31,"path":["linux_raw_sys","general","vfs_ns_cap_data"],"kind":"struct"},"1:7471:9394":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"31:7505:27918":{"crate_id":31,"path":["linux_raw_sys","general","_bindgen_ty_11"],"kind":"enum"},"22:768:42416":{"crate_id":22,"path":["serde","de","impls","CharVisitor"],"kind":"struct"},"6:573:4959":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:10652:9849":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:1544:4738":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:5834:16223":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:42449:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"31:5956:6177":{"crate_id":31,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"5:5191:4713":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:1454:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"15:219:10122":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:11168:9390":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:10416:9206":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:9946:7226":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:45681:9085":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"30:499:26627":{"crate_id":30,"path":["rustix","backend","io","epoll","EventVec"],"kind":"struct"},"17:10712:22735":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"31:5088:5992":{"crate_id":31,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"2:20922:10490":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:13265:7826":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:6351:22560":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"34:5600:5332":{"crate_id":34,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:10052:7240":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8968:9364":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:13356:7848":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"0:161:2008":{"crate_id":0,"path":["textwrap","unfill"],"kind":"function"},"1:1844:9195":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:44131:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:7321:4701":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"31:7025:6384":{"crate_id":31,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"5:2116:9740":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:2346:10475":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4911:5451":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"22:7204:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"1:530:4792":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:2589:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:3881:10530":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:2348:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:13865:8001":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"22:1239:42419":{"crate_id":22,"path":["serde","de","impls","deserialize","ResultVisitor"],"kind":"struct"},"6:4941:5472":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:21559:10490":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:39955:8721":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"31:6004:6179":{"crate_id":31,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:43884:8779":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:3644:4010":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"18:521:26475":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:39961:8950":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"22:2810:9264":{"crate_id":22,"path":["serde","__private","ser","Unsupported"],"kind":"enum"},"24:1029:6866":{"crate_id":24,"path":["fst","raw","ops","Union"],"kind":"struct"},"1:10670:9383":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:43153:9013":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"33:0:4501":{"crate_id":33,"path":["io_lifetimes"],"kind":"module"},"24:1626:42563":{"crate_id":24,"path":["fst","raw","registry_minimal","RegistryEntry"],"kind":"enum"},"17:11011:7347":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"34:6291:5507":{"crate_id":34,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:888:8595":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13639:7943":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:8753:7042":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"22:2724:41827":{"crate_id":22,"path":["serde","__private","de","FlatMapAccess"],"kind":"struct"},"2:40255:4096":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:11493:9262":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:4602:15885":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:6607:4759":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:41631:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"33:137:29404":{"crate_id":33,"path":["io_lifetimes","raw","IntoRawFilelike"],"kind":"trait"},"22:532:26543":{"crate_id":22,"path":["serde","de","value","PairVisitor"],"kind":"struct"},"16:6876:8071":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:45437:9075":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"24:1492:6853":{"crate_id":24,"path":["fst","raw","node","Node"],"kind":"struct"},"34:6045:5430":{"crate_id":34,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:30360:37128":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:7411:8172":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:20879:15931":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:5334:9232":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"24:1711:6858":{"crate_id":24,"path":["fst","raw","Transition"],"kind":"struct"},"2:40487:4112":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4527:5259":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:10692:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:9803:10490":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:44283:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"11:638:3778":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"25:555:42663":{"crate_id":25,"path":["hyphenation_commons","dictionary","_","deserialize","__Visitor"],"kind":"struct"},"31:5593:5430":{"crate_id":31,"path":["linux_raw_sys","general","in6_ifreq"],"kind":"struct"},"24:272:26578":{"crate_id":24,"path":["fst","inner_map","StreamWithState"],"kind":"struct"},"1:9081:9366":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:41831:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:12799:7638":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:1078:10287":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:43921:9050":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"11:2212:9726":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"22:6245:42252":{"crate_id":22,"path":["serde","de","impls","deserialize","SeqVisitor"],"kind":"struct"},"17:11471:7393":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:43461:8762":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:1657:5067":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"22:6322:42251":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","SeqInPlaceVisitor"],"kind":"struct"},"16:3300:8087":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"0:243:2033":{"crate_id":0,"path":["textwrap","line_ending","LineEnding","CRLF"],"kind":"variant"},"16:7557:8436":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"21:0:3768":{"crate_id":21,"path":["bincode"],"kind":"module"},"34:9632:5926":{"crate_id":34,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:11109:7357":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"34:5509:5315":{"crate_id":34,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:8776:9349":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"9:388:21562":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:8072:8496":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"22:7906:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"17:12072:7504":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4499:5242":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"18:599:6974":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:11893:1367":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:585:10405":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:3163:39601":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"31:4980:27901":{"crate_id":31,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"2:21116:8787":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:41309:38040":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"31:5412:6054":{"crate_id":31,"path":["linux_raw_sys","general","ip_beet_phdr"],"kind":"struct"},"33:152:29407":{"crate_id":33,"path":["io_lifetimes","raw","FromRawSocketlike"],"kind":"trait"},"17:9822:7210":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"34:5133:5226":{"crate_id":34,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:8154:9035":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:4019:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:2985:4468":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"22:1963:42263":{"crate_id":22,"path":["serde","__private","de","borrow_cow_str","CowStrVisitor"],"kind":"struct"},"11:1688:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:9106:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"22:6257:42251":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","SeqInPlaceVisitor"],"kind":"struct"},"17:9228:40928":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:13453:7877":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13461:7878":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:5077:9476":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:10226:30968":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:9381:9272":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:11891:1049":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"11:305:9720":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"25:390:42663":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","_","deserialize","__Visitor"],"kind":"struct"},"17:12923:7731":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11091:9252":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"31:5569:9543":{"crate_id":31,"path":["linux_raw_sys","general","in6_flowlabel_req"],"kind":"struct"},"34:4937:5185":{"crate_id":34,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"31:7804:5759":{"crate_id":31,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"6:6587:5778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:1667:1087":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:9148:40926":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:13625:7937":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"0:5:1780":{"crate_id":0,"path":["textwrap","indentation","indent"],"kind":"function"},"5:1042:10286":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"22:1945:42423":{"crate_id":22,"path":["serde","__private","de","missing_field","MissingFieldDeserializer"],"kind":"struct"},"6:6755:5857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:21107:10490":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"30:4525:42702":{"crate_id":30,"path":["rustix","process","prctl","TimingMethod"],"kind":"enum"},"16:6474:8081":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:4872:8111":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:39998:8954":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:5829:5602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:414:8615":{"crate_id":24,"path":["fst","inner_map","SymmetricDifference"],"kind":"struct"},"1:10942:4825":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:2796:4452":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"34:7773:5706":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:6814:5892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:40389:4105":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:42174:3815":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"24:304:26576":{"crate_id":24,"path":["fst","inner_map","StreamBuilder"],"kind":"struct"},"31:5397:6050":{"crate_id":31,"path":["linux_raw_sys","general","ip_esp_hdr"],"kind":"struct"},"1:1924:4241":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"31:6945:6369":{"crate_id":31,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"6:5935:5666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4732:5357":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"34:1687:4976":{"crate_id":34,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"30:5038:6695":{"crate_id":30,"path":["rustix","process","rlimit","Rlimit"],"kind":"struct"},"17:12388:7567":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:2879:8059":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:1071:8605":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10823:7130":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:5065:9471":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"34:5115:5223":{"crate_id":34,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:7089:4010":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"22:1331:26501":{"crate_id":22,"path":["serde","de","Deserializer"],"kind":"trait"},"22:8093:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"34:7311:5589":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:5642:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:5643:8132":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"34:7181:5561":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"34:8553:5808":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8103:10489":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"22:7620:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"16:5976:8020":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:40670:4069":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:4990:9228":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:633:8683":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:7318:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:6367:4010":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:7488:8433":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"31:6182:6202":{"crate_id":31,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"5:6990:4533":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"22:1297:26529":{"crate_id":22,"path":["serde","de","Expected"],"kind":"trait"},"22:871:42415":{"crate_id":22,"path":["serde","de","impls","OptionVisitor"],"kind":"struct"},"6:1709:5099":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"31:5328:4989":{"crate_id":31,"path":["linux_raw_sys","general","sockaddr_in"],"kind":"struct"},"17:11410:7383":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:11391:7382":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"22:6185:42252":{"crate_id":22,"path":["serde","de","impls","deserialize","SeqVisitor"],"kind":"struct"},"2:20982:10490":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"34:5324:5269":{"crate_id":34,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"11:867:8602":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:7015:10293":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:11282:7375":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12046:7501":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:8319:10593":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"31:4807:5948":{"crate_id":31,"path":["linux_raw_sys","general","vfs_cap_data__bindgen_ty_1"],"kind":"struct"},"5:4005:4713":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"30:3916:6653":{"crate_id":30,"path":["rustix","process","id","Uid"],"kind":"struct"},"5:1443:8593":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"34:5053:5211":{"crate_id":34,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:7862:8687":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"30:2596:6560":{"crate_id":30,"path":["rustix","backend","io","poll_fd","PollFlags"],"kind":"struct"},"1:11688:4833":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"26:188:4147":{"crate_id":26,"path":["unicode_linebreak","BreakOpportunity"],"kind":"enum"},"2:7198:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4707:5344":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:2077:4728":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:5719:9243":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13385:7856":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:3129:39600":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:4914:4738":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:930:8596":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"11:1839:3778":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:41711:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11641:7429":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"24:1374:6862":{"crate_id":24,"path":["fst","inner_automaton","Subsequence"],"kind":"struct"},"22:1867:26548":{"crate_id":22,"path":["serde","ser","SerializeTupleStruct"],"kind":"trait"},"17:8360:22618":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:12980:7765":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10735:7330":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:5926:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:39161:4469":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:10270:7279":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"22:7526:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"22:5848:42254":{"crate_id":22,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"16:5305:8119":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:5798:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"22:4524:6930":{"crate_id":22,"path":["serde","de","value","I128Deserializer"],"kind":"struct"},"21:1257:9658":{"crate_id":21,"path":["bincode","config","WithOtherLimit"],"kind":"struct"},"17:247:7048":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:41203:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"24:1578:6885":{"crate_id":24,"path":["fst","raw","ops","Slot"],"kind":"struct"},"6:5974:5684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"31:7406:27917":{"crate_id":31,"path":["linux_raw_sys","general","_bindgen_ty_10"],"kind":"enum"},"11:2192:9722":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4773:5379":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"31:5655:9563":{"crate_id":31,"path":["linux_raw_sys","general","ipv6hdr__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:22524:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:9157:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:43525:9032":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"31:6252:5536":{"crate_id":31,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"11:1126:8608":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:21114:10676":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:4251:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:6133:9245":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:13721:7971":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:44088:9835":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:11027:31446":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:7164:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:21004:8787":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:5067:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:11220:7372":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"7:79:21554":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"25:233:6750":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","Subregion"],"kind":"struct"},"34:6205:5475":{"crate_id":34,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:9478:7178":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"22:5640:42254":{"crate_id":22,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"1:6009:4805":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"21:595:41336":{"crate_id":21,"path":["bincode","de","deserialize_map","Access"],"kind":"struct"},"22:8326:42170":{"crate_id":22,"path":["serde","de","impls","deserialize","IpAddrKind"],"kind":"enum"},"22:835:42270":{"crate_id":22,"path":["serde","de","impls","BytesVisitor"],"kind":"struct"},"2:47732:9167":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:8387:9002":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:12483:7591":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12358:7562":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4821:5404":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:13292:7830":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:587:4967":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"31:5587:9552":{"crate_id":31,"path":["linux_raw_sys","general","ip6_mtuinfo"],"kind":"struct"},"1:8806:9237":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:45644:9083":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:10840:7338":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"22:202:6908":{"crate_id":22,"path":["serde","de","value","StrDeserializer"],"kind":"struct"},"2:47862:9173":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"34:5642:5344":{"crate_id":34,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:1539:4986":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:1908:17621":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10923:7342":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:2911:3799":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:39379:8825":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"31:4951:5960":{"crate_id":31,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"2:43173:9015":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:47648:9160":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"34:1881:5019":{"crate_id":34,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"31:7373:6463":{"crate_id":31,"path":["linux_raw_sys","general","io_cqring_offsets"],"kind":"struct"},"2:11265:8768":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:7005:8702":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:2215:10472":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4932:5466":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"34:7740:9480":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"0:173:2232":{"crate_id":0,"path":["textwrap","wrap_columns"],"kind":"function"},"17:9653:7197":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"34:5782:5376":{"crate_id":34,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12536:7595":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"11:2076:8603":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:4553:5271":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"25:477:9648":{"crate_id":25,"path":["hyphenation_commons","dictionary","trie","PrefixMatches"],"kind":"struct"},"2:43792:9047":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4999:5502":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"22:7552:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"22:1309:26521":{"crate_id":22,"path":["serde","de","Deserialize"],"kind":"trait"},"30:414:9912":{"crate_id":30,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"31:6143:9582":{"crate_id":31,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"5:4818:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:43315:9026":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:43184:9016":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"24:350:26580":{"crate_id":24,"path":["fst","inner_map","OpBuilder"],"kind":"struct"},"17:13135:7796":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:5179:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:9145:112":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:5967:5683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10092:7244":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:42160:3805":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:6545:5754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:21916:37122":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:474:4901":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:653:6179":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"11:60:10280":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:4414:10557":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:42393:9823":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:6890:8072":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"30:3590:21598":{"crate_id":30,"path":["rustix","backend","termios","types","Action"],"kind":"enum"},"0:192:1838":{"crate_id":0,"path":["textwrap","word_splitters","WordSplitter","HyphenSplitter"],"kind":"variant"},"27:15:4249":{"crate_id":27,"path":["smawk","Matrix"],"kind":"trait"},"25:266:42582":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","_","deserialize","__Field"],"kind":"enum"},"1:635:9184":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:9961:3778":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"22:2768:41826":{"crate_id":22,"path":["serde","__private","de","FlatInternallyTaggedAccess"],"kind":"struct"},"31:5275:4984":{"crate_id":31,"path":["linux_raw_sys","general","ip_mreq_source"],"kind":"struct"},"25:293:42663":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","_","deserialize","__Visitor"],"kind":"struct"},"6:1650:5063":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:43375:8760":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6047:5717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:1475:6874":{"crate_id":24,"path":["fst","raw","build","LastTransition"],"kind":"struct"},"26:78:4161":{"crate_id":26,"path":["unicode_linebreak","BreakClass"],"kind":"enum"},"24:1557:6884":{"crate_id":24,"path":["fst","raw","ops","IndexedValue"],"kind":"struct"},"17:11163:7361":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:13344:7847":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"30:3617:42712":{"crate_id":30,"path":["rustix","backend","time","types","ClockId"],"kind":"enum"},"17:13194:7808":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"21:1153:9653":{"crate_id":21,"path":["bincode","config","int","VarintEncoding"],"kind":"struct"},"5:2916:39407":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13181:7802":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"31:6173:6198":{"crate_id":31,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"31:6421:27908":{"crate_id":31,"path":["linux_raw_sys","general","tcp_fastopen_client_fail"],"kind":"enum"},"2:30836:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:41445:2857":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:541:4943":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:21083:10490":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12178:7517":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:4399:4740":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:880:3778":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"22:0:3769":{"crate_id":22,"path":["serde"],"kind":"module"},"2:20594:39252":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"21:1293:9667":{"crate_id":21,"path":["bincode","config","WithOtherTrailing"],"kind":"struct"},"17:242:7047":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:21827:8795":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:3547:8610":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:1091:8607":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:13411:7866":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:11924:7486":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:32020:9725":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:6819:8316":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:7616:4823":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:45521:9078":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"21:281:6972":{"crate_id":21,"path":["bincode","config","limit","SizeLimit"],"kind":"trait"},"1:11870:31448":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:9218:7163":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:783:4715":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:11234:7373":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"30:3414:42701":{"crate_id":30,"path":["rustix","backend","process","types","Signal"],"kind":"enum"},"25:468:6758":{"crate_id":25,"path":["hyphenation_commons","dictionary","trie","Trie"],"kind":"struct"},"17:9512:7184":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:1071:40911":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:11628:7428":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:1715:5102":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:515:6991":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"31:4873:5102":{"crate_id":31,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"17:10303:7282":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"29:35:4502":{"crate_id":29,"path":["terminal_size","Height"],"kind":"struct"},"22:819:42411":{"crate_id":22,"path":["serde","de","impls","StrVisitor"],"kind":"struct"},"17:10316:7283":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"34:770:4972":{"crate_id":34,"path":["libc","unix","protoent"],"kind":"struct"},"16:4969:8114":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:6605:5787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12307:7557":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"24:1275:8665":{"crate_id":24,"path":["fst","raw","Stream"],"kind":"struct"},"16:6558:8264":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:6321:8241":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:8215:9842":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:4813:5400":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:7670:9268":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"22:8133:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"11:1847:4733":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13777:7979":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:5502:10614":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:5995:5697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"22:850:42269":{"crate_id":22,"path":["serde","de","impls","CStringVisitor"],"kind":"struct"},"1:844:3778":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"22:3578:6919":{"crate_id":22,"path":["serde","de","value","I16Deserializer"],"kind":"struct"},"22:6215:42252":{"crate_id":22,"path":["serde","de","impls","deserialize","SeqVisitor"],"kind":"struct"},"25:128:26587":{"crate_id":25,"path":["hyphenation_commons","parse","Parse"],"kind":"trait"},"6:4851:5416":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"31:5539:5933":{"crate_id":31,"path":["linux_raw_sys","general","in6_addr"],"kind":"struct"},"1:4125:10292":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:11279:2293":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:11015:9348":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:7042:8348":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7293:8382":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:8025:8493":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:9188:40924":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"34:8600:5815":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:3615:10527":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:8129:8502":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"11:991:8351":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"31:6243:5561":{"crate_id":31,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"1:8242:9328":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:5586:4090":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:39192:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:8260:6703":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11258:7374":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:4510:8100":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"22:3836:6922":{"crate_id":22,"path":["serde","de","value","IsizeDeserializer"],"kind":"struct"},"2:4183:3782":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"30:3933:6654":{"crate_id":30,"path":["rustix","process","id","Gid"],"kind":"struct"},"2:39216:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"22:3026:42019":{"crate_id":22,"path":["serde","__private","ser","content","ContentSerializer"],"kind":"struct"},"1:10931:2961":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:4845:8110":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:554:9183":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:7632:37988":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"24:1451:6869":{"crate_id":24,"path":["fst","raw","build","UnfinishedNodes"],"kind":"struct"},"31:7617:9642":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_restriction__bindgen_ty_1"],"kind":"union"},"2:32147:3976":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"22:1855:26546":{"crate_id":22,"path":["serde","ser","SerializeSeq"],"kind":"trait"},"16:2357:8037":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:7578:5933":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13082:7784":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"22:8336:42259":{"crate_id":22,"path":["serde","de","impls","deserialize","deserialize","KindVisitor"],"kind":"struct"},"1:7798:9274":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"22:6065:42254":{"crate_id":22,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"17:13488:7885":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:4596:8103":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:8075:4068":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"34:1703:4978":{"crate_id":34,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"34:0:816":{"crate_id":34,"path":["libc"],"kind":"module"},"6:5747:5561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"21:1207:41066":{"crate_id":21,"path":["bincode","config","legacy","LimitOption"],"kind":"enum"},"2:8356:8748":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:42683:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"21:453:26509":{"crate_id":21,"path":["bincode","de","read","IoReader"],"kind":"struct"},"6:6724:5831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:13324:7840":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:547:4946":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12622:7320":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"0:155:1852":{"crate_id":0,"path":["textwrap","termwidth"],"kind":"function"},"1:917:8611":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12433:7574":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:6296:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:4653:5316":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:11468:9855":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:494:4912":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:8134:4110":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"34:608:4937":{"crate_id":34,"path":["libc","unix","hostent"],"kind":"struct"},"14:165:21645":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"22:7942:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"22:3096:26548":{"crate_id":22,"path":["serde","__private","ser","content","SerializeTupleStruct"],"kind":"struct"},"11:1859:6867":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:11913:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"18:491:6993":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:2540:4796":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:1783:9192":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:2786:8055":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4784:5387":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:947:8599":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3129:30453":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"21:1269:9663":{"crate_id":21,"path":["bincode","config","WithOtherEndian"],"kind":"struct"},"22:2357:6915":{"crate_id":22,"path":["serde","__private","de","content","SeqDeserializer"],"kind":"struct"},"2:39552:33134":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:4307:5131":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:11449:9391":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:9853:7213":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:9380:22637":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"34:7289:5581":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"34:473:4901":{"crate_id":34,"path":["libc","unix","group"],"kind":"struct"},"22:6125:42254":{"crate_id":22,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"2:3163:4474":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:20909:10682":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:5779:8140":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:12357:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"31:6394:27907":{"crate_id":31,"path":["linux_raw_sys","general","_bindgen_ty_5"],"kind":"enum"},"5:7181:8705":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"0:26:2884":{"crate_id":0,"path":["textwrap","word_separators","SHY"],"kind":"constant"},"9:0:3636":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:1555:4994":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"9:174:10135":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"34:805:16298":{"crate_id":34,"path":["libc","unix","FILE"],"kind":"enum"},"17:8256:22603":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:11737:15828":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:21879:37112":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:1366:8610":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"0:189:1784":{"crate_id":0,"path":["textwrap","word_splitters","WordSplitter"],"kind":"enum"},"31:5348:9529":{"crate_id":31,"path":["linux_raw_sys","general","iphdr"],"kind":"struct"},"34:4993:5195":{"crate_id":34,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:420:7053":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3677:9216":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:9410:8753":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11532:7399":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"24:1427:6868":{"crate_id":24,"path":["fst","inner_automaton","Complement"],"kind":"struct"},"2:46606:9118":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:43778:9045":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"22:1986:42265":{"crate_id":22,"path":["serde","__private","de","borrow_cow_bytes","CowBytesVisitor"],"kind":"struct"},"22:154:6906":{"crate_id":22,"path":["serde","de","value","UnitDeserializer"],"kind":"struct"},"6:6776:5872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:1532:4984":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:1213:8605":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:6008:5701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:46682:9120":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"34:5444:5298":{"crate_id":34,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"21:1117:7150":{"crate_id":21,"path":["bincode","config","endian","LittleEndian"],"kind":"struct"},"11:703:8593":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:4818:8109":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4037:8095":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13121:7793":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"34:8489:5805":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"34:7404:5614":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:11732:15829":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"0:111:3502":{"crate_id":0,"path":["textwrap","core","CSI"],"kind":"constant"},"1:3983:10537":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"22:1227:42256":{"crate_id":22,"path":["serde","de","impls","deserialize","deserialize","FieldVisitor"],"kind":"struct"},"2:41226:8740":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:45699:9086":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"31:7091:6388":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_5__bindgen_ty_1"],"kind":"struct"},"1:4096:10290":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"31:6908:9600":{"crate_id":31,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"34:5799:5379":{"crate_id":34,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"34:5913:5404":{"crate_id":34,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:3931:4738":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:4546:5269":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:5655:8066":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:3872:8093":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"31:6211:9591":{"crate_id":31,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:5528:4101":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:20869:10675":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:7259:4520":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"31:6126:6187":{"crate_id":31,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"14:221:8590":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"34:4919:5183":{"crate_id":34,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:42713:9007":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"21:1241:9655":{"crate_id":21,"path":["bincode","config","trailing","AllowTrailing"],"kind":"struct"},"2:4255:3783":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:10722:31453":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"31:5932:6174":{"crate_id":31,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"22:1897:26552":{"crate_id":22,"path":["serde","ser","SerializeStructVariant"],"kind":"trait"},"2:20577:39249":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"21:1230:9654":{"crate_id":21,"path":["bincode","config","limit","Bounded"],"kind":"struct"},"34:6238:5478":{"crate_id":34,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:47324:9154":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:11912:1126":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:9028:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13399:7863":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:5320:6609":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13698:7958":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:22392:8814":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"0:71:3070":{"crate_id":0,"path":["textwrap","wrap_algorithms","optimal_fit","wrap_optimal_fit"],"kind":"function"},"0:190:2420":{"crate_id":0,"path":["textwrap","word_splitters","WordSplitter","NoHyphenation"],"kind":"variant"},"6:7258:5910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:40347:4103":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"34:8325:5754":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:1821:3801":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"34:5621:5339":{"crate_id":34,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"22:5588:42254":{"crate_id":22,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"16:6293:8239":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:8953:7152":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:3060:9203":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:13443:7874":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:3079:4471":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:1583:8614":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"22:3319:41893":{"crate_id":22,"path":["serde","seed","InPlaceSeed"],"kind":"struct"},"34:2046:5086":{"crate_id":34,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:676:10409":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:40424:4108":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"31:7049:9613":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_2"],"kind":"union"},"31:7333:6452":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_cqe"],"kind":"struct"},"1:11895:1481":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"0:162:2061":{"crate_id":0,"path":["textwrap","refill"],"kind":"function"},"11:859:8601":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:9038:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"34:5203:5239":{"crate_id":34,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:39075:4479":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"31:4905:5958":{"crate_id":31,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"0:202:3072":{"crate_id":0,"path":["textwrap","wrap_algorithms","optimal_fit","Penalties"],"kind":"struct"},"1:4854:10583":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:9628:7194":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:2808:8056":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:680:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"31:5980:4909":{"crate_id":31,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"2:22458:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:41289:9822":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:12085:7506":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"22:1873:26549":{"crate_id":22,"path":["serde","ser","SerializeTupleVariant"],"kind":"trait"},"22:7997:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"18:538:7001":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:11879:7476":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:6767:8314":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:5032:8116":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:4521:5256":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:43084:9009":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"34:7894:5736":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"22:5682:42258":{"crate_id":22,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"5:4167:4738":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"22:2028:42255":{"crate_id":22,"path":["serde","__private","de","content","ContentVisitor"],"kind":"struct"},"5:3775:4713":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:5944:8161":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:4688:5332":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:40050:8958":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:5563:4802":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"34:8582:5813":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12461:7580":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"18:590:7004":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"34:7460:5627":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:4288:5477":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:821:8596":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:10286:8765":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:5380:4738":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"22:5942:42258":{"crate_id":22,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"17:10936:7344":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"24:643:6866":{"crate_id":24,"path":["fst","inner_set","Union"],"kind":"struct"},"31:7340:27916":{"crate_id":31,"path":["linux_raw_sys","general","_bindgen_ty_9"],"kind":"enum"},"22:4094:6925":{"crate_id":22,"path":["serde","de","value","U64Deserializer"],"kind":"struct"},"17:8683:7040":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:2337:8031":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:46189:9101":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"21:1122:7151":{"crate_id":21,"path":["bincode","config","endian","BigEndian"],"kind":"struct"},"34:4815:5139":{"crate_id":34,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:2929:3820":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:2800:4454":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:41530:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"25:590:42582":{"crate_id":25,"path":["hyphenation_commons","dictionary","_","deserialize","__Field"],"kind":"enum"},"17:9265:7164":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"18:727:7034":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:2922:3818":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"22:2905:42103":{"crate_id":22,"path":["serde","__private","ser","content","SerializeStructVariantAsMapValue"],"kind":"struct"},"2:2696:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:4952:5478":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:47747:9168":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"25:449:42663":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","_","deserialize","__Visitor"],"kind":"struct"},"14:202:15844":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:9374:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:6151:5747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:7572:40916":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"18:636:7014":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"22:1139:15918":{"crate_id":22,"path":["serde","de","impls","range","Field"],"kind":"enum"},"2:12597:10426":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:42913:9831":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:12835:7669":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11832:7471":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:8573:22625":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"31:4780:5941":{"crate_id":31,"path":["linux_raw_sys","general","__user_cap_header_struct"],"kind":"struct"},"17:13842:7997":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:11372:9217":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"14:160:8583":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:2926:3819":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:1622:5038":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"24:252:8665":{"crate_id":24,"path":["fst","inner_map","Stream"],"kind":"struct"},"17:12592:7602":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:5816:5593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:501:4728":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:42898:9008":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"31:5554:4994":{"crate_id":31,"path":["linux_raw_sys","general","sockaddr_in6"],"kind":"struct"},"22:8498:128":{"crate_id":22,"path":["serde","de","Error"],"kind":"trait"},"24:0:3771":{"crate_id":24,"path":["fst"],"kind":"module"},"18:699:7025":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:2509:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"31:7358:6457":{"crate_id":31,"path":["linux_raw_sys","general","io_sqring_offsets"],"kind":"struct"},"34:699:4957":{"crate_id":34,"path":["libc","unix","sigval"],"kind":"struct"},"22:5786:42258":{"crate_id":22,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"2:39372:3790":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"22:597:41995":{"crate_id":22,"path":["serde","de","value","private","UnitOnly"],"kind":"struct"},"34:6063:1001":{"crate_id":34,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:10835:9236":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:0:3643":{"crate_id":17,"path":["object"],"kind":"module"},"5:211:4711":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4392:5190":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"34:2161:5116":{"crate_id":34,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"34:6275:5502":{"crate_id":34,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"31:5544:9538":{"crate_id":31,"path":["linux_raw_sys","general","in6_addr__bindgen_ty_1"],"kind":"union"},"14:215:8588":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:12382:8783":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"30:3036:6566":{"crate_id":30,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"22:3151:26552":{"crate_id":22,"path":["serde","__private","ser","content","SerializeStructVariant"],"kind":"struct"},"10:0:3637":{"crate_id":10,"path":["adler"],"kind":"module"},"16:7669:8079":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:1228:8603":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:3440:3811":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"31:6933:9609":{"crate_id":31,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"21:1127:9651":{"crate_id":21,"path":["bincode","config","endian","NativeEndian"],"kind":"struct"},"1:1785:9193":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:3158:6867":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"22:782:42413":{"crate_id":22,"path":["serde","de","impls","StringVisitor"],"kind":"struct"},"1:7846:9277":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:44100:9838":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:22293:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:6369:4070":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"21:1325:7150":{"crate_id":21,"path":["bincode","byteorder","LittleEndian"],"kind":"struct"},"2:9161:3813":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:8718:7041":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:5847:8152":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:6671:8289":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:10050:9370":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"22:3664:6920":{"crate_id":22,"path":["serde","de","value","I32Deserializer"],"kind":"struct"},"6:6848:5903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:40102:8964":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"21:1330:7151":{"crate_id":21,"path":["bincode","byteorder","BigEndian"],"kind":"struct"},"2:21431:8785":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"31:4853:5777":{"crate_id":31,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"1:10209:9235":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"22:2616:42420":{"crate_id":22,"path":["serde","__private","de","content","UntaggedUnitVisitor"],"kind":"struct"},"17:11615:7424":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"15:180:10272":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:43969:9059":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:6248:4733":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:5630:8127":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"34:8412:5778":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4383:5185":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:4568:8102":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"31:7312:27915":{"crate_id":31,"path":["linux_raw_sys","general","_bindgen_ty_8"],"kind":"enum"},"2:4110:3802":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:40726:4079":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"22:3406:6917":{"crate_id":22,"path":["serde","de","value","BoolDeserializer"],"kind":"struct"},"16:2764:8054":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"9:445:21561":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:6578:4748":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"22:8236:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"1:11892:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:6904:8324":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"30:4686:42705":{"crate_id":30,"path":["rustix","process","prctl","FloatingPointMode"],"kind":"enum"},"16:535:8018":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:10165:8760":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:355:9180":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:3995:10540":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:5235:15816":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:1931:653":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:9866:7214":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:1637:4400":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:47464:9156":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:755:7039":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:10010:8755":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:3382:8720":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:5071:8117":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:10628:9378":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"18:644:6994":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"31:5019:5969":{"crate_id":31,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"31:7588:6515":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_probe_op"],"kind":"struct"},"2:12330:36850":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"34:9524:5922":{"crate_id":34,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"22:915:42414":{"crate_id":22,"path":["serde","de","impls","deserialize","VecVisitor"],"kind":"struct"},"6:1576:5009":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:2931:21699":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:863:4720":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:4681:5328":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"30:4543:42703":{"crate_id":30,"path":["rustix","process","prctl","EndianMode"],"kind":"enum"},"17:10402:7288":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:9772:7208":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:3401:9214":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:936:10422":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"11:1035:8605":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"22:5139:6915":{"crate_id":22,"path":["serde","de","value","SeqDeserializer"],"kind":"struct"},"22:3750:6921":{"crate_id":22,"path":["serde","de","value","I64Deserializer"],"kind":"struct"},"31:7577:6512":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_notification_register"],"kind":"struct"},"0:178:1782":{"crate_id":0,"path":["textwrap","word_separators","WordSeparator"],"kind":"enum"},"2:4406:3793":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:10822:9271":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"24:1596:6891":{"crate_id":24,"path":["fst","raw","registry","RegistryCache"],"kind":"struct"},"21:450:26510":{"crate_id":21,"path":["bincode","de","read","SliceReader"],"kind":"struct"},"22:365:6914":{"crate_id":22,"path":["serde","de","value","BorrowedBytesDeserializer"],"kind":"struct"},"16:4400:8097":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:1736:5110":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"34:7329:5593":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:8251:8747":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:1048:8351":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"34:4763:17621":{"crate_id":34,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:49668:10686":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"14:40:7375":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"22:1451:26533":{"crate_id":22,"path":["serde","de","SeqAccess"],"kind":"trait"},"2:41454:3778":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:875:8594":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"34:2130:5103":{"crate_id":34,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:21900:37117":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"21:1148:9652":{"crate_id":21,"path":["bincode","config","int","FixintEncoding"],"kind":"struct"},"2:46292:9103":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:361:9181":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:482:4906":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:8420:22620":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:12512:4789":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:7838:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:22326:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:2905:2191":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:9453:22639":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:2869:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"11:744:8595":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"22:2690:42422":{"crate_id":22,"path":["serde","__private","de","FlatMapDeserializer"],"kind":"struct"},"16:3446:8088":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:3208:9208":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12496:7592":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"9:234:9002":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"22:750:42405":{"crate_id":22,"path":["serde","de","impls","BoolVisitor"],"kind":"struct"},"22:2198:41897":{"crate_id":22,"path":["serde","__private","de","content","TagOrContentFieldVisitor"],"kind":"struct"},"34:9678:5491":{"crate_id":34,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"18:614:40931":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:4:1014":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12646:7616":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:43763:9040":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:7837:8457":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:719:7031":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:2812:4456":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:4377:5183":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"0:160:1965":{"crate_id":0,"path":["textwrap","fill_slow_path"],"kind":"function"},"17:8632:22604":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"25:741:2295":{"crate_id":25,"path":["hyphenation_commons","language","Language"],"kind":"enum"},"1:4845:10582":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:22491:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:9184:9195":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"31:6227:9594":{"crate_id":31,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"31:7668:27919":{"crate_id":31,"path":["linux_raw_sys","general","_bindgen_ty_12"],"kind":"enum"},"22:1094:42256":{"crate_id":22,"path":["serde","de","impls","deserialize","deserialize","FieldVisitor"],"kind":"struct"},"25:326:42582":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","_","deserialize","__Field"],"kind":"enum"},"31:6734:4949":{"crate_id":31,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"31:5029:5419":{"crate_id":31,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"6:4641:5315":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:43579:9034":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:30272:4405":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"22:3085:26547":{"crate_id":22,"path":["serde","__private","ser","content","SerializeTuple"],"kind":"struct"},"31:6655:6338":{"crate_id":31,"path":["linux_raw_sys","general","tcp_diag_md5sig"],"kind":"struct"},"16:7077:22564":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:2572:8046":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:9370:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"22:7465:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"17:13857:7998":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:4176:9220":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:10283:7281":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"22:1107:42417":{"crate_id":22,"path":["serde","de","impls","deserialize","DurationVisitor"],"kind":"struct"},"6:5032:5516":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:7697:8818":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:7467:8430":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:2522:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:926:8593":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:5354:9233":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:42421:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:8485:9344":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:8156:8082":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"18:707:7027":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"31:6544:27910":{"crate_id":31,"path":["linux_raw_sys","general","_bindgen_ty_6"],"kind":"enum"},"17:1919:22666":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"30:3542:26632":{"crate_id":30,"path":["rustix","backend","termios","types","OptionalActions"],"kind":"enum"},"1:3210:9209":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:43857:9049":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:4398:5192":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:43255:9021":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"34:526:4912":{"crate_id":34,"path":["libc","unix","timespec"],"kind":"struct"},"2:9155:3815":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:10000:7230":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13053:7776":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"31:7624:6519":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_buf"],"kind":"struct"},"31:6980:6378":{"crate_id":31,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"17:9566:7164":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:1821:9194":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"7:0:1543":{"crate_id":7,"path":["unwind"],"kind":"module"},"24:1245:26577":{"crate_id":24,"path":["fst","raw","StreamWithStateBuilder"],"kind":"struct"},"24:1533:6881":{"crate_id":24,"path":["fst","raw","node","StateOneTrans"],"kind":"struct"},"2:4322:3789":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"34:8839:5895":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:8220:10556":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12770:7618":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"30:0:4498":{"crate_id":30,"path":["rustix"],"kind":"module"},"33:132:29403":{"crate_id":33,"path":["io_lifetimes","raw","AsRawSocketlike"],"kind":"trait"},"31:5102:5999":{"crate_id":31,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"2:2768:4447":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"31:4826:5951":{"crate_id":31,"path":["linux_raw_sys","general","vfs_ns_cap_data__bindgen_ty_1"],"kind":"struct"},"34:5582:5328":{"crate_id":34,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"24:653:6867":{"crate_id":24,"path":["fst","inner_set","Intersection"],"kind":"struct"},"6:5947:5671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"21:936:40991":{"crate_id":21,"path":["bincode","ser","Compound"],"kind":"struct"},"2:2784:3766":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:8250:10597":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"31:7864:6548":{"crate_id":31,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"1:11911:1553":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:46111:9099":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"34:5186:5236":{"crate_id":34,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6506:8260":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:13499:7886":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11544:7400":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6717:8301":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"22:8413:42259":{"crate_id":22,"path":["serde","de","impls","deserialize","KindVisitor"],"kind":"struct"},"16:2448:8041":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"24:1541:6882":{"crate_id":24,"path":["fst","raw","node","StateAnyTrans"],"kind":"struct"},"22:1805:26502":{"crate_id":22,"path":["serde","ser","Serializer"],"kind":"trait"},"22:5474:42258":{"crate_id":22,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"22:7693:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"16:6990:8341":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:11090:7354":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:1062:8603":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:9120:32474":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:21945:9755":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"22:3922:6923":{"crate_id":22,"path":["serde","de","value","U8Deserializer"],"kind":"struct"},"1:10682:9274":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:41751:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:3124:8614":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:4112:10555":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"31:7904:5328":{"crate_id":31,"path":["linux_raw_sys","general","ucred"],"kind":"struct"},"21:1246:9656":{"crate_id":21,"path":["bincode","config","trailing","RejectTrailing"],"kind":"struct"},"22:5390:6933":{"crate_id":22,"path":["serde","de","value","MapAccessDeserializer"],"kind":"struct"},"2:43656:8958":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"25:220:42663":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","_","deserialize","__Visitor"],"kind":"struct"},"22:2560:41861":{"crate_id":22,"path":["serde","__private","de","content","MapRefDeserializer"],"kind":"struct"},"22:7378:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"34:2145:5110":{"crate_id":34,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:2774:4450":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:12318:7558":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"34:9731:5931":{"crate_id":34,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"22:2219:41992":{"crate_id":22,"path":["serde","__private","de","content","TagContentOtherFieldVisitor"],"kind":"struct"},"31:6286:5722":{"crate_id":31,"path":["linux_raw_sys","general","sysinfo"],"kind":"struct"},"2:45968:9094":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:8249:10598":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"22:2803:42013":{"crate_id":22,"path":["serde","__private","ser","TaggedSerializer"],"kind":"struct"},"16:3063:7075":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"30:3950:6655":{"crate_id":30,"path":["rustix","process","id","Pid"],"kind":"struct"},"31:4957:9505":{"crate_id":31,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"17:11861:7475":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"31:7607:9640":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_restriction"],"kind":"struct"},"24:396:6867":{"crate_id":24,"path":["fst","inner_map","Intersection"],"kind":"struct"},"34:5486:5306":{"crate_id":34,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8124:4096":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:12006:7495":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"22:2379:6916":{"crate_id":22,"path":["serde","__private","de","content","MapDeserializer"],"kind":"struct"},"19:0:1031":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6460:8064":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:9362:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11484:7394":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:44092:9836":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:8090:8498":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:3157:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13066:7781":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"24:683:42511":{"crate_id":24,"path":["fst","inner_set","StreamZeroOutput"],"kind":"struct"},"17:9275:40920":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:1351:3778":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"34:9672:5490":{"crate_id":34,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:2758:4451":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"31:5295:9516":{"crate_id":31,"path":["linux_raw_sys","general","group_req"],"kind":"struct"},"2:39280:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:7932:9279":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:10681:7323":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:40408:4107":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13879:8004":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"22:984:42262":{"crate_id":22,"path":["serde","de","impls","PathVisitor"],"kind":"struct"},"11:1144:8609":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"22:8194:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"1:11904:740":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"0:197:2429":{"crate_id":0,"path":["textwrap","word_splitters","WordSplitter","Hyphenation"],"kind":"variant"},"17:11459:7392":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"11:665:4010":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:41871:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:6116:5722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:2898:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:43507:9031":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:45459:9076":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:40069:8959":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:1561:3778":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:40034:8957":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"20:324:128":{"crate_id":20,"path":["hyphenation","load","Error"],"kind":"enum"},"31:7921:6552":{"crate_id":31,"path":["linux_raw_sys","general","kernel_sigset_t"],"kind":"struct"},"1:7528:4819":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"31:6744:6351":{"crate_id":31,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"11:2198:9723":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"22:4438:6929":{"crate_id":22,"path":["serde","de","value","CharDeserializer"],"kind":"struct"},"30:4667:42709":{"crate_id":30,"path":["rustix","process","prctl","PTracer"],"kind":"enum"},"22:784:42267":{"crate_id":22,"path":["serde","de","impls","StringInPlaceVisitor"],"kind":"struct"},"17:9488:7181":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:5843:5613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"25:100:10262":{"crate_id":25,"path":["hyphenation_commons","dictionary","PrefixTallies"],"kind":"struct"},"6:4459:5223":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:4639:10584":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:45990:9095":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:44364:9069":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10314:9346":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:6376:8063":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:10826:8667":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:11909:1495":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:7509:4817":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"29:17:1936":{"crate_id":29,"path":["terminal_size","Width"],"kind":"struct"},"20:283:6982":{"crate_id":20,"path":["hyphenation","iter","Segments"],"kind":"struct"},"31:4966:9508":{"crate_id":31,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"1:2387:3650":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:7503:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:7478:8075":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:8736:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:3973:10536":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:11535:8757":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"31:5319:5063":{"crate_id":31,"path":["linux_raw_sys","general","in_pktinfo"],"kind":"struct"},"2:3152:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:1668:5075":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"34:7354:5602":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"34:7265:5580":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:7241:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2515:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:2574:9201":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"0:4:1778":{"crate_id":0,"path":["textwrap","indentation"],"kind":"module"},"2:44334:9066":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:20536:3983":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:1413:8595":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:11837:9397":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:2780:4449":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:11899:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:4336:4740":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:11910:789":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:8469:9224":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:42433:8472":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:43333:9027":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:39358:8403":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:40677:8734":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"34:6005:5419":{"crate_id":34,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"30:3315:42700":{"crate_id":30,"path":["rustix","backend","process","types","MembarrierCommand"],"kind":"enum"},"2:2817:4457":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"34:663:4949":{"crate_id":34,"path":["libc","unix","winsize"],"kind":"struct"},"34:6256:5494":{"crate_id":34,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"31:6988:6379":{"crate_id":31,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"22:8358:42268":{"crate_id":22,"path":["serde","de","impls","deserialize","EnumVisitor"],"kind":"struct"},"22:4008:6924":{"crate_id":22,"path":["serde","de","value","U16Deserializer"],"kind":"struct"},"22:892:42409":{"crate_id":22,"path":["serde","de","impls","PhantomDataVisitor"],"kind":"struct"},"31:6077:6183":{"crate_id":31,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"6:4920:5457":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"31:7721:6540":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_file_index_range"],"kind":"struct"},"34:6125:5451":{"crate_id":34,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:11243:9853":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:3169:4476":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"30:2732:6561":{"crate_id":30,"path":["rustix","backend","io","poll_fd","PollFd"],"kind":"struct"},"17:12607:7606":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:3680:9217":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:4431:5211":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:13332:7841":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"7:32:21547":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13211:7813":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11035:9841":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"22:7409:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"30:2268:6557":{"crate_id":30,"path":["rustix","process","system","Uname"],"kind":"struct"},"6:1594:5019":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12550:7598":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"21:1363:10516":{"crate_id":21,"path":["bincode","error","ErrorKind"],"kind":"enum"},"1:3247:9210":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:6101:4809":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:41589:8610":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:6485:10627":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"0:6:1779":{"crate_id":0,"path":["textwrap","indentation","dedent"],"kind":"function"},"2:40324:8969":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:13376:7855":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:7065:8350":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"24:138:26583":{"crate_id":24,"path":["fst","inner_automaton","IntersectionState"],"kind":"struct"},"17:10068:7242":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:2694:8051":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:4702:8105":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"25:1094:42664":{"crate_id":25,"path":["hyphenation_commons","language","_","deserialize","__FieldVisitor"],"kind":"struct"},"17:10377:7286":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:40367:4104":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6236:8233":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:9734:7204":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:5000:8115":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"31:7740:4986":{"crate_id":31,"path":["linux_raw_sys","general","sockaddr"],"kind":"struct"},"34:6298:5510":{"crate_id":34,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:963:4713":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:45892:9092":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:3640:7079":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:4827:5405":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:11946:7487":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:7572:9182":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:5779:5579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"22:9177:41251":{"crate_id":22,"path":["serde","__private","de","content","Content"],"kind":"enum"},"17:13316:7839":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:2906:39416":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4857:5419":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:7937:2855":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"34:9310:9486":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:25847:8714":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"34:8796:5883":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"24:663:8614":{"crate_id":24,"path":["fst","inner_set","Difference"],"kind":"struct"},"31:5948:6176":{"crate_id":31,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"25:422:42582":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","_","deserialize","__Field"],"kind":"enum"},"1:11859:10412":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:43611:9035":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:12293:7555":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:40459:4110":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"25:500:6760":{"crate_id":25,"path":["hyphenation_commons","dictionary","Locus"],"kind":"struct"},"6:4790:5390":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:3197:3798":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"31:6219:5116":{"crate_id":31,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"30:4308:6663":{"crate_id":30,"path":["rustix","process","prctl","FloatingPointEmulationControl"],"kind":"struct"},"17:9617:7193":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13506:7888":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:7588:8439":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"22:5578:42258":{"crate_id":22,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"17:12224:7541":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10721:7327":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13233:7819":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"8:0:3635":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:6830:5899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:8427:10608":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"0:55:3069":{"crate_id":0,"path":["textwrap","wrap_algorithms","optimal_fit"],"kind":"module"},"6:6691:5815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:2742:8053":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"31:6163:6195":{"crate_id":31,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"16:2668:8050":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"34:1816:5000":{"crate_id":34,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:4007:8723":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:11003:9347":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:9068:40927":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:2426:8040":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"22:3235:41998":{"crate_id":22,"path":["serde","__private","ser","FlatMapSerializeStruct"],"kind":"struct"},"5:7224:8710":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"11:1852:4701":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:8496:9345":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:4932:8113":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:13516:7893":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"34:5856:5393":{"crate_id":34,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:21088:10669":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:12522:7594":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:2908:9741":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:39365:8824":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:20564:38913":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"31:6718:6350":{"crate_id":31,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"2:6768:4065":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:39114:4478":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:12542:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"0:101:1787":{"crate_id":0,"path":["textwrap","line_ending"],"kind":"module"},"24:405:8614":{"crate_id":24,"path":["fst","inner_map","Difference"],"kind":"struct"},"17:12138:7513":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"34:8821:5892":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"31:7655:6526":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_buf_reg"],"kind":"struct"},"11:652:8610":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:10130:8759":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13159:7798":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:3168:9206":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:1612:4713":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:0:816":{"crate_id":6,"path":["libc"],"kind":"module"},"17:12033:7500":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"31:5964:6178":{"crate_id":31,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"2:46212:9102":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"31:5618:9555":{"crate_id":31,"path":["linux_raw_sys","general","rt2_hdr"],"kind":"struct"},"25:488:6759":{"crate_id":25,"path":["hyphenation_commons","dictionary","trie","FstVisitor"],"kind":"struct"},"22:7216:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"1:7644:10410":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:3325:4073":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"24:1590:6888":{"crate_id":24,"path":["fst","raw","registry","Registry"],"kind":"struct"},"2:39236:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:2344:9751":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"20:228:2183":{"crate_id":20,"path":["hyphenation","hyphenator","Word"],"kind":"struct"},"31:7844:6547":{"crate_id":31,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"6:6136:5736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:55:8485":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:2477:9200":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:6442:8252":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"24:836:128":{"crate_id":24,"path":["fst","raw","error","Error"],"kind":"enum"},"16:5402:7151":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"22:9112:128":{"crate_id":22,"path":["serde","ser","Error"],"kind":"trait"},"1:8800:4010":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:8443:22621":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:9895:7218":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:13024:7769":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"15:198:10276":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"24:548:26578":{"crate_id":24,"path":["fst","inner_set","StreamWithState"],"kind":"struct"},"6:6821:5895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:8948:9360":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:1995:8688":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:2372:10485":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:10203:8761":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:43674:8957":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"31:7649:6525":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_buf_ring__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"],"kind":"struct"},"5:2407:9745":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"30:5283:42707":{"crate_id":30,"path":["rustix","process","wait","WaitId"],"kind":"enum"},"2:21:681":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"34:2107:5099":{"crate_id":34,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:8256:8508":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:11339:7379":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"31:6954:6371":{"crate_id":31,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"34:1907:5031":{"crate_id":34,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"34:5359:5273":{"crate_id":34,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"31:5632:9558":{"crate_id":31,"path":["linux_raw_sys","general","ipv6hdr"],"kind":"struct"},"34:2087:5093":{"crate_id":34,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:39258:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"30:4648:6685":{"crate_id":30,"path":["rustix","process","prctl","PrctlMmMap"],"kind":"struct"},"16:6307:8061":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:7498:8434":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"21:1006:40990":{"crate_id":21,"path":["bincode","ser","SizeCompound"],"kind":"struct"},"34:9316:5910":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"24:294:8595":{"crate_id":24,"path":["fst","inner_map","Values"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"0:216:3071":{"crate_id":0,"path":["textwrap","wrap_algorithms","optimal_fit","OverflowError"],"kind":"struct"},"2:9526:4775":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:7509:8076":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"22:2323:42105":{"crate_id":22,"path":["serde","__private","de","content","EnumDeserializer"],"kind":"struct"},"17:8310:22617":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:4141:3803":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"34:543:4914":{"crate_id":34,"path":["libc","unix","rlimit"],"kind":"struct"},"5:7030:39598":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:21332:10673":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"0:117:3073":{"crate_id":0,"path":["textwrap","core","Fragment"],"kind":"trait"},"6:4898:5441":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"31:5581:5354":{"crate_id":31,"path":["linux_raw_sys","general","in6_pktinfo"],"kind":"struct"},"30:3967:6656":{"crate_id":30,"path":["rustix","process","id","Cpuid"],"kind":"struct"},"34:591:4934":{"crate_id":34,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:5818:4746":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:1422:8611":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"34:7538:5666":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:11901:742":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"22:927:42418":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","VecInPlaceVisitor"],"kind":"struct"},"1:8410:9339":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"34:8392:5777":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:2211:4764":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"22:8035:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"2:10244:8762":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"34:5282:5259":{"crate_id":34,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:681:7022":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:43265:9022":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:1588:5017":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"31:6938:6367":{"crate_id":31,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"31:7761:5787":{"crate_id":31,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"1:6538:10629":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:13763:7977":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"22:2659:6909":{"crate_id":22,"path":["serde","__private","de","BorrowedStrDeserializer"],"kind":"struct"},"30:4725:6692":{"crate_id":30,"path":["rustix","process","prctl","SpeculationFeatureControl"],"kind":"struct"},"31:6448:27909":{"crate_id":31,"path":["linux_raw_sys","general","tcp_ca_state"],"kind":"enum"},"17:13033:7770":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"0:110:497":{"crate_id":0,"path":["textwrap","core"],"kind":"module"},"0:179:2285":{"crate_id":0,"path":["textwrap","word_separators","WordSeparator","AsciiSpace"],"kind":"variant"},"2:12308:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:8748:9347":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:44376:8617":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2163:15932":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:8142:8505":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"24:1609:42563":{"crate_id":24,"path":["fst","raw","registry","RegistryEntry"],"kind":"enum"},"24:1664:4470":{"crate_id":24,"path":["fst","raw","Bound"],"kind":"enum"},"6:6553:5759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11331:9216":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"18:652:6994":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"22:6115:42258":{"crate_id":22,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"2:3142:4472":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"34:8770:5875":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"34:1942:5038":{"crate_id":34,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"28:28:4482":{"crate_id":28,"path":["unicode_width","UnicodeWidthStr"],"kind":"trait"},"34:7763:5717":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"0:165:1970":{"crate_id":0,"path":["textwrap","wrap"],"kind":"function"},"0:181:2353":{"crate_id":0,"path":["textwrap","word_separators","WordSeparator","UnicodeBreakProperties"],"kind":"variant"},"1:11898:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:9886:7215":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:41521:4519":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:6218:6941":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"22:1469:26534":{"crate_id":22,"path":["serde","de","MapAccess"],"kind":"trait"},"16:5708:8136":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:2822:4458":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"11:2219:8704":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:42674:8998":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:9876:7110":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:4619:5305":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"22:2534:41892":{"crate_id":22,"path":["serde","__private","de","content","SeqRefDeserializer"],"kind":"struct"},"11:393:10281":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"24:1647:6860":{"crate_id":24,"path":["fst","raw","Fst"],"kind":"struct"},"22:299:6912":{"crate_id":22,"path":["serde","de","value","CowStrDeserializer"],"kind":"struct"},"2:40057:15890":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:8667:7151":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"33:183:4688":{"crate_id":33,"path":["io_lifetimes","views","FilelikeView"],"kind":"struct"},"5:4047:8610":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:10440:7294":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:2805:4459":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:5908:4738":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:3249:9211":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"31:5068:5984":{"crate_id":31,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"31:6034:4914":{"crate_id":31,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"11:0:3638":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"24:123:26582":{"crate_id":24,"path":["fst","inner_automaton","UnionState"],"kind":"struct"},"34:7379:5613":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4882:1001":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"22:2890:42203":{"crate_id":22,"path":["serde","__private","ser","content","SerializeTupleVariantAsMapValue"],"kind":"struct"},"17:11770:7456":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"25:626:6755":{"crate_id":25,"path":["hyphenation_commons","dictionary","Exceptions"],"kind":"struct"},"22:1187:42256":{"crate_id":22,"path":["serde","de","impls","deserialize","deserialize","FieldVisitor"],"kind":"struct"},"2:4332:3790":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"30:3889:10489":{"crate_id":30,"path":["rustix","io","seek_from","SeekFrom"],"kind":"enum"},"22:8376:42259":{"crate_id":22,"path":["serde","de","impls","deserialize","deserialize","KindVisitor"],"kind":"struct"},"22:2920:41251":{"crate_id":22,"path":["serde","__private","ser","content","Content"],"kind":"enum"},"30:4932:6694":{"crate_id":30,"path":["rustix","process","prctl","PointerAuthenticationKeys"],"kind":"struct"},"1:4574:5798":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:43989:8780":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"22:1515:26536":{"crate_id":22,"path":["serde","de","VariantAccess"],"kind":"trait"},"2:44084:9834":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"31:6235:6209":{"crate_id":31,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"1:1565:4010":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:40076:8960":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:2312:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:42917:8754":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"33:37:29396":{"crate_id":33,"path":["io_lifetimes","portability","IntoFilelike"],"kind":"trait"},"31:5128:9512":{"crate_id":31,"path":["linux_raw_sys","general","__kernel_sockaddr_storage"],"kind":"struct"},"1:4679:10546":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5051:5530":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:8170:8507":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:43327:8770":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4590:5297":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"18:690:7024":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:4578:5802":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"25:539:42664":{"crate_id":25,"path":["hyphenation_commons","dictionary","_","deserialize","__FieldVisitor"],"kind":"struct"},"2:2827:4460":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:7588:4080":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"22:6197:42251":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","SeqInPlaceVisitor"],"kind":"struct"},"1:10865:9349":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:1609:5031":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:4318:5139":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:526:4934":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"13:110:40912":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"31:7787:6546":{"crate_id":31,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"31:6758:4943":{"crate_id":31,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"16:7317:40915":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"0:242:1788":{"crate_id":0,"path":["textwrap","line_ending","LineEnding"],"kind":"enum"},"30:4704:42715":{"crate_id":30,"path":["rustix","process","prctl","SpeculationFeature"],"kind":"enum"},"2:47800:9171":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"31:5600:6090":{"crate_id":31,"path":["linux_raw_sys","general","ipv6_rt_hdr"],"kind":"struct"},"2:21978:10529":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:7590:6757":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:22260:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:9596:7191":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"11:1843:4010":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"22:2404:41878":{"crate_id":22,"path":["serde","__private","de","content","ContentRefDeserializer"],"kind":"struct"},"5:3184:6866":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:8893:9353":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:46036:9097":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"11:757:4733":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:10660:7320":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"30:4196:42711":{"crate_id":30,"path":["rustix","process","prctl","DumpableBehavior"],"kind":"enum"},"2:10272:8764":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10527:22733":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"34:4839:5149":{"crate_id":34,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:386:7050":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:7544:9488":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"22:3139:26551":{"crate_id":22,"path":["serde","__private","ser","content","SerializeStruct"],"kind":"struct"},"31:6702:5922":{"crate_id":31,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"30:5269:6701":{"crate_id":30,"path":["rustix","process","wait","WaitStatus"],"kind":"struct"},"2:44108:9840":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"33:182:29409":{"crate_id":33,"path":["io_lifetimes","views","SocketlikeViewType"],"kind":"trait"},"17:10897:7341":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"22:3248:42097":{"crate_id":22,"path":["serde","__private","ser","FlatMapSerializeStructVariantAsMapValue"],"kind":"struct"},"5:6097:10760":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:8982:30241":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:8651:7150":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:10712:9215":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:7543:8078":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"31:6917:9602":{"crate_id":31,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"30:3677:6648":{"crate_id":30,"path":["rustix","backend","time","types","TimerfdFlags"],"kind":"struct"},"17:9959:7227":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:2512:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:2746:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:2691:3816":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:40083:15891":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:11905:1499":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"31:6670:6344":{"crate_id":31,"path":["linux_raw_sys","general","tcp_zerocopy_receive"],"kind":"struct"},"16:7757:8445":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"9:325:9729":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"31:5422:27903":{"crate_id":31,"path":["linux_raw_sys","general","_bindgen_ty_2"],"kind":"enum"},"1:9098:9367":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:8286:9223":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:7854:9278":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"9:352:21576":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:42705:9006":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5755:5563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:11907:1497":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:46060:9098":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:11889:1515":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:4683:10549":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:40012:8955":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:959:8602":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"34:8622:5819":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:44164:16028":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:11500:8776":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:2741:3817":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:10545:7068":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:9028:7159":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:9545:7147":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:11854:10145":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:4508:10575":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:3925:10533":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"34:492:4906":{"crate_id":34,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:4436:10558":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:5367:21672":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"25:0:3772":{"crate_id":25,"path":["hyphenation_commons"],"kind":"module"},"5:7211:8708":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"22:7249:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"34:4958:5190":{"crate_id":34,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:2792:4453":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"9:502:8670":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"22:1148:42256":{"crate_id":22,"path":["serde","de","impls","range","deserialize","FieldVisitor"],"kind":"struct"},"1:5764:4804":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:6535:4694":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:8047:8494":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:47686:9163":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:1197:8351":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:5724:8137":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"24:993:26580":{"crate_id":24,"path":["fst","raw","ops","OpBuilder"],"kind":"struct"},"2:45662:9084":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:507:6994":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:10847:31449":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"0:25:2879":{"crate_id":0,"path":["textwrap","word_separators","strip_ansi_escape_sequences"],"kind":"function"},"1:9981:9194":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:6085:4789":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:12059:7503":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:6569:5771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:1572:4701":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"22:2600:42261":{"crate_id":22,"path":["serde","__private","de","content","InternallyTaggedUnitVisitor"],"kind":"struct"},"2:21966:8810":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12894:7721":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:11393:9218":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"22:7271:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"16:2720:8052":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:9340:7166":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:5900:5643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"31:7546:6508":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_rsrc_update"],"kind":"struct"},"0:258:2031":{"crate_id":0,"path":["textwrap","line_ending","NonEmptyLines"],"kind":"struct"},"22:7358:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"1:4328:9222":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"31:203:5936":{"crate_id":31,"path":["linux_raw_sys","general","__BindgenUnionField"],"kind":"struct"},"6:7568:5931":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:5485:4748":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"9:421:21563":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:1463:8686":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:9748:7163":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:46716:9121":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"24:1654:6897":{"crate_id":24,"path":["fst","raw","Meta"],"kind":"struct"},"17:11721:7434":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4845:5414":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:8784:3778":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"31:5059:5979":{"crate_id":31,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"17:562:6731":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:43135:9010":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"11:1009:8603":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:1630:588":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:11894:1397":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"30:3984:6657":{"crate_id":30,"path":["rustix","process","membarrier","MembarrierQuery"],"kind":"struct"},"34:7561:5671":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:7230:5909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:9147:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:8670:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"25:597:42664":{"crate_id":25,"path":["hyphenation_commons","dictionary","_","deserialize","__FieldVisitor"],"kind":"struct"},"17:12158:7516":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"30:4603:42710":{"crate_id":30,"path":["rustix","process","prctl","VirtualMemoryMapAddress"],"kind":"enum"},"2:2839:4462":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:1916:8719":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:7266:8712":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:10569:7307":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:2518:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"24:284:8594":{"crate_id":24,"path":["fst","inner_map","Keys"],"kind":"struct"},"6:4466:5226":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6179:8203":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:11783:15836":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:2242:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:45561:9080":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"31:6962:6372":{"crate_id":31,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"2:11717:8748":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"31:5898:6157":{"crate_id":31,"path":["linux_raw_sys","general","prctl_mm_map"],"kind":"struct"},"22:7854:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"16:2642:8049":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:11903:744":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"22:172:6907":{"crate_id":22,"path":["serde","de","value","U32Deserializer"],"kind":"struct"},"2:41368:8743":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:2695:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:5798:5581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"33:42:29397":{"crate_id":33,"path":["io_lifetimes","portability","IntoSocketlike"],"kind":"trait"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"34:5930:5405":{"crate_id":34,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"0:35:1783":{"crate_id":0,"path":["textwrap","word_splitters"],"kind":"module"},"1:2362:10480":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"18:113:10268":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:922:8592":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:7029:8345":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"34:5342:5271":{"crate_id":34,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12345:7561":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"34:5951:5408":{"crate_id":34,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:564:7003":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:9877:8984":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10615:7315":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:13803:7988":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:487:7054":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13744:7972":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:47526:9157":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:2694:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"24:1049:8614":{"crate_id":24,"path":["fst","raw","ops","Difference"],"kind":"struct"},"2:9592:4778":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:8909:6940":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:40693:4072":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:2208:9199":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"34:7621:5684":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"10:44:8618":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:1716:4701":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:41538:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"0:227:2315":{"crate_id":0,"path":["textwrap","wrap_algorithms","WrapAlgorithm","FirstFit"],"kind":"variant"},"11:326:4697":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:7161:4085":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"24:1444:6841":{"crate_id":24,"path":["fst","inner_set","Set"],"kind":"struct"},"30:4217:6662":{"crate_id":30,"path":["rustix","process","prctl","UnalignedAccessControl"],"kind":"struct"},"2:43245:9020":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"34:509:4909":{"crate_id":34,"path":["libc","unix","timeval"],"kind":"struct"},"34:6308:5516":{"crate_id":34,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:8858:7045":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:5910:4802":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"9:481:21560":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"22:940:42253":{"crate_id":22,"path":["serde","de","impls","ArrayVisitor"],"kind":"struct"},"2:39982:37120":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13821:7994":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:11195:9258":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"22:6024:42254":{"crate_id":22,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"5:35:4709":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:9405:15899":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"31:5988:5182":{"crate_id":31,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"1:9062:9253":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"31:4842:5771":{"crate_id":31,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"2:43343:6940":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"31:4762:5939":{"crate_id":31,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"34:8344:5759":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:20770:15931":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:8195:22605":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:30288:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"22:2647:6908":{"crate_id":22,"path":["serde","__private","de","StrDeserializer"],"kind":"struct"},"1:8141:6940":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"0:54:1785":{"crate_id":0,"path":["textwrap","wrap_algorithms"],"kind":"module"},"16:6520:8262":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:41394:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:6552:4814":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:5571:8065":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:7052:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"24:1602:6893":{"crate_id":24,"path":["fst","raw","registry","RegistryCell"],"kind":"struct"},"2:47610:9159":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"34:5167:5231":{"crate_id":34,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:10000:10295":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"22:1527:26513":{"crate_id":22,"path":["serde","de","IntoDeserializer"],"kind":"trait"},"17:10885:7340":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"34:5150:5228":{"crate_id":34,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:5557:8062":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:41470:4010":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:6785:5875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:8843:10143":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"22:7287:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"11:2157:21634":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:13426:7870":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"22:7592:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"1:9003:9843":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:2749:3975":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"31:5284:6036":{"crate_id":31,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"34:4863:5159":{"crate_id":34,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:7665:9191":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"31:5048:5976":{"crate_id":31,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"2:30466:37118":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:47785:9170":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"24:963:10263":{"crate_id":24,"path":["fst","raw","node","Transitions"],"kind":"struct"},"22:266:6911":{"crate_id":22,"path":["serde","de","value","StringDeserializer"],"kind":"struct"},"22:738:42412":{"crate_id":22,"path":["serde","de","impls","UnitVisitor"],"kind":"struct"},"6:7491:5924":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"24:423:42510":{"crate_id":24,"path":["fst","inner_map","StreamOutput"],"kind":"struct"},"2:43935:15843":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13367:7852":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4478:5231":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11060:7320":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:7252:9486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4960:5483":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"31:5889:4946":{"crate_id":31,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"16:8180:22569":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10691:22734":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:689:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:47072:9152":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"31:7526:6504":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_files_update"],"kind":"struct"},"2:10258:8763":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"11:2204:40910":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"30:3566:26633":{"crate_id":30,"path":["rustix","backend","termios","types","QueueSelector"],"kind":"enum"},"1:901:4733":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:11145:4827":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:8788:7043":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:1752:5116":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"22:5457:6934":{"crate_id":22,"path":["serde","de","ignored_any","IgnoredAny"],"kind":"struct"},"5:7044:4010":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:45822:9090":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:41479:4520":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:43301:9023":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"31:7895:5589":{"crate_id":31,"path":["linux_raw_sys","general","cmsghdr"],"kind":"struct"},"2:40448:4093":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:2087:8689":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:0:1389":{"crate_id":1,"path":["std"],"kind":"module"},"5:6446:4713":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13667:7950":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:867:4010":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:41462:8610":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:3132:32054":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:9153:3814":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10080:7243":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:6016:5703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"34:6267:5500":{"crate_id":34,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"34:5016:5204":{"crate_id":34,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"31:5996:4959":{"crate_id":31,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"34:9707:9492":{"crate_id":34,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:2470:8042":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:7555:9492":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:8955:9361":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:40684:4070":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:7081:4010":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"34:1863:5017":{"crate_id":34,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"31:5388:6044":{"crate_id":31,"path":["linux_raw_sys","general","ip_auth_hdr"],"kind":"struct"},"21:1218:41067":{"crate_id":21,"path":["bincode","config","legacy","EndianOption"],"kind":"enum"},"2:14:3017":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:47721:9166":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:2469:10490":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"11:1866:8614":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:7635:8441":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:5418:8121":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:6917:4068":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:44076:9832":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"20:200:26486":{"crate_id":20,"path":["hyphenation","score","Score"],"kind":"trait"},"1:8264:5787":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"30:5067:6699":{"crate_id":30,"path":["rustix","process","wait","WaitOptions"],"kind":"struct"},"24:1389:6865":{"crate_id":24,"path":["fst","inner_automaton","StartsWith"],"kind":"struct"},"5:3521:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:10053:8757":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:41911:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:7591:4082":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:2832:4799":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:1895:4240":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:3688:8688":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:46528:9117":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:47402:9155":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:39341:8822":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"25:306:6752":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","Patterns"],"kind":"struct"},"2:20760:10674":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:9138:7161":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"21:888:41824":{"crate_id":21,"path":["bincode","ser","SizeChecker"],"kind":"struct"},"31:7698:6534":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_getevents_arg"],"kind":"struct"},"34:5724:5364":{"crate_id":34,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:10647:9847":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:6728:8302":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:41991:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:618:4242":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"24:1339:26561":{"crate_id":24,"path":["fst","stream","IntoStreamer"],"kind":"trait"},"17:11902:7479":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"34:2021:5075":{"crate_id":34,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:6700:5819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:3170:9207":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:6024:9480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6662:8288":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:2206:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:43741:15842":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"34:5894:5400":{"crate_id":34,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:2862:8058":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:488:4909":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:11054:9253":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:4726:5354":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10039:7238":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:1787:7057":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:5499:5719":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13145:7797":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:6868:8322":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:45844:9091":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"13:0:3633":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:39176:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:1733:15942":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"0:294:1791":{"crate_id":0,"path":["textwrap","Options"],"kind":"struct"},"17:13249:7822":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"10:36:9728":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"18:766:26474":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:10598:7345":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:44096:9837":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:11900:745":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"11:1524:21641":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:8823:7044":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"34:8436:5783":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:480:4791":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:4681:10548":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:2905:8060":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"11:1540:8612":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"22:1802:26522":{"crate_id":22,"path":["serde","ser","Serialize"],"kind":"trait"},"24:1508:9002":{"crate_id":24,"path":["fst","raw","node","State"],"kind":"enum"},"16:7244:40918":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"34:7231:5576":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:46158:9100":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:7626:8440":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"34:7720:5703":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"11:359:4699":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:0:3644":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:22590:8815":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"34:6101:5441":{"crate_id":34,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"34:1738:4984":{"crate_id":34,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"22:5526:42258":{"crate_id":22,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"2:45543:9079":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:11210:9259":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:8490:22622":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:43144:9011":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"30:5163:6700":{"crate_id":30,"path":["rustix","process","wait","WaitidOptions"],"kind":"struct"},"17:10104:7245":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:3135:32053":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:11938:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"34:5093:5220":{"crate_id":34,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"11:1634:4707":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:2692:3797":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"22:1507:26535":{"crate_id":22,"path":["serde","de","EnumAccess"],"kind":"trait"},"31:6152:6191":{"crate_id":31,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:21771:8790":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:6999:4010":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"31:5924:6173":{"crate_id":31,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"17:10026:7235":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:1721:5103":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"25:1110:42663":{"crate_id":25,"path":["hyphenation_commons","language","_","deserialize","__Visitor"],"kind":"struct"},"16:6935:8327":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13169:7799":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:6022:22559":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:11600:7418":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"31:7913:5099":{"crate_id":31,"path":["linux_raw_sys","general","mmsghdr"],"kind":"struct"},"31:7644:6522":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_buf_ring__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"34:9696:9488":{"crate_id":34,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:3458:10488":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"34:2137:5106":{"crate_id":34,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"31:7930:6554":{"crate_id":31,"path":["linux_raw_sys","general","kernel_sigaction"],"kind":"struct"},"22:6290:42251":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","SeqInPlaceVisitor"],"kind":"struct"},"17:2933:7064":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:11726:7027":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:3534:3778":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"34:682:4954":{"crate_id":34,"path":["libc","unix","linger"],"kind":"struct"},"18:80:10264":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:6243:40917":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"31:5149:27902":{"crate_id":31,"path":["linux_raw_sys","general","_bindgen_ty_1"],"kind":"enum"},"1:8047:9316":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"24:673:8615":{"crate_id":24,"path":["fst","inner_set","SymmetricDifference"],"kind":"struct"},"21:497:26501":{"crate_id":21,"path":["bincode","de","Deserializer"],"kind":"struct"},"34:1839:5009":{"crate_id":34,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"22:1048:15918":{"crate_id":22,"path":["serde","de","impls","deserialize","Field"],"kind":"enum"},"1:11887:936":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"11:816:8611":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:7449:8423":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:4728:8106":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:5594:8067":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:4331:5149":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:6332:9246":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:30302:37127":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"34:7492:5643":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"34:6221:5477":{"crate_id":34,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10334:7163":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:21665:8788":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:8925:31288":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:40116:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"31:7055:9615":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_3"],"kind":"union"},"17:1947:7060":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"22:5536:42254":{"crate_id":22,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"22:943:42250":{"crate_id":22,"path":["serde","de","impls","ArrayInPlaceVisitor"],"kind":"struct"},"6:6057:5706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:11424:8771":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:12259:7552":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"24:1549:6883":{"crate_id":24,"path":["fst","raw","node","PackSizes"],"kind":"struct"},"17:8521:22623":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"22:8304:42408":{"crate_id":22,"path":["serde","de","impls","deserialize","MapVisitor"],"kind":"struct"},"31:5667:27904":{"crate_id":31,"path":["linux_raw_sys","general","_bindgen_ty_3"],"kind":"enum"},"34:4902:5182":{"crate_id":34,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"32:0:4500":{"crate_id":32,"path":["bitflags"],"kind":"module"},"2:3510:4733":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:1514:4976":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"34:6327:5530":{"crate_id":34,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4559:5273":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:9469:7176":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"31:5403:6052":{"crate_id":31,"path":["linux_raw_sys","general","ip_comp_hdr"],"kind":"struct"},"2:40438:4109":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:20990:10672":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:11888:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"31:4881:5953":{"crate_id":31,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"30:2337:6558":{"crate_id":30,"path":["rustix","backend","io","epoll","CreateFlags"],"kind":"struct"},"1:1846:9196":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5022:5510":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:5920:8015":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:41671:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11037:22630":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"31:5077:5988":{"crate_id":31,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"2:2744:3973":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:5071:9473":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"31:5251:4976":{"crate_id":31,"path":["linux_raw_sys","general","in_addr"],"kind":"struct"},"1:10357:4822":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"22:4266:6927":{"crate_id":22,"path":["serde","de","value","F32Deserializer"],"kind":"struct"},"2:47823:9172":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"31:5308:9523":{"crate_id":31,"path":["linux_raw_sys","general","group_filter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:7520:5490":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"22:446:6916":{"crate_id":22,"path":["serde","de","value","MapDeserializer"],"kind":"struct"},"2:10804:8767":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"22:3492:6918":{"crate_id":22,"path":["serde","de","value","I8Deserializer"],"kind":"struct"},"24:583:26577":{"crate_id":24,"path":["fst","inner_set","StreamWithStateBuilder"],"kind":"struct"},"24:1525:6880":{"crate_id":24,"path":["fst","raw","node","StateOneTransNext"],"kind":"struct"},"22:1070:42417":{"crate_id":22,"path":["serde","de","impls","deserialize","DurationVisitor"],"kind":"struct"},"34:4976:5192":{"crate_id":34,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:609:7009":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"34:5465:5305":{"crate_id":34,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"20:0:1618":{"crate_id":20,"path":["hyphenation"],"kind":"module"},"6:4629:5306":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"31:7824:5806":{"crate_id":31,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"17:13612:7931":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:2189:9744":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:9933:7224":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:12576:7600":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"34:9718:9493":{"crate_id":34,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:43223:9018":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"34:1775:4989":{"crate_id":34,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"0:168:2171":{"crate_id":0,"path":["textwrap","wrap_single_line"],"kind":"function"},"34:9276:5909":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:42153:3804":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"34:5743:5368":{"crate_id":34,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"34:6341:5489":{"crate_id":34,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"22:1176:15918":{"crate_id":22,"path":["serde","de","impls","deserialize","Field"],"kind":"enum"},"16:2594:8047":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"24:1383:6864":{"crate_id":24,"path":["fst","inner_automaton","AlwaysMatch"],"kind":"struct"},"31:6137:9580":{"crate_id":31,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"21:573:41336":{"crate_id":21,"path":["bincode","de","deserialize_tuple","Access"],"kind":"struct"},"31:5563:4934":{"crate_id":31,"path":["linux_raw_sys","general","ipv6_mreq"],"kind":"struct"},"22:3217:42171":{"crate_id":22,"path":["serde","__private","ser","FlatMapSerializeMap"],"kind":"struct"},"2:9159:3812":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:9443:7175":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:4260:3784":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:4472:5228":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"31:7555:6509":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_rsrc_update2"],"kind":"struct"},"16:3047:21701":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10505:7299":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"0:112:3506":{"crate_id":0,"path":["textwrap","core","ANSI_FINAL_BYTE"],"kind":"constant"},"6:5785:5580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"31:5372:6040":{"crate_id":31,"path":["linux_raw_sys","general","iphdr__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:47770:9169":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4404:5195":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:7335:40919":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"21:1281:9665":{"crate_id":21,"path":["bincode","config","WithOtherIntEncoding"],"kind":"struct"},"16:2967:21700":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:46416:9115":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:7786:9272":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"24:387:6866":{"crate_id":24,"path":["fst","inner_map","Union"],"kind":"struct"},"30:2935:6565":{"crate_id":30,"path":["rustix","backend","io","types","SpliceFlags"],"kind":"struct"},"1:643:10408":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:2738:3971":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:9624:4784":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"22:649:41840":{"crate_id":22,"path":["serde","de","value","private","Pair"],"kind":"trait"},"25:495:128":{"crate_id":25,"path":["hyphenation_commons","dictionary","trie","Error"],"kind":"struct"},"14:0:3640":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:44326:9064":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"34:1720:4981":{"crate_id":34,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:40226:4086":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:5570:4803":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"34:5821:5387":{"crate_id":34,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:7781:7111":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:1756:8716":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:2867:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:123:16299":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:45746:9087":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"21:1251:9657":{"crate_id":21,"path":["bincode","config","DefaultOptions"],"kind":"struct"},"2:45347:9071":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:41512:4521":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:4571:5282":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4449:5220":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:660:7015":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:13240:7821":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"34:7646:5695":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:4803:5396":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:30041:10528":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:6668:5808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:10257:7278":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:6621:9246":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:9312:7165":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:41791:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"11:399:10282":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:7529:8077":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:3150:8615":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"22:1020:42410":{"crate_id":22,"path":["serde","de","impls","OsStringVisitor"],"kind":"struct"},"22:8285:42408":{"crate_id":22,"path":["serde","de","impls","deserialize","MapVisitor"],"kind":"struct"},"2:20804:10680":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:4433:3794":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"31:7882:5581":{"crate_id":31,"path":["linux_raw_sys","general","msghdr"],"kind":"struct"},"22:2500:42104":{"crate_id":22,"path":["serde","__private","de","content","EnumRefDeserializer"],"kind":"struct"},"2:45391:9073":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:21854:8796":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"22:339:6913":{"crate_id":22,"path":["serde","de","value","BytesDeserializer"],"kind":"struct"},"2:41597:4010":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:12295:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"31:6330:27906":{"crate_id":31,"path":["linux_raw_sys","general","_bindgen_ty_4"],"kind":"enum"},"22:2097:41993":{"crate_id":22,"path":["serde","__private","de","content","TagOrContentVisitor"],"kind":"struct"},"17:9641:7195":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"9:52:10125":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:4386:3792":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:4377:3791":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:41581:3778":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:4540:8101":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10416:7292":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"33:189:4691":{"crate_id":33,"path":["io_lifetimes","views","SocketlikeView"],"kind":"struct"},"34:4769:5122":{"crate_id":34,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:5797:8144":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:5247:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:3749:8090":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"22:5484:42254":{"crate_id":22,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"11:1873:8615":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:30232:4403":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:3117:3778":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:7136:8704":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"24:1460:6872":{"crate_id":24,"path":["fst","raw","build","BuilderNode"],"kind":"struct"},"31:5380:6043":{"crate_id":31,"path":["linux_raw_sys","general","iphdr__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"2:20984:10670":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"33:69:29388":{"crate_id":33,"path":["io_lifetimes","traits","FromFd"],"kind":"trait"},"1:8960:9362":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:43357:8755":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:7443:5922":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:532:4937":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11800:7464":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"25:728:6757":{"crate_id":25,"path":["hyphenation_commons","dictionary","Builder"],"kind":"struct"},"11:119:4695":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"11:97:9716":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"24:1413:6867":{"crate_id":24,"path":["fst","inner_automaton","Intersection"],"kind":"struct"},"34:645:4946":{"crate_id":34,"path":["libc","unix","pollfd"],"kind":"struct"},"34:9650:5927":{"crate_id":34,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:8548:22624":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:6981:8338":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"21:48:26505":{"crate_id":21,"path":["bincode","config","int","IntEncoding"],"kind":"trait"},"1:7677:10448":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:40286:4097":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:6390:8248":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6132:8196":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11193:7365":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"34:7861:5722":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"31:7634:6521":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"5:780:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"25:333:42664":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","_","deserialize","__FieldVisitor"],"kind":"struct"},"17:9534:7187":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:2506:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:40356:4113":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10649:7318":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:10580:7311":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"21:1236:8804":{"crate_id":21,"path":["bincode","config","limit","Infinite"],"kind":"struct"},"2:44347:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"31:7535:6506":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_rsrc_register"],"kind":"struct"},"2:39302:4470":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"31:7745:4954":{"crate_id":31,"path":["linux_raw_sys","general","linger"],"kind":"struct"},"17:11319:7378":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:32060:8819":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:20549:38913":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:2616:8048":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:5741:22557":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"11:731:8594":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:6597:4758":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:2833:4461":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:45367:9072":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:9107:3811":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"31:6050:5910":{"crate_id":31,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"17:10589:7312":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:11461:32519":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:8825:9352":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:4538:5264":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7803:8453":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:5035:4746":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:7485:5923":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:6164:8201":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:6793:8315":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:5021:9228":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13469:7880":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4371:5182":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:9813:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"34:7138:5536":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12019:7251":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:5386:7150":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"24:52:26558":{"crate_id":24,"path":["fst","inner_automaton","Automaton"],"kind":"trait"},"26:0:2597":{"crate_id":26,"path":["unicode_linebreak"],"kind":"module"},"6:5959:5678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"21:837:26502":{"crate_id":21,"path":["bincode","ser","Serializer"],"kind":"struct"},"17:10857:22629":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:40376:4091":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:40163:10459":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"6:4991:5500":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"22:1218:15918":{"crate_id":22,"path":["serde","de","impls","deserialize","Field"],"kind":"enum"},"6:4492:5239":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:22227:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:11902:743":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:2614:9202":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:20938:10668":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:8762:9348":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:44080:9833":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:6696:22562":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:32056:8818":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"22:1085:15918":{"crate_id":22,"path":["serde","de","impls","deserialize","Field"],"kind":"enum"},"22:630:41898":{"crate_id":22,"path":["serde","de","value","private","SeedTupleVariant"],"kind":"struct"},"17:10555:7302":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:4344:5159":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"22:8508:26537":{"crate_id":22,"path":["serde","de","Unexpected"],"kind":"enum"},"28:22:3513":{"crate_id":28,"path":["unicode_width","UnicodeWidthChar"],"kind":"trait"},"31:7101:6391":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_6__bindgen_ty_1"],"kind":"struct"},"2:40149:8966":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4797:5393":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"34:1681:6179":{"crate_id":34,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:11821:7468":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"22:1057:42256":{"crate_id":22,"path":["serde","de","impls","deserialize","deserialize","FieldVisitor"],"kind":"struct"},"31:4941:9502":{"crate_id":31,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"17:9409:22638":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"22:1315:26530":{"crate_id":22,"path":["serde","de","DeserializeOwned"],"kind":"trait"},"0:176:2283":{"crate_id":0,"path":["textwrap","fill_inplace"],"kind":"function"},"17:13101:7785":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11434:7387":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:975:7055":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"31:6797:6353":{"crate_id":31,"path":["linux_raw_sys","general","old_utsname"],"kind":"struct"},"0:170:2172":{"crate_id":0,"path":["textwrap","wrap_single_line_slow_path"],"kind":"function"},"16:6336:8243":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:7202:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:4836:5408":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"30:2581:6556":{"crate_id":30,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"2:11249:15988":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:3899:8094":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"25:277:42664":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","_","deserialize","__FieldVisitor"],"kind":"struct"},"2:2264:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:12372:7565":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"31:5139:6005":{"crate_id":31,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:40296:4098":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:5015:5507":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"11:1561:8613":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"31:5366:9535":{"crate_id":31,"path":["linux_raw_sys","general","iphdr__bindgen_ty_1"],"kind":"union"},"34:8672:5831":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"31:6119:9579":{"crate_id":31,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"1:1594:6866":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"30:3522:6625":{"crate_id":30,"path":["rustix","backend","process","types","RawCpuSet"],"kind":"struct"},"2:7595:4083":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:9670:7200":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:2981:4467":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:43649:8777":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:4737:4800":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:6628:5805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"33:67:29389":{"crate_id":33,"path":["io_lifetimes","traits","IntoFd"],"kind":"trait"},"16:3815:8092":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13433:7871":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"22:5952:42254":{"crate_id":22,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"1:8918:9356":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:8109:8501":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:9683:7201":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:5693:8133":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:1525:4981":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"34:5242:5249":{"crate_id":34,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11969:7491":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6061:21673":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"18:574:6994":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"30:3859:42708":{"crate_id":30,"path":["rustix","backend","time","types","TimerfdClockId"],"kind":"enum"},"20:220:6974":{"crate_id":20,"path":["hyphenation","case_folding","Shift"],"kind":"struct"},"1:8082:9213":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:7509:5927":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"11:2060:8351":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"34:5305:5264":{"crate_id":34,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"30:5051:6697":{"crate_id":30,"path":["rustix","process","sched","CpuSet"],"kind":"struct"},"5:6294:4713":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"24:1622:6888":{"crate_id":24,"path":["fst","raw","registry_minimal","Registry"],"kind":"struct"},"31:5625:9557":{"crate_id":31,"path":["linux_raw_sys","general","ipv6_destopt_hao"],"kind":"struct"},"16:5677:22556":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:7195:38039":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:3995:8722":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:815:4718":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:40699:4073":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:3465:10508":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:4642:10557":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13477:7881":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"22:6310:42252":{"crate_id":22,"path":["serde","de","impls","deserialize","SeqVisitor"],"kind":"struct"},"2:44291:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:46866:9122":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:12403:7571":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:11672:10609":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:41606:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:10948:4826":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:11500:9262":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"22:8366:42166":{"crate_id":22,"path":["serde","de","impls","deserialize","SocketAddrKind"],"kind":"enum"},"2:9609:4779":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"22:640:41991":{"crate_id":22,"path":["serde","de","value","private","SeedStructVariant"],"kind":"struct"},"2:2470:15895":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:5987:4114":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"30:488:3778":{"crate_id":30,"path":["rustix","backend","io","epoll","Iter"],"kind":"struct"},"0:62:3349":{"crate_id":0,"path":["textwrap","wrap_algorithms","optimal_fit","LineNumbers"],"kind":"struct"},"2:9295:8752":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"34:6351:9471":{"crate_id":34,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"21:295:26506":{"crate_id":21,"path":["bincode","config","trailing","TrailingBytes"],"kind":"trait"},"17:13564:7930":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:2912:39406":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"34:7420:5615":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:1692:5092":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"22:5890:42258":{"crate_id":22,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"22:1734:26554":{"crate_id":22,"path":["serde","ser","impossible","Impossible"],"kind":"struct"},"1:4074:10289":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:42498:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:43425:9030":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"31:5940:6175":{"crate_id":31,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"2:30864:3983":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:42458:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:5712:4733":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:40473:4111":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"34:8748:5872":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"22:7312:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"17:11891:7478":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:47675:9162":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:2317:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"21:443:26500":{"crate_id":21,"path":["bincode","de","read","BincodeRead"],"kind":"trait"},"34:6334:5533":{"crate_id":34,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:13812:7992":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:11502:7395":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:7743:8068":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"22:7663:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"34:5684:5354":{"crate_id":34,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"34:1756:4986":{"crate_id":34,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12236:7543":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"31:6103:6184":{"crate_id":31,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"33:181:29408":{"crate_id":33,"path":["io_lifetimes","views","FilelikeViewType"],"kind":"trait"},"0:135:1804":{"crate_id":0,"path":["textwrap","core","break_words"],"kind":"function"},"24:104:26581":{"crate_id":24,"path":["fst","inner_automaton","StartsWithState"],"kind":"struct"},"2:6674:4095":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"22:4180:6926":{"crate_id":22,"path":["serde","de","value","UsizeDeserializer"],"kind":"struct"},"30:2743:6563":{"crate_id":30,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"6:506:4917":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:7711:8443":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:21862:8797":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"22:1861:26547":{"crate_id":22,"path":["serde","ser","SerializeTuple"],"kind":"trait"},"34:1923:5033":{"crate_id":34,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10798:22628":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:6854:8320":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:3782:8091":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:7022:4723":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:7697:8070":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:1519:4978":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:21718:8789":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:671:7021":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"31:7708:6538":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_sync_cancel_reg"],"kind":"struct"},"0:245:1837":{"crate_id":0,"path":["textwrap","line_ending","LineEnding","LF"],"kind":"variant"},"0:270:2183":{"crate_id":0,"path":["textwrap","core","Word"],"kind":"struct"},"33:56:29395":{"crate_id":33,"path":["io_lifetimes","portability","FromSocketlike"],"kind":"trait"},"1:2550:4779":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:40718:4077":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"31:5649:9562":{"crate_id":31,"path":["linux_raw_sys","general","ipv6hdr__bindgen_ty_1"],"kind":"union"},"1:8870:10634":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:39970:8951":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"30:5277:9647":{"crate_id":30,"path":["rustix","process","wait","WaitidStatus"],"kind":"struct"},"17:9557:7163":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"0:229:3093":{"crate_id":0,"path":["textwrap","wrap_algorithms","WrapAlgorithm","OptimalFit"],"kind":"variant"},"22:7489:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"2:9151:3804":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:2169:40555":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4509:5249":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:1546:4989":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"22:5796:42254":{"crate_id":22,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"17:11520:7396":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"22:549:26544":{"crate_id":22,"path":["serde","de","value","ExpectedInMap"],"kind":"struct"},"25:699:42664":{"crate_id":25,"path":["hyphenation_commons","dictionary","_","deserialize","__FieldVisitor"],"kind":"struct"},"1:6188:4802":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:4321:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:4947:5475":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"22:5209:6932":{"crate_id":22,"path":["serde","de","value","SeqAccessDeserializer"],"kind":"struct"},"2:9117:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:2151:589":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"34:6363:9476":{"crate_id":34,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"25:933:42582":{"crate_id":25,"path":["hyphenation_commons","language","_","deserialize","__Field"],"kind":"enum"},"1:3875:10531":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8792:9351":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"25:666:2297":{"crate_id":25,"path":["hyphenation_commons","dictionary","Standard"],"kind":"struct"},"16:6361:8245":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"21:405:26507":{"crate_id":21,"path":["bincode","config","internal","InternalOptions"],"kind":"trait"},"1:8912:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:43479:8763":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:6739:4752":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:6575:22561":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:7016:8342":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:9839:7212":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"31:6204:9589":{"crate_id":31,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"16:4789:8108":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"34:6188:5472":{"crate_id":34,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:13041:7771":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13309:7838":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"34:751:4967":{"crate_id":34,"path":["libc","unix","servent"],"kind":"struct"},"1:8091:9215":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:12331:7560":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"20:344:26489":{"crate_id":20,"path":["hyphenation","resources","ResourceId"],"kind":"enum"},"17:9721:7203":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:10657:9273":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:6002:5698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:8931:7049":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"34:9684:5492":{"crate_id":34,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:10989:7068":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"25:715:42663":{"crate_id":25,"path":["hyphenation_commons","dictionary","_","deserialize","__Visitor"],"kind":"struct"},"16:4904:8112":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:3182:39300":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:2830:8057":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"31:5039:5974":{"crate_id":31,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"1:8337:6730":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:11484:8775":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:8147:8755":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:44112:9841":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"25:197:42582":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","_","deserialize","__Field"],"kind":"enum"},"2:4782:38535":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"24:1639:6893":{"crate_id":24,"path":["fst","raw","registry_minimal","RegistryCell"],"kind":"struct"},"31:6997:6380":{"crate_id":31,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"22:5994:42254":{"crate_id":22,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"2:3234:3800":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:1614:5033":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:7532:5492":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:10967:7345":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:43407:9029":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:40306:4099":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"11:1879:6866":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:6236:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"22:7739:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"22:2745:41829":{"crate_id":22,"path":["serde","__private","de","FlatStructAccess"],"kind":"struct"},"1:10422:9210":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"31:6766:5103":{"crate_id":31,"path":["linux_raw_sys","general","sockaddr_un"],"kind":"struct"},"1:11225:9261":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7596:22566":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"24:327:26577":{"crate_id":24,"path":["fst","inner_map","StreamWithStateBuilder"],"kind":"struct"},"34:5873:5396":{"crate_id":34,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:43236:9019":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:3933:10534":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:43210:4086":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"25:613:42663":{"crate_id":25,"path":["hyphenation_commons","dictionary","_","deserialize","__Visitor"],"kind":"struct"},"34:5701:5357":{"crate_id":34,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"33:28:29391":{"crate_id":33,"path":["io_lifetimes","portability","AsSocketlike"],"kind":"trait"},"34:7584:5678":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"33:127:29402":{"crate_id":33,"path":["io_lifetimes","raw","AsRawFilelike"],"kind":"trait"},"1:3911:10532":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:6907:4816":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"34:7683:5698":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"22:3074:26546":{"crate_id":22,"path":["serde","__private","ser","content","SerializeSeq"],"kind":"struct"},"16:5346:8120":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:40268:4088":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"30:3354:6989":{"crate_id":30,"path":["rustix","backend","process","types","Resource"],"kind":"enum"},"6:4767:5376":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:5857:5614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:4808:795":{"crate_id":2,"path":["core","iter"],"kind":"module"},"22:5744:42254":{"crate_id":22,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"22:3334:229":{"crate_id":22,"path":["serde","actually_private","T"],"kind":"struct"},"34:2124:5102":{"crate_id":34,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:43809:9048":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:10771:8766":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:11069:22631":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:8166:9323":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:43621:9036":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"34:9752:5933":{"crate_id":34,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"0:27:2875":{"crate_id":0,"path":["textwrap","word_separators","find_words_unicode_break_properties"],"kind":"function"},"22:7820:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"5:5239:15817":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:6865:10245":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"24:1455:6870":{"crate_id":24,"path":["fst","raw","build","BuilderNodeUnfinished"],"kind":"struct"},"31:6111:9574":{"crate_id":31,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"16:7767:22567":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:7538:5493":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"24:1219:26576":{"crate_id":24,"path":["fst","raw","StreamBuilder"],"kind":"struct"},"2:22359:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:7859:22568":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:43631:9037":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"22:6276:42252":{"crate_id":22,"path":["serde","de","impls","deserialize","SeqVisitor"],"kind":"struct"},"24:1335:26562":{"crate_id":24,"path":["fst","stream","Streamer"],"kind":"trait"},"22:1532:10232":{"crate_id":22,"path":["serde","de","OneOf"],"kind":"struct"},"2:6977:3781":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:1700:5093":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:5385:9235":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:43665:8721":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:7148:10421":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:11308:4829":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:9577:7190":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:638:9186":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4970:5489":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4743:5364":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:9038:40922":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:265:4713":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"30:3653:42704":{"crate_id":30,"path":["rustix","backend","time","types","DynamicClockId"],"kind":"enum"},"1:953:8601":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"22:4352:6928":{"crate_id":22,"path":["serde","de","value","F64Deserializer"],"kind":"struct"},"18:96:10265":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13659:7949":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:568:4957":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:2546:8045":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"31:4864:5931":{"crate_id":31,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"17:10142:22708":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:47572:9158":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"25:349:42663":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","_","deserialize","__Visitor"],"kind":"struct"},"16:2298:6844":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"22:409:26541":{"crate_id":22,"path":["serde","de","value","ExpectedInSeq"],"kind":"struct"},"34:7664:5697":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:11813:7466":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"31:7017:6383":{"crate_id":31,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"17:9178:7162":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"24:1690:186":{"crate_id":24,"path":["fst","raw","Output"],"kind":"struct"},"2:6721:10288":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:42031:8750":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"31:7147:27914":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_op"],"kind":"enum"},"2:2856:4466":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"34:1999:5067":{"crate_id":34,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:562:4954":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11372:7381":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:40708:4075":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"0:96:2286":{"crate_id":0,"path":["textwrap","wrap_algorithms","wrap_first_fit"],"kind":"function"},"16:0:3642":{"crate_id":16,"path":["gimli"],"kind":"module"},"34:732:4962":{"crate_id":34,"path":["libc","unix","tms"],"kind":"struct"},"24:531:8665":{"crate_id":24,"path":["fst","inner_set","Stream"],"kind":"struct"},"2:45792:9089":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:1589:8615":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"22:1000:42406":{"crate_id":22,"path":["serde","de","impls","PathBufVisitor"],"kind":"struct"},"2:20841:10681":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:8838:10633":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"0:0:2596":{"crate_id":0,"path":["textwrap"],"kind":"module"},"22:7235:42260":{"crate_id":22,"path":["serde","de","impls","deserialize","TupleVisitor"],"kind":"struct"},"2:40196:4768":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"13:226:9715":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"0:115:3512":{"crate_id":0,"path":["textwrap","core","ch_width"],"kind":"function"},"31:6776:6352":{"crate_id":31,"path":["linux_raw_sys","general","oldold_utsname"],"kind":"struct"},"17:10125:7247":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"31:4894:5957":{"crate_id":31,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"33:142:29405":{"crate_id":33,"path":["io_lifetimes","raw","IntoRawSocketlike"],"kind":"trait"},"17:13015:7766":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:2963:4477":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:2763:4448":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:42695:9002":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"24:606:26580":{"crate_id":24,"path":["fst","inner_set","OpBuilder"],"kind":"struct"},"34:5265:5256":{"crate_id":34,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"31:4788:5942":{"crate_id":31,"path":["linux_raw_sys","general","__user_cap_data_struct"],"kind":"struct"},"17:8979:40921":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:13791:7986":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:12113:7511":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"22:3122:26550":{"crate_id":22,"path":["serde","__private","ser","content","SerializeMap"],"kind":"struct"},"17:12915:7730":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"25:568:6752":{"crate_id":25,"path":["hyphenation_commons","dictionary","Patterns"],"kind":"struct"},"22:2233:41879":{"crate_id":22,"path":["serde","__private","de","content","ContentDeserializer"],"kind":"struct"},"2:44389:9070":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:12501:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:9973:7228":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"11:783:4706":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"34:9614:5925":{"crate_id":34,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:8479:3778":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"31:5301:9519":{"crate_id":31,"path":["linux_raw_sys","general","group_source_req"],"kind":"struct"},"0:22:2874":{"crate_id":0,"path":["textwrap","word_separators","find_words_ascii_space"],"kind":"function"},"34:4793:5131":{"crate_id":34,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:579:4962":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:39334:4473":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"31:0:4499":{"crate_id":31,"path":["linux_raw_sys"],"kind":"module"},"2:2354:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:5370:9234":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:119:16298":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"0:226:1786":{"crate_id":0,"path":["textwrap","wrap_algorithms","WrapAlgorithm"],"kind":"enum"},"2:1747:9749":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:7257:30500":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"31:4921:9497":{"crate_id":31,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"31:7008:6381":{"crate_id":31,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"33:19:29390":{"crate_id":33,"path":["io_lifetimes","portability","AsFilelike"],"kind":"trait"},"2:47706:9165":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"24:1399:6866":{"crate_id":24,"path":["fst","inner_automaton","Union"],"kind":"struct"},"20:175:2296":{"crate_id":20,"path":["hyphenation","load","Load"],"kind":"trait"},"22:5900:42254":{"crate_id":22,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"31:6092:9566":{"crate_id":31,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"11:2087:8605":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:6431:8251":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"24:1039:6867":{"crate_id":24,"path":["fst","raw","ops","Intersection"],"kind":"struct"},"1:10138:9913":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4875:5430":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:42666:8997":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:7659:10411":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"31:4753:5935":{"crate_id":31,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"21:311:1791":{"crate_id":21,"path":["bincode","config","Options"],"kind":"trait"},"6:5717:5536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:21839:38042":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"0:157:660":{"crate_id":0,"path":["textwrap","fill"],"kind":"function"},"1:9033:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:41345:9219":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4980:5494":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"24:1365:6861":{"crate_id":24,"path":["fst","inner_automaton","Str"],"kind":"struct"},"5:1981:8687":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:10670:7322":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"34:7920:5747":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:6110:5721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:7060:8703":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:4480:8099":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:3585:8089":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"34:5532:5316":{"crate_id":34,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"30:2425:6559":{"crate_id":30,"path":["rustix","backend","io","epoll","EventFlags"],"kind":"struct"},"6:4751:5368":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5988:5695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"11:768:4701":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"20:260:6977":{"crate_id":20,"path":["hyphenation","hyphenator","Prepared"],"kind":"struct"},"2:41243:8742":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:595:4972":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:3975:4733":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"23:0:3770":{"crate_id":23,"path":["serde_derive"],"kind":"module"},"5:3276:4701":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"34:2068:5092":{"crate_id":34,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:20729:10677":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:7263:3822":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"31:5661:9564":{"crate_id":31,"path":["linux_raw_sys","general","ipv6hdr__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"16:6919:40914":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"22:6055:42258":{"crate_id":22,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"2:40315:4100":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:9796:7209":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11573:7409":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:1404:8594":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:47695:9164":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:582:3983":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"34:9578:5923":{"crate_id":34,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"34:5413:5297":{"crate_id":34,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"34:6082:5436":{"crate_id":34,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:11446:7390":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"14:31:8583":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"25:688:42582":{"crate_id":25,"path":["hyphenation_commons","dictionary","_","deserialize","__Field"],"kind":"enum"},"34:7843:5721":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:40277:4089":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"30:2829:6564":{"crate_id":30,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"30:4582:42713":{"crate_id":30,"path":["rustix","process","prctl","MachineCheckMemoryCorruptionKillPolicy"],"kind":"enum"},"34:6357:9473":{"crate_id":34,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"34:5034:5208":{"crate_id":34,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"31:6190:6205":{"crate_id":31,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"1:4903:10589":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"28:0:2598":{"crate_id":28,"path":["unicode_width"],"kind":"module"},"1:3987:10538":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"22:5838:42258":{"crate_id":22,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"34:9596:5924":{"crate_id":34,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:45592:9081":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"31:6478:6255":{"crate_id":31,"path":["linux_raw_sys","general","tcp_info"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"30:3122:6567":{"crate_id":30,"path":["rustix","backend","io","types","PipeFlags"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:3088:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2932:3821":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:1382:4010":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:8208:9219":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:1242:8609":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"14:7:8583":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4294:5122":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:1728:5106":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"0:194:2855":{"crate_id":0,"path":["textwrap","word_splitters","WordSplitter","Custom"],"kind":"variant"},"1:11886:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:6578:5777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"21:1200:6962":{"crate_id":21,"path":["bincode","config","legacy","Config"],"kind":"struct"},"16:2502:8043":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:1356:128":{"crate_id":24,"path":["fst","error","Error"],"kind":"enum"},"34:5221:5242":{"crate_id":34,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"34:8640:5820":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"34:5382:5282":{"crate_id":34,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"34:1796:4994":{"crate_id":34,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:43946:9051":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:3355:4738":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"25:204:42664":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","_","deserialize","__FieldVisitor"],"kind":"struct"},"34:628:4943":{"crate_id":34,"path":["libc","unix","iovec"],"kind":"struct"},"20:270:6979":{"crate_id":20,"path":["hyphenation","iter","Hyphenating"],"kind":"struct"},"34:8859:5899":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:12634:7609":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:47666:9161":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:5058:5533":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:6800:5883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11355:7380":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:23037:8713":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"31:6890:27912":{"crate_id":31,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"34:9344:5921":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:9322:40929":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"31:7753:6545":{"crate_id":31,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"2:9149:3805":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:6586:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"30:3218:6568":{"crate_id":30,"path":["rustix","backend","io","types","EventfdFlags"],"kind":"struct"},"34:808:16299":{"crate_id":34,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:4445:8098":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:22557:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"31:6688:5593":{"crate_id":31,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"17:13678:7955":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:20742:10678":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"5:1058:39419":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:4865:5424":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:9917:6842":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:2788:4455":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12098:7508":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12563:7599":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:41332:8987":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:2524:8044":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:6373:9247":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:4137:4738":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:6695:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"31:5972:4912":{"crate_id":31,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"17:11844:7472":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6488:8253":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"31:5859:27905":{"crate_id":31,"path":["linux_raw_sys","general","socket_state"],"kind":"enum"},"25:462:6757":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","Builder"],"kind":"struct"},"31:7041:6386":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:45938:9093":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"34:7248:5579":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:11653:7432":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:44273:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:9142:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:4760:10545":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:40246:4087":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10761:22627":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:44104:9839":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:2319:8029":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:5686:9239":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4757:5370":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11785:7460":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:13419:7869":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:46652:9119":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"30:4826:6693":{"crate_id":30,"path":["rustix","process","prctl","SpeculationFeatureState"],"kind":"struct"},"17:11556:7401":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"31:7111:27913":{"crate_id":31,"path":["linux_raw_sys","general","_bindgen_ty_7"],"kind":"enum"},"25:654:42663":{"crate_id":25,"path":["hyphenation_commons","dictionary","_","deserialize","__Visitor"],"kind":"struct"},"31:5112:6001":{"crate_id":31,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"30:3768:6649":{"crate_id":30,"path":["rustix","backend","time","types","TimerfdTimerFlags"],"kind":"struct"},"31:7034:9611":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_1"],"kind":"union"},"2:2851:4465":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:1978:7063":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"31:5918:6170":{"crate_id":31,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"2:20596:39254":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:280:2856":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:4624:8104":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:5773:5576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"22:3165:42018":{"crate_id":22,"path":["serde","__private","ser","FlatMapSerializer"],"kind":"struct"},"1:6757:10666":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"22:238:6909":{"crate_id":22,"path":["serde","de","value","BorrowedStrDeserializer"],"kind":"struct"},"2:10092:8758":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:3266:7067":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:2706:3796":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"12:0:3639":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"34:715:4959":{"crate_id":34,"path":["libc","unix","itimerval"],"kind":"struct"},"31:5119:6002":{"crate_id":31,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"24:1060:8615":{"crate_id":24,"path":["fst","raw","ops","SymmetricDifference"],"kind":"struct"},"6:6706:5820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:7255:8711":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:675:8592":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:7014:4733":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"33:147:29406":{"crate_id":33,"path":["io_lifetimes","raw","FromRawFilelike"],"kind":"trait"},"24:1297:26578":{"crate_id":24,"path":["fst","raw","StreamWithState"],"kind":"struct"},"16:7519:8435":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:40042:8721":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12194:7522":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:7366:22565":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:4042:15800":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"22:1395:26532":{"crate_id":22,"path":["serde","de","Visitor"],"kind":"trait"},"6:62:16249":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:40022:8956":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"34:9690:5493":{"crate_id":34,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:11906:1496":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:7165:4084":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"11:452:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:6585:2026":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"22:1199:42404":{"crate_id":22,"path":["serde","de","impls","deserialize","BoundVisitor"],"kind":"struct"},"2:45622:9082":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"24:560:26576":{"crate_id":24,"path":["fst","inner_set","StreamBuilder"],"kind":"struct"},"17:9350:40925":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:4564:10535":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:11072:9851":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:7211:3823":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"22:9654:128":{"crate_id":22,"path":["serde","__private","doc","Error"],"kind":"struct"},"34:5072:5214":{"crate_id":34,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:4104:10291":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:8160:9321":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:1432:8592":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"31:7388:6465":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_params"],"kind":"struct"},"31:6199:9588":{"crate_id":31,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"6:4667:5327":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:6254:8236":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:43561:9033":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"22:7330:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"2:4761:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:21803:8791":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:40206:8967":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:5870:5620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"34:5988:5416":{"crate_id":34,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:1034:7056":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:9907:7222":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:21561:10671":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:4207:3778":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4719:5351":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"22:1879:26550":{"crate_id":22,"path":["serde","ser","SerializeMap"],"kind":"trait"},"22:2168:41894":{"crate_id":22,"path":["serde","__private","de","content","TaggedContentVisitor"],"kind":"struct"},"16:5998:22558":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"29:0:1617":{"crate_id":29,"path":["terminal_size"],"kind":"module"},"15:0:3641":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:7942:10516":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:41380:8744":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:3225:8086":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"34:7439:5620":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10491:7298":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:8907:9354":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"25:166:6747":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","Tally"],"kind":"struct"},"2:46446:9116":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"31:7078:9634":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_4"],"kind":"union"},"2:42403:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"34:6168:5466":{"crate_id":34,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:1564:5000":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:4576:5800":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"0:116:2019":{"crate_id":0,"path":["textwrap","core","display_width"],"kind":"function"},"2:21337:10683":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:30266:4404":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:8838:37987":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4609:5298":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10452:7295":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:2753:3765":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4439:5214":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4423:5208":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:3383:9324":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:5811:8145":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12449:7578":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"11:828:10422":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"20:34:3035":{"crate_id":20,"path":["hyphenation","hyphenator","Hyphenator"],"kind":"trait"},"22:3336:128":{"crate_id":22,"path":["serde","de","value","Error"],"kind":"struct"},"34:5760:5370":{"crate_id":34,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:6764:4763":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:1568:4733":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"22:8403:42168":{"crate_id":22,"path":["serde","de","impls","OsStringKind"],"kind":"enum"},"14:187:21652":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"24:1675:6903":{"crate_id":24,"path":["fst","raw","StreamState"],"kind":"struct"},"0:11:1781":{"crate_id":0,"path":["textwrap","word_separators"],"kind":"module"},"31:5266:4981":{"crate_id":31,"path":["linux_raw_sys","general","ip_mreqn"],"kind":"struct"},"16:5886:8155":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"24:153:26584":{"crate_id":24,"path":["fst","inner_automaton","ComplementState"],"kind":"struct"},"2:43640:9038":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"5:3753:4701":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"31:6971:6374":{"crate_id":31,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"6:7275:5921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:9986:7229":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"22:1158:42407":{"crate_id":22,"path":["serde","de","impls","range","RangeVisitor"],"kind":"struct"},"5:4366:4738":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:42167:3814":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:2245:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:6943:22563":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:3030:8083":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:5862:5615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:7595:9263":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:21443:38911":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:4486:5236":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:1577:6867":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"22:3108:26549":{"crate_id":22,"path":["serde","__private","ser","content","SerializeTupleVariant"],"kind":"struct"},"2:2843:4463":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"31:6375:6233":{"crate_id":31,"path":["linux_raw_sys","general","tcp_repair_opt"],"kind":"struct"},"17:10354:7285":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"18:624:40932":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:1080:8609":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:4757:8107":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:7526:5491":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"31:4834:5952":{"crate_id":31,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"34:1981:5063":{"crate_id":34,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:7338:4754":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:21952:8809":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:840:8599":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:500:4914":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:4327:8096":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:7791:9273":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:2360:10479":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"20:297:6983":{"crate_id":20,"path":["hyphenation","iter","SegmentsExt"],"kind":"struct"},"25:433:42664":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","_","deserialize","__FieldVisitor"],"kind":"struct"},"31:4719:5937":{"crate_id":31,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"17:11585:7412":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:9098:7160":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:11162:9254":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"31:5340:5364":{"crate_id":31,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"22:7771:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"6:6651:5806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:9985:8610":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:11461:8774":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:40121:8965":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:2684:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:3673:8687":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:2636:9747":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"22:512:26542":{"crate_id":22,"path":["serde","de","value","PairDeserializer"],"kind":"struct"},"1:4256:9221":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"34:560:4917":{"crate_id":34,"path":["libc","unix","rusage"],"kind":"struct"},"16:2404:8039":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"22:5692:42254":{"crate_id":22,"path":["serde","de","impls","deserialize","PrimitiveVisitor"],"kind":"struct"},"1:5693:9242":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:10428:7293":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:857:8610":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:6327:8242":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:8214:8403":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4698:5339":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:531:6998":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:8389:22619":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"22:1259:42421":{"crate_id":22,"path":["serde","de","impls","FromStrVisitor"],"kind":"struct"},"1:11908:1498":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:41260:10526":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:5104:8118":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"31:6643:9597":{"crate_id":31,"path":["linux_raw_sys","general","tcp_md5sig"],"kind":"struct"},"0:183:2855":{"crate_id":0,"path":["textwrap","word_separators","WordSeparator","Custom"],"kind":"variant"},"17:11299:7377":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"31:6383:6236":{"crate_id":31,"path":["linux_raw_sys","general","tcp_repair_window"],"kind":"struct"},"16:5616:8123":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:8854:10632":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:11237:9852":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"11:1050:21640":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:6544:8069":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:10462:4823":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:13219:7816":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:8226:9326":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"24:1480:6875":{"crate_id":24,"path":["fst","raw","crc32","CheckSummer"],"kind":"struct"},"6:4890:5436":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:154:4692":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:4416:5204":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"31:6323:9596":{"crate_id":31,"path":["linux_raw_sys","general","tcp_word_hdr"],"kind":"union"},"1:10702:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"22:2341:41996":{"crate_id":22,"path":["serde","__private","de","content","VariantDeserializer"],"kind":"struct"},"1:8730:9346":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"31:4771:5940":{"crate_id":31,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"31:5289:6039":{"crate_id":31,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"31:7598:6516":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_probe"],"kind":"struct"},"1:3449:31897":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:43163:9014":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:3782:9218":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13689:7956":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:7683:8080":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"31:4927:9500":{"crate_id":31,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"22:2516:41994":{"crate_id":22,"path":["serde","__private","de","content","VariantRefDeserializer"],"kind":"struct"},"2:2701:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"34:7201:5563":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"34:8877:5903":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"31:6842:27911":{"crate_id":31,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"31:7084:9637":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_5"],"kind":"union"},"30:4110:6658":{"crate_id":30,"path":["rustix","process","pidfd","PidfdFlags"],"kind":"struct"},"17:8598:22626":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"31:6926:9607":{"crate_id":31,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"17:13257:7824":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:10419:9208":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:6685:5813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:21787:9752":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:2603:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:5556:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7103:9364":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:6201:8218":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:9826:7211":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"22:1320:26531":{"crate_id":22,"path":["serde","de","DeserializeSeed"],"kind":"trait"},"30:4399:6664":{"crate_id":30,"path":["rustix","process","prctl","FloatingPointExceptionMode"],"kind":"struct"},"6:1682:5086":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"33:47:29394":{"crate_id":33,"path":["io_lifetimes","portability","FromFilelike"],"kind":"trait"},"17:9424:7173":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:7808:9275":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"34:5838:5390":{"crate_id":34,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:1437:4104":{"crate_id":24,"path":["fst","inner_map","Map"],"kind":"struct"},"2:20579:39251":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:6598:5783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12510:7593":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:5880:5627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:6482:9248":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"21:32:26504":{"crate_id":21,"path":["bincode","config","endian","BincodeByteOrder"],"kind":"trait"},"2:46370:9114":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"34:8372:5771":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:42658:8995":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"22:5630:42258":{"crate_id":22,"path":["serde","de","impls","deserialize","NonZeroVisitor"],"kind":"struct"},"22:7431:42257":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","TupleInPlaceVisitor"],"kind":"struct"},"1:6409:4813":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"22:4610:6931":{"crate_id":22,"path":["serde","de","value","U128Deserializer"],"kind":"struct"},"2:40133:38039":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"34:6246:5483":{"crate_id":34,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:7497:5925":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12419:7572":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:41951:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"34:7700:5701":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:9043:9252":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:40399:4106":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:10743:7332":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"25:362:6755":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","Exceptions"],"kind":"struct"},"27:0:1620":{"crate_id":27,"path":["smawk"],"kind":"module"},"1:7693:9271":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:9696:7183":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"30:4564:42714":{"crate_id":30,"path":["rustix","process","prctl","TimeStampCounterReadability"],"kind":"enum"},"22:668:8667":{"crate_id":22,"path":["serde","de","format","Buf"],"kind":"struct"},"2:45413:9074":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:43956:9055":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"31:7567:6510":{"crate_id":31,"path":["linux_raw_sys","general","io_uring_notification_slot"],"kind":"struct"},"2:45491:9077":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:9108:40923":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:5809:5589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"34:6024:5424":{"crate_id":34,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:10705:7325":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:2847:4464":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:40338:4102":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:10465:7296":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"31:5133:9514":{"crate_id":31,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1"],"kind":"union"},"31:6086:4957":{"crate_id":31,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"22:8318:42268":{"crate_id":22,"path":["serde","de","impls","deserialize","EnumVisitor"],"kind":"struct"},"18:736:26473":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"0:113:2806":{"crate_id":0,"path":["textwrap","core","skip_ansi_escape_sequence"],"kind":"function"},"17:10015:7234":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"20:113:3778":{"crate_id":20,"path":["hyphenation","iter","Iter"],"kind":"trait"},"22:6227:42251":{"crate_id":22,"path":["serde","de","impls","deserialize_in_place","SeqInPlaceVisitor"],"kind":"struct"},"0:48:2180":{"crate_id":0,"path":["textwrap","word_splitters","split_words"],"kind":"function"},"17:10635:7317":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:5439:9236":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:12126:7512":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:12282:7553":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"34:5666:5351":{"crate_id":34,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"31:5258:4978":{"crate_id":31,"path":["linux_raw_sys","general","ip_mreq"],"kind":"struct"},"1:9386:4821":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:3142:7066":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"31:6818:6354":{"crate_id":31,"path":["linux_raw_sys","general","new_utsname"],"kind":"struct"},"2:8675:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:7460:6731":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:3622:4713":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:20768:37639":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"31:4797:5946":{"crate_id":31,"path":["linux_raw_sys","general","vfs_cap_data"],"kind":"struct"},"4:0:3634":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"34:5971:5414":{"crate_id":34,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"34:467:16249":{"crate_id":34,"path":["libc","unix","DIR"],"kind":"enum"},"34:5557:5327":{"crate_id":34,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"0:232:2855":{"crate_id":0,"path":["textwrap","wrap_algorithms","WrapAlgorithm","Custom"],"kind":"variant"},"22:1890:26551":{"crate_id":22,"path":["serde","ser","SerializeStruct"],"kind":"trait"},"1:911:4701":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"31:6042:5477":{"crate_id":31,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"17:12959:7760":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:6180:4752":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:8283:22616":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"31:4934:9501":{"crate_id":31,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"18:481:6992":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11422:7386":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:9523:7185":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:7240:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10516:7300":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:11712:15831":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"34:8454:5787":{"crate_id":34,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:279:9717":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:46014:9096":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:9498:7183":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"25:402:6756":{"crate_id":25,"path":["hyphenation_commons","dictionary","extended","Extended"],"kind":"struct"},"17:11993:7492":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11136:7358":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:7437:8422":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:47214:9153":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"25:532:42582":{"crate_id":25,"path":["hyphenation_commons","dictionary","_","deserialize","__Field"],"kind":"enum"}},"external_crates":{"34":{"name":"libc","html_root_url":null},"31":{"name":"linux_raw_sys","html_root_url":null},"28":{"name":"unicode_width","html_root_url":null},"25":{"name":"hyphenation_commons","html_root_url":null},"22":{"name":"serde","html_root_url":"https://docs.rs/serde/1.0.143/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/1.3.2/"},"29":{"name":"terminal_size","html_root_url":null},"26":{"name":"unicode_linebreak","html_root_url":null},"23":{"name":"serde_derive","html_root_url":"https://docs.rs/serde_derive/1.0.143/"},"20":{"name":"hyphenation","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"io_lifetimes","html_root_url":null},"30":{"name":"rustix","html_root_url":null},"27":{"name":"smawk","html_root_url":"https://docs.rs/smawk/0.3.1/"},"24":{"name":"fst","html_root_url":null},"21":{"name":"bincode","html_root_url":"https://docs.rs/bincode/1.3.3/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}