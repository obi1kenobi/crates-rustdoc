{"root":"0:0:1707","crate_version":"0.10.6","includes_private":true,"index":{"1:12099:35406":{"id":"1:12099:35406","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12043:27790":{"id":"1:12043:27790","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:11888:419","self::pattern":"1:11712:11063"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:684-0:132:1681":{"id":"b:5:684-0:132:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:686:9648","5:687:27341","5:688:27342"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12093:35404":{"id":"1:12093:35404","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11712:11063","`DoubleEndedIterator`":"1:7240:121","prim@char":"6:11888:419","str::rmatch_indices":"1:12096:35405"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43507:9773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5383:36078":{"id":"5:5383:36078","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1985","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:9007","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:1985","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:9007","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:11001-0:132:1681":{"id":"a:1:8249:11001-0:132:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:11001","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2541:5899":{"id":"1:2541:5899","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2515:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:1841":{"id":"0:70:1841","crate_id":0,"name":"BufferKind","span":{"filename":"sha2/src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:104:1698":{"id":"0:104:1698","crate_id":0,"name":"Sha256","span":{"filename":"sha2/src/lib.rs","begin":[87,0],"end":[87,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"CoreWrapper","id":"4:507:1674","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CtVariableCoreWrapper","id":"4:488:1675","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"U32","id":"24:2490:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:250:1683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12046:34209":{"id":"1:12046:34209","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:11888:419","self::pattern":"1:11712:11063"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12012:5906":{"id":"1:12012:5906","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12101:35407":{"id":"1:12101:35407","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5384:10845":{"id":"5:5384:10845","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:132:1681":{"id":"b:1:2251-0:132:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2253:27337"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:344:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:54:1842"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:139:1839":{"id":"0:139:1839","crate_id":0,"name":"block_len","span":{"filename":"sha2/src/core_api.rs","begin":[92,4],"end":[92,19]},"visibility":{"restricted":{"parent":"0:20:1673","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u128"}}},"0:145:1286":{"id":"0:145:1286","crate_id":0,"name":"shl","span":{"filename":"sha2/src/sha256/soft.rs","begin":[6,0],"end":[8,1]},"visibility":{"restricted":{"parent":"0:142:1371","path":"::sha256::soft"}},"docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"array":{"type":{"primitive":"u32"},"len":"4"}}],["o",{"primitive":"u32"}]],"output":{"array":{"type":{"primitive":"u32"},"len":"4"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:5445":{"id":"0:111:5445","crate_id":0,"name":"BLOCK_LEN","span":{"filename":"sha2/src/consts.rs","begin":[4,0],"end":[4,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"usize"},"expr":"16","value":"16usize","is_literal":true}}},"0:177:5755":{"id":"0:177:5755","crate_id":0,"name":"sha256msg2","span":{"filename":"sha2/src/sha256/soft.rs","begin":[56,0],"end":[72,1]},"visibility":{"restricted":{"parent":"0:142:1371","path":"::sha256::soft"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v4",{"array":{"type":{"primitive":"u32"},"len":"4"}}],["v3",{"array":{"type":{"primitive":"u32"},"len":"4"}}]],"output":{"array":{"type":{"primitive":"u32"},"len":"4"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12132:34068":{"id":"1:12132:34068","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12130:34065":{"id":"1:12130:34065","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:1384":{"id":"0:138:1384","crate_id":0,"name":"state","span":{"filename":"sha2/src/core_api.rs","begin":[91,4],"end":[91,27]},"visibility":{"restricted":{"parent":"0:20:1673","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"array":{"type":{"primitive":"u64"},"len":"8"}}}},"0:107:1704":{"id":"0:107:1704","crate_id":0,"name":"Sha384","span":{"filename":"sha2/src/lib.rs","begin":[93,0],"end":[93,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"CoreWrapper","id":"4:507:1674","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CtVariableCoreWrapper","id":"4:488:1675","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"U48","id":"24:2538:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:268:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12033:34192":{"id":"1:12033:34192","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12034:34193"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:1618":{"id":"0:202:1618","crate_id":0,"name":"compress","span":{"filename":"sha2/src/sha256/soft.rs","begin":[206,0],"end":[218,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u32"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"64"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1678":{"id":"0:91:1678","crate_id":0,"name":"sha512","span":{"filename":"sha2/src/sha512.rs","begin":[1,0],"end":[35,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:207:1371","0:95:1680"],"is_stripped":false}}},"0:102-0:137:1682":{"id":"0:102-0:137:1682","crate_id":0,"name":null,"span":{"filename":"sha2/src/lib.rs","begin":[75,34],"end":[75,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:137:1682","glob":false}}},"0:134:1839":{"id":"0:134:1839","crate_id":0,"name":"block_len","span":{"filename":"sha2/src/core_api.rs","begin":[20,4],"end":[20,18]},"visibility":{"restricted":{"parent":"0:20:1673","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u64"}}},"0:142:1371":{"id":"0:142:1371","crate_id":0,"name":"soft","span":{"filename":"sha2/src/sha256/soft.rs","begin":[1,0],"end":[218,1]},"visibility":{"restricted":{"parent":"0:84:1677","path":"::sha256"}},"docs":null,"links":{},"attrs":["#![allow(clippy :: many_single_char_names)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:145:1286","0:148:1289","0:151:1005","0:155:5743","0:159:274","0:163:5744","0:167:5747","0:170:5749","0:177:5755","0:182:5768","0:191:5801","0:197:5802","0:198:5803","0:199:5810","0:202:1618"],"is_stripped":false}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:141:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2548-0:137:1682":{"id":"b:1:2548-0:137:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:5512":{"id":"0:118:5512","crate_id":0,"name":"K32X4","span":{"filename":"sha2/src/consts.rs","begin":[22,0],"end":[39,2]},"visibility":"public","docs":"Constants necessary for SHA-256 family of digests.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"array":{"type":{"array":{"type":{"primitive":"u32"},"len":"4"}},"len":"16"}},"expr":"_","value":null,"is_literal":false}}},"0:54:1842":{"id":"0:54:1842","crate_id":0,"name":"update_blocks","span":{"filename":"sha2/src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1822","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:132:1681":{"id":"b:1:2538-0:132:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2541:5899"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3319-0:132:1681":{"id":"b:1:3319-0:132:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2548-0:132:1681":{"id":"b:1:2548-0:132:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:50:1840"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2248-0:137:1682":{"id":"b:1:2248-0:137:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2250:1895"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2251-0:137:1682":{"id":"b:1:2251-0:137:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2253:27337"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:81:1863":{"id":"0:81:1863","crate_id":0,"name":"write_alg_name","span":{"filename":"sha2/src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:5747":{"id":"0:167:5747","crate_id":0,"name":"sha256swap","span":{"filename":"sha2/src/sha256/soft.rs","begin":[39,0],"end":[41,1]},"visibility":{"restricted":{"parent":"0:142:1371","path":"::sha256::soft"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v0",{"array":{"type":{"primitive":"u32"},"len":"4"}}]],"output":{"array":{"type":{"primitive":"u32"},"len":"4"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99-0:95:1680":{"id":"0:99-0:95:1680","crate_id":0,"name":null,"span":{"filename":"sha2/src/lib.rs","begin":[73,0],"end":[73,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"compress\")]"],"deprecation":null,"inner":{"import":{"source":"sha512::compress512","name":"compress512","id":"0:95:1680","glob":false}}},"0:129:1870":{"id":"0:129:1870","crate_id":0,"name":"H512_256","span":{"filename":"sha2/src/consts.rs","begin":[94,0],"end":[97,2]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"array":{"type":{"primitive":"u64"},"len":"8"}},"expr":"_","value":null,"is_literal":false}}},"0:105:1700":{"id":"0:105:1700","crate_id":0,"name":"Sha512_224","span":{"filename":"sha2/src/lib.rs","begin":[89,0],"end":[89,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"CoreWrapper","id":"4:507:1674","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CtVariableCoreWrapper","id":"4:488:1675","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"U28","id":"24:2478:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:322:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:52:1841":{"id":"0:52:1841","crate_id":0,"name":"BufferKind","span":{"filename":"sha2/src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"24:1161:186":{"id":"24:1161:186","crate_id":24,"name":"Output","span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.15.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:95:1680":{"id":"0:95:1680","crate_id":0,"name":"compress512","span":{"filename":"sha2/src/sha512.rs","begin":[29,0],"end":[35,1]},"visibility":"public","docs":"Raw SHA-512 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-512.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u64"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"GenericArray","id":"23:403:1877","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}},{"type":{"resolved_path":{"name":"U128","id":"24:2778:1832","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:688:27342":{"id":"5:688:27342","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12031:35395":{"id":"1:12031:35395","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:11894:1397","str::slice_mut_unchecked":"1:12032:35396","crate::ops::Index":"1:2981:10889"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12032:35396":{"id":"1:12032:35396","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:11894:1397","crate::ops::IndexMut":"1:2985:10890","str::slice_unchecked":"1:12031:35395"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12037:6072":{"id":"1:12037:6072","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43343:6588","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:355:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:1845","0:77:939","0:78:1850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2701:228-0:137:1682":{"id":"a:1:2701:228-0:137:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12060:34200":{"id":"1:12060:34200","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11712:11063","`DoubleEndedIterator`":"1:7240:121","prim@char":"6:11888:419","str::split_whitespace":"1:12038:29928","str::rsplit":"1:12066:34203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43357:5321","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1842":{"id":"0:72:1842","crate_id":0,"name":"update_blocks","span":{"filename":"sha2/src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1822","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1849":{"id":"0:127:1849","crate_id":0,"name":"H256_256","span":{"filename":"sha2/src/consts.rs","begin":[84,0],"end":[87,2]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"array":{"type":{"primitive":"u32"},"len":"8"}},"expr":"_","value":null,"is_literal":false}}},"1:3321:1491":{"id":"1:3321:1491","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39341:9116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1673":{"id":"0:20:1673","crate_id":0,"name":"core_api","span":{"filename":"sha2/src/core_api.rs","begin":[1,0],"end":[157,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:132:1681","0:137:1682"],"is_stripped":false}}},"1:2551:128":{"id":"1:2551:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:198:5803":{"id":"0:198:5803","crate_id":0,"name":"schedule_rounds4","span":{"filename":"sha2/src/sha256/soft.rs","begin":[153,0],"end":[162,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"macro":"macro_rules! schedule_rounds4 {\n    (\n        $abef:ident, $cdgh:ident,\n        $w0:expr, $w1:expr, $w2:expr, $w3:expr, $w4:expr,\n        $i: expr\n    ) => { ... };\n}"}},"0:121:5564":{"id":"0:121:5564","crate_id":0,"name":"K64","span":{"filename":"sha2/src/consts.rs","begin":[42,0],"end":[63,2]},"visibility":"public","docs":"Constants necessary for SHA-512 family of digests.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"array":{"type":{"primitive":"u64"},"len":"80"}},"expr":"_","value":null,"is_literal":false}}},"1:12066:34203":{"id":"1:12066:34203","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11712:11063","`DoubleEndedIterator`":"1:7240:121","prim@char":"6:11888:419","str::split":"1:12060:34200"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43375:5325","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:11069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:1863":{"id":"0:63:1863","crate_id":0,"name":"write_alg_name","span":{"filename":"sha2/src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12106:35410":{"id":"1:12106:35410","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12107:35411":{"id":"1:12107:35411","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:11888:419","self::pattern":"1:11712:11063"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11737:11068","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12133:34069":{"id":"1:12133:34069","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:137:1682":{"id":"b:1:2542-0:137:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5399:36082":{"id":"5:5399:36082","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:280:1985","`String`":"5:7241:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1985","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:9007","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5400:10980":{"id":"5:5400:10980","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12103:35408":{"id":"1:12103:35408","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1840":{"id":"0:68:1840","crate_id":0,"name":"BlockSize","span":{"filename":"sha2/src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6318:5271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5694:5275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:2544:694":{"id":"1:2544:694","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:137:1682":{"id":"b:1:2553-0:137:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:344:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:72:1842"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77:939":{"id":"0:77:939","crate_id":0,"name":"new","span":{"filename":"sha2/src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:537:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2248-0:132:1681":{"id":"b:1:2248-0:132:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2250:1895"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78:1850":{"id":"0:78:1850","crate_id":0,"name":"finalize_variable_core","span":{"filename":"sha2/src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:342:1824","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:137:1682":{"id":"b:1:3319-0:137:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:355:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:58:1845","0:59:939","0:60:1850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:130:1872":{"id":"0:130:1872","crate_id":0,"name":"H512_384","span":{"filename":"sha2/src/consts.rs","begin":[99,0],"end":[102,2]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"array":{"type":{"primitive":"u64"},"len":"8"}},"expr":"_","value":null,"is_literal":false}}},"0:163:5744":{"id":"0:163:5744","crate_id":0,"name":"sha256load","span":{"filename":"sha2/src/sha256/soft.rs","begin":[35,0],"end":[37,1]},"visibility":{"restricted":{"parent":"0:142:1371","path":"::sha256::soft"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v2",{"array":{"type":{"primitive":"u32"},"len":"4"}}],["v3",{"array":{"type":{"primitive":"u32"},"len":"4"}}]],"output":{"array":{"type":{"primitive":"u32"},"len":"4"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:5749":{"id":"0:170:5749","crate_id":0,"name":"sha256msg1","span":{"filename":"sha2/src/sha256/soft.rs","begin":[43,0],"end":[54,1]},"visibility":{"restricted":{"parent":"0:142:1371","path":"::sha256::soft"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v0",{"array":{"type":{"primitive":"u32"},"len":"4"}}],["v1",{"array":{"type":{"primitive":"u32"},"len":"4"}}]],"output":{"array":{"type":{"primitive":"u32"},"len":"4"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:5810":{"id":"0:199:5810","crate_id":0,"name":"sha256_digest_block_u32","span":{"filename":"sha2/src/sha256/soft.rs","begin":[165,0],"end":[204,1]},"visibility":{"restricted":{"parent":"0:142:1371","path":"::sha256::soft"}},"docs":"Process a block with the SHA-256 algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u32"},"len":"8"}}}}],["block",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u32"},"len":"16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:1677":{"id":"0:84:1677","crate_id":0,"name":"sha256","span":{"filename":"sha2/src/sha256.rs","begin":[1,0],"end":[37,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:142:1371","0:88:1679"],"is_stripped":false}}},"0:197:5802":{"id":"0:197:5802","crate_id":0,"name":"rounds4","span":{"filename":"sha2/src/sha256/soft.rs","begin":[144,0],"end":[151,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"macro":"macro_rules! rounds4 {\n    ($abef:ident, $cdgh:ident, $rest:expr, $i:expr) => { ... };\n}"}},"0:212:274":{"id":"0:212:274","crate_id":0,"name":"add","span":{"filename":"sha2/src/sha512/soft.rs","begin":[5,0],"end":[7,1]},"visibility":{"restricted":{"parent":"0:207:1371","path":"::sha512::soft"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"array":{"type":{"primitive":"u64"},"len":"2"}}],["b",{"array":{"type":{"primitive":"u64"},"len":"2"}}]],"output":{"array":{"type":{"primitive":"u64"},"len":"2"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12042:29933":{"id":"1:12042:29933","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43649:9782","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12025:10526":{"id":"1:12025:10526","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12038:29928":{"id":"1:12038:29928","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12039:29919"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43631:9780","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:243:1618":{"id":"0:243:1618","crate_id":0,"name":"compress","span":{"filename":"sha2/src/sha512/soft.rs","begin":[203,0],"end":[215,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u64"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"128"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12119:35413":{"id":"1:12119:35413","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11888:419","self::pattern":"1:11712:11063"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:11069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:5646":{"id":"0:123:5646","crate_id":0,"name":"K64X2","span":{"filename":"sha2/src/consts.rs","begin":[66,0],"end":[77,2]},"visibility":"public","docs":"Constants necessary for SHA-512 family of digests.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"array":{"type":{"array":{"type":{"primitive":"u64"},"len":"2"}},"len":"40"}},"expr":"_","value":null,"is_literal":false}}},"b:5:684-0:137:1682":{"id":"b:5:684-0:137:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:686:9648","5:687:27341","5:688:27342"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:114:1868":{"id":"0:114:1868","crate_id":0,"name":"State512","span":{"filename":"sha2/src/consts.rs","begin":[7,0],"end":[7,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"array":{"type":{"primitive":"u64"},"len":"8"}},"generics":{"params":[],"where_predicates":[]}}}},"0:228:5828":{"id":"0:228:5828","crate_id":0,"name":"sha512_digest_round","span":{"filename":"sha2/src/sha512/soft.rs","begin":[44,0],"end":[95,1]},"visibility":"public","docs":"Performs one round of the SHA-512 message block digest.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ae",{"array":{"type":{"primitive":"u64"},"len":"2"}}],["bf",{"array":{"type":{"primitive":"u64"},"len":"2"}}],["cg",{"array":{"type":{"primitive":"u64"},"len":"2"}}],["dh",{"array":{"type":{"primitive":"u64"},"len":"2"}}],["wk0",{"primitive":"u64"}]],"output":{"array":{"type":{"primitive":"u64"},"len":"2"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12116:34212":{"id":"1:12116:34212","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11888:419","self::pattern":"1:11712:11063"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:11069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12122:35414":{"id":"1:12122:35414","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11888:419","self::pattern":"1:11712:11063"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2556:128":{"id":"1:2556:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32020:5857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:1840"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12128:35416":{"id":"1:12128:35416","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11673:127","`FromStr`":"1:11672:1995"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11672:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11672:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:423":{"id":"0:141:423","crate_id":0,"name":"clone","span":{"filename":"sha2/src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:1845":{"id":"0:76:1845","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"sha2/src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:527:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:12056:5905":{"id":"1:12056:5905","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41396:179","prim@char":"6:11888:419","self::pattern":"1:11712:11063"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:11069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12110:35412":{"id":"1:12110:35412","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11888:419","self::pattern":"1:11712:11063"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12125:35415":{"id":"1:12125:35415","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11888:419","self::pattern":"1:11712:11063"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:11069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:5711-0:132:1681":{"id":"a:1:2741:5711-0:132:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:5711","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:159:274":{"id":"0:159:274","crate_id":0,"name":"add","span":{"filename":"sha2/src/sha256/soft.rs","begin":[26,0],"end":[33,1]},"visibility":{"restricted":{"parent":"0:142:1371","path":"::sha256::soft"}},"docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"array":{"type":{"primitive":"u32"},"len":"4"}}],["b",{"array":{"type":{"primitive":"u32"},"len":"4"}}]],"output":{"array":{"type":{"primitive":"u32"},"len":"4"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:5447":{"id":"0:116:5447","crate_id":0,"name":"K32","span":{"filename":"sha2/src/consts.rs","begin":[10,0],"end":[19,2]},"visibility":"public","docs":"Constants necessary for SHA-256 family of digests.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"array":{"type":{"primitive":"u32"},"len":"64"}},"expr":"_","value":null,"is_literal":false}}},"0:128:1869":{"id":"0:128:1869","crate_id":0,"name":"H512_224","span":{"filename":"sha2/src/consts.rs","begin":[89,0],"end":[92,2]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"array":{"type":{"primitive":"u64"},"len":"8"}},"expr":"_","value":null,"is_literal":false}}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:63:1863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59:939":{"id":"0:59:939","crate_id":0,"name":"new","span":{"filename":"sha2/src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:537:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:346:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:70:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2701:228-0:132:1681":{"id":"a:1:2701:228-0:132:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:88:1679":{"id":"0:88:1679","crate_id":0,"name":"compress256","span":{"filename":"sha2/src/sha256.rs","begin":[31,0],"end":[37,1]},"visibility":"public","docs":"Raw SHA-256 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-256.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u32"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"GenericArray","id":"23:403:1877","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}},{"type":{"resolved_path":{"name":"U64","id":"24:2586:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:1706":{"id":"0:108:1706","crate_id":0,"name":"Sha512","span":{"filename":"sha2/src/lib.rs","begin":[95,0],"end":[95,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"CoreWrapper","id":"4:507:1674","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CtVariableCoreWrapper","id":"4:488:1675","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"U64","id":"24:2586:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:286:1687","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:0:1707":{"id":"0:0:1707","crate_id":0,"name":"sha2","span":{"filename":"sha2/src/lib.rs","begin":[1,0],"end":[95,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last three on SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:104:1698","`Sha224`":"0:103:1696","`Sha512`":"0:108:1706","`Sha384`":"0:107:1704","`Sha512_256`":"0:106:1702","`Sha512_224`":"0:105:1700"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:109:1668","0:20:1673","0:84:1677","0:91:1678","0:5-4:0:1663","0:6-4:372:1664","0:98-0:88:1679","0:99-0:95:1680","0:101-0:132:1681","0:102-0:137:1682","0:103:1696","0:104:1698","0:105:1700","0:106:1702","0:107:1704","0:108:1706"],"is_stripped":false}}},"0:207:1371":{"id":"0:207:1371","crate_id":0,"name":"soft","span":{"filename":"sha2/src/sha512/soft.rs","begin":[1,0],"end":[215,1]},"visibility":{"restricted":{"parent":"0:91:1678","path":"::sha512"}},"docs":null,"links":{},"attrs":["#![allow(clippy :: many_single_char_names)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:212:274","0:216:5819","0:220:5821","0:228:5828","0:238:5834","0:243:1618"],"is_stripped":false}}},"0:106:1702":{"id":"0:106:1702","crate_id":0,"name":"Sha512_256","span":{"filename":"sha2/src/lib.rs","begin":[91,0],"end":[91,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"CoreWrapper","id":"4:507:1674","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CtVariableCoreWrapper","id":"4:488:1675","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"U32","id":"24:2490:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:340:1693","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12029:10528":{"id":"1:12029:10528","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12041:35398":{"id":"1:12041:35398","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43621:9779","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12063:29923":{"id":"1:12063:29923","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:11888:419","self::pattern":"1:11712:11063"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11535:5338","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12020:35394":{"id":"1:12020:35394","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:2552:1478":{"id":"1:2552:1478","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12069:35399":{"id":"1:12069:35399","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11712:11063","str::split":"1:12060:34200","prim@char":"6:11888:419","`DoubleEndedIterator`":"1:7240:121","str::rsplit_terminator":"1:12072:35400"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43407:9769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12040:35397":{"id":"1:12040:35397","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43611:9778","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12013:35391":{"id":"1:12013:35391","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:1289":{"id":"0:148:1289","crate_id":0,"name":"shr","span":{"filename":"sha2/src/sha256/soft.rs","begin":[11,0],"end":[13,1]},"visibility":{"restricted":{"parent":"0:142:1371","path":"::sha256::soft"}},"docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"array":{"type":{"primitive":"u32"},"len":"4"}}],["o",{"primitive":"u32"}]],"output":{"array":{"type":{"primitive":"u32"},"len":"4"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5390:36080":{"id":"5:5390:36080","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:132:1681":{"id":"b:1:2553-0:132:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12019:34062":{"id":"1:12019:34062","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11279:11070"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12016:35393":{"id":"1:12016:35393","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12014:35392"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5387:36079":{"id":"5:5387:36079","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5382":{"id":"5:5382","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5383:36078","5:5384:10845","5:5387:36079","5:5390:36080","5:5398:36081","5:5399:36082","5:5400:10980","5:5401:35303","5:5402:35304"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2557:1477":{"id":"1:2557:1477","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:137:1682":{"id":"b:1:2538-0:137:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2541:5899"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12105:35409":{"id":"1:12105:35409","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:346:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:52:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:83:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2684:220-0:132:1681":{"id":"a:1:2684:220-0:132:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2253:27337":{"id":"1:2253:27337","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:1844":{"id":"0:74:1844","crate_id":0,"name":"OutputSize","span":{"filename":"sha2/src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6318:5271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5694:5275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:12075:34205":{"id":"1:12075:34205","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:11888:419","self::pattern":"1:11712:11063","str::rsplitn":"1:12078:34207"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43461:5323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:687:27341":{"id":"5:687:27341","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1844":{"id":"0:56:1844","crate_id":0,"name":"OutputSize","span":{"filename":"sha2/src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6318:5271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5694:5275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:112:1838":{"id":"0:112:1838","crate_id":0,"name":"State256","span":{"filename":"sha2/src/consts.rs","begin":[6,0],"end":[6,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"array":{"type":{"primitive":"u32"},"len":"8"}},"generics":{"params":[],"where_predicates":[]}}}},"0:137:1682":{"id":"0:137:1682","crate_id":0,"name":"Sha512VarCore","span":{"filename":"sha2/src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:138:1384","0:139:1839"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2701:228-0:137:1682","a:1:8249:11001-0:137:1682","a:1:8250:11000-0:137:1682","a:1:2684:220-0:137:1682","a:1:2741:5711-0:137:1682","b:1:2542-0:137:1682","b:1:2248-0:137:1682","b:1:2553-0:137:1682","b:1:2251-0:137:1682","b:1:2538-0:137:1682","b:1:3319-0:137:1682","b:1:2548-0:137:1682","b:5:684-0:137:1682","b:24:1159-0:137:1682","0:67","0:82","0:140","0:71","0:75","0:80","0:69","0:73","0:66"]}}},"1:12131:34066":{"id":"1:12131:34066","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39552:28141","Self::is_ascii":"1:12130:34065"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39552:28141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12090:35403":{"id":"1:12090:35403","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11712:11063","`DoubleEndedIterator`":"1:7240:121","prim@char":"6:11888:419","str::matches":"1:12087:1939"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43579:9777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:11069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:1005":{"id":"0:151:1005","crate_id":0,"name":"or","span":{"filename":"sha2/src/sha256/soft.rs","begin":[16,0],"end":[18,1]},"visibility":{"restricted":{"parent":"0:142:1371","path":"::sha256::soft"}},"docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"array":{"type":{"primitive":"u32"},"len":"4"}}],["b",{"array":{"type":{"primitive":"u32"},"len":"4"}}]],"output":{"array":{"type":{"primitive":"u32"},"len":"4"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:5834":{"id":"0:238:5834","crate_id":0,"name":"sha512_digest_block_u64","span":{"filename":"sha2/src/sha512/soft.rs","begin":[98,0],"end":[201,1]},"visibility":"public","docs":"Process a block with the SHA-512 algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u64"},"len":"8"}}}}],["block",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u64"},"len":"16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12023:10525":{"id":"1:12023:10525","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:1696":{"id":"0:103:1696","crate_id":0,"name":"Sha224","span":{"filename":"sha2/src/lib.rs","begin":[85,0],"end":[85,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"CoreWrapper","id":"4:507:1674","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CtVariableCoreWrapper","id":"4:488:1675","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"U28","id":"24:2478:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:304:1689","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12011:811":{"id":"1:12011:811","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:11888:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2250:1895":{"id":"1:2250:1895","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:1845":{"id":"0:58:1845","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"sha2/src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:527:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:12138:35418":{"id":"1:12138:35418","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4533:35418"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43674:9702","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110:5444":{"id":"0:110:5444","crate_id":0,"name":"STATE_LEN","span":{"filename":"sha2/src/consts.rs","begin":[3,0],"end":[3,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"usize"},"expr":"8","value":"8usize","is_literal":true}}},"1:12022:34174":{"id":"1:12022:34174","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:423":{"id":"0:136:423","crate_id":0,"name":"clone","span":{"filename":"sha2/src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182:5768":{"id":"0:182:5768","crate_id":0,"name":"sha256_digest_round_x2","span":{"filename":"sha2/src/sha256/soft.rs","begin":[74,0],"end":[135,1]},"visibility":{"restricted":{"parent":"0:142:1371","path":"::sha256::soft"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cdgh",{"array":{"type":{"primitive":"u32"},"len":"4"}}],["abef",{"array":{"type":{"primitive":"u32"},"len":"4"}}],["wk",{"array":{"type":{"primitive":"u32"},"len":"4"}}]],"output":{"array":{"type":{"primitive":"u32"},"len":"4"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:1681":{"id":"0:132:1681","crate_id":0,"name":"Sha256VarCore","span":{"filename":"sha2/src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:133:1384","0:134:1839"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2701:228-0:132:1681","a:1:8249:11001-0:132:1681","a:1:8250:11000-0:132:1681","a:1:2684:220-0:132:1681","a:1:2741:5711-0:132:1681","b:1:2542-0:132:1681","b:1:2248-0:132:1681","b:1:2553-0:132:1681","b:1:2251-0:132:1681","b:1:2538-0:132:1681","b:1:3319-0:132:1681","b:1:2548-0:132:1681","b:5:684-0:132:1681","b:24:1159-0:132:1681","0:48","0:53","0:62","0:51","0:57","0:55","0:64","0:49","0:135"]}}},"1:12081:35401":{"id":"1:12081:35401","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:137:1682":{"id":"a:1:2684:220-0:137:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12014:35392":{"id":"1:12014:35392","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12137:10917":{"id":"1:12137:10917","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4536:10917"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43665:9697","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5401:35303":{"id":"5:5401:35303","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12133:34069"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:132:1681":{"id":"b:1:2542-0:132:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:83:668":{"id":"0:83:668","crate_id":0,"name":"fmt","span":{"filename":"sha2/src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:81:1863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:191:5801":{"id":"0:191:5801","crate_id":0,"name":"schedule","span":{"filename":"sha2/src/sha256/soft.rs","begin":[137,0],"end":[142,1]},"visibility":{"restricted":{"parent":"0:142:1371","path":"::sha256::soft"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v0",{"array":{"type":{"primitive":"u32"},"len":"4"}}],["v1",{"array":{"type":{"primitive":"u32"},"len":"4"}}],["v2",{"array":{"type":{"primitive":"u32"},"len":"4"}}],["v3",{"array":{"type":{"primitive":"u32"},"len":"4"}}]],"output":{"array":{"type":{"primitive":"u32"},"len":"4"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-4:0:1663":{"id":"0:5-4:0:1663","crate_id":0,"name":null,"span":{"filename":"sha2/src/lib.rs","begin":[54,17],"end":[54,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:1663","glob":false}}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:74:1844"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:131:1873":{"id":"0:131:1873","crate_id":0,"name":"H512_512","span":{"filename":"sha2/src/consts.rs","begin":[104,0],"end":[107,2]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"array":{"type":{"primitive":"u64"},"len":"8"}},"expr":"_","value":null,"is_literal":false}}},"1:12027:10527":{"id":"1:12027:10527","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12052:5946":{"id":"1:12052:5946","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41396:179","prim@char":"6:11888:419","self::pattern":"1:11712:11063"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12078:34207":{"id":"1:12078:34207","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:11888:419","str::splitn":"1:12075:34205","self::pattern":"1:11712:11063"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43479:5319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:11069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12134:34070":{"id":"1:12134:34070","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12135:35417":{"id":"1:12135:35417","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4535:35417"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43656:9703","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12010":{"id":"1:12010","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12011:811","1:12012:5906","1:12013:35391","1:12014:35392","1:12016:35393","1:12019:34062","1:12020:35394","1:12021:314","1:12022:34174","1:12023:10525","1:12025:10526","1:12027:10527","1:12029:10528","1:12031:35395","1:12032:35396","1:12033:34192","1:12034:34193","1:12035:9783","1:12036:9792","1:12037:6072","1:12038:29928","1:12039:29919","1:12040:35397","1:12041:35398","1:12042:29933","1:12043:27790","1:12046:34209","1:12049:34210","1:12052:5946","1:12056:5905","1:12060:34200","1:12063:29923","1:12066:34203","1:12069:35399","1:12072:35400","1:12075:34205","1:12078:34207","1:12081:35401","1:12084:35402","1:12087:1939","1:12090:35403","1:12093:35404","1:12096:35405","1:12099:35406","1:12101:35407","1:12103:35408","1:12105:35409","1:12106:35410","1:12107:35411","1:12110:35412","1:12113:34211","1:12116:34212","1:12119:35413","1:12122:35414","1:12125:35415","1:12128:35416","1:12130:34065","1:12131:34066","1:12132:34068","1:12133:34069","1:12134:34070","1:12135:35417","1:12137:10917","1:12138:35418"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2741:5711-0:137:1682":{"id":"a:1:2741:5711-0:137:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:5711","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12113:34211":{"id":"1:12113:34211","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11888:419","self::pattern":"1:11712:11063"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1850":{"id":"0:60:1850","crate_id":0,"name":"finalize_variable_core","span":{"filename":"sha2/src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:342:1824","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5398:36081":{"id":"5:5398:36081","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12087:1939":{"id":"1:12087:1939","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11712:11063","`DoubleEndedIterator`":"1:7240:121","prim@char":"6:11888:419","str::matches":"1:12087:1939"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43561:9776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:371:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12049:34210":{"id":"1:12049:34210","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:11888:419","self::pattern":"1:11712:11063"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:11069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:24:1159-0:132:1681":{"id":"b:24:1159-0:132:1681","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.15.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1156:5410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1161:186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12096:35405":{"id":"1:12096:35405","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11712:11063","`DoubleEndedIterator`":"1:7240:121","prim@char":"6:11888:419","str::match_indices":"1:12093:35404"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43525:9774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:11069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12072:35400":{"id":"1:12072:35400","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11712:11063","str::split":"1:12060:34200","prim@char":"6:11888:419","str::split_terminator":"1:12069:35399"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43425:9770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:11069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:24:1159-0:137:1682":{"id":"b:24:1159-0:137:1682","crate_id":0,"name":null,"span":{"filename":"/home/predrag/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.15.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1156:5410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1161:186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8250:11000-0:132:1681":{"id":"a:1:8250:11000-0:132:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:11000","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12036:9792":{"id":"1:12036:9792","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43333:9764","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12084:35402":{"id":"1:12084:35402","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:10230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:11069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:5743":{"id":"0:155:5743","crate_id":0,"name":"xor","span":{"filename":"sha2/src/sha256/soft.rs","begin":[21,0],"end":[23,1]},"visibility":{"restricted":{"parent":"0:142:1371","path":"::sha256::soft"}},"docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"array":{"type":{"primitive":"u32"},"len":"4"}}],["b",{"array":{"type":{"primitive":"u32"},"len":"4"}}]],"output":{"array":{"type":{"primitive":"u32"},"len":"4"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12034:34193":{"id":"1:12034:34193","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12033:34192"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:686:9648":{"id":"5:686:9648","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:65:668":{"id":"0:65:668","crate_id":0,"name":"fmt","span":{"filename":"sha2/src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:1840":{"id":"0:50:1840","crate_id":0,"name":"BlockSize","span":{"filename":"sha2/src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6271:5270","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6318:5271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5694:5275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5672:5274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:216:5819":{"id":"0:216:5819","crate_id":0,"name":"sha512load","span":{"filename":"sha2/src/sha512/soft.rs","begin":[10,0],"end":[12,1]},"visibility":{"restricted":{"parent":"0:207:1371","path":"::sha512::soft"}},"docs":"Not an intrinsic, but works like an unaligned load.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v0",{"array":{"type":{"primitive":"u64"},"len":"2"}}],["v1",{"array":{"type":{"primitive":"u64"},"len":"2"}}]],"output":{"array":{"type":{"primitive":"u64"},"len":"2"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-4:372:1664":{"id":"0:6-4:372:1664","crate_id":0,"name":null,"span":{"filename":"sha2/src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:372:1664","glob":false}}},"0:55":{"id":"0:55","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:56:1844"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:133:1384":{"id":"0:133:1384","crate_id":0,"name":"state","span":{"filename":"sha2/src/core_api.rs","begin":[19,4],"end":[19,27]},"visibility":{"restricted":{"parent":"0:20:1673","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"array":{"type":{"primitive":"u32"},"len":"8"}}}},"a:1:8250:11000-0:137:1682":{"id":"a:1:8250:11000-0:137:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:11000","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:101-0:132:1681":{"id":"0:101-0:132:1681","crate_id":0,"name":null,"span":{"filename":"sha2/src/lib.rs","begin":[75,19],"end":[75,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:132:1681","glob":false}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"sha2/src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:371:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:132:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12039:29919":{"id":"1:12039:29919","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12038:29928"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43640:9781","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12035:9783":{"id":"1:12035:9783","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43327:9763","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220:5821":{"id":"0:220:5821","crate_id":0,"name":"sha512_schedule_x2","span":{"filename":"sha2/src/sha512/soft.rs","begin":[15,0],"end":[41,1]},"visibility":"public","docs":"Performs 2 rounds of the SHA-512 message schedule update.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v0",{"array":{"type":{"primitive":"u64"},"len":"2"}}],["v1",{"array":{"type":{"primitive":"u64"},"len":"2"}}],["v4to5",{"array":{"type":{"primitive":"u64"},"len":"2"}}],["v7",{"array":{"type":{"primitive":"u64"},"len":"2"}}]],"output":{"array":{"type":{"primitive":"u64"},"len":"2"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98-0:88:1679":{"id":"0:98-0:88:1679","crate_id":0,"name":null,"span":{"filename":"sha2/src/lib.rs","begin":[71,0],"end":[71,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"compress\")]"],"deprecation":null,"inner":{"import":{"source":"sha256::compress256","name":"compress256","id":"0:88:1679","glob":false}}},"1:12021:314":{"id":"1:12021:314","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12022:34174","`u8`":"6:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:1848":{"id":"0:126:1848","crate_id":0,"name":"H256_224","span":{"filename":"sha2/src/consts.rs","begin":[79,0],"end":[82,2]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"array":{"type":{"primitive":"u32"},"len":"8"}},"expr":"_","value":null,"is_literal":false}}},"5:5402:35304":{"id":"5:5402:35304","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12134:34070"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:1668":{"id":"0:109:1668","crate_id":0,"name":"consts","span":{"filename":"sha2/src/consts.rs","begin":[1,0],"end":[107,2]},"visibility":"crate","docs":null,"links":{},"attrs":["#[rustfmt::skip]","#![allow(dead_code, clippy :: unreadable_literal)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:110:5444","0:111:5445","0:112:1838","0:114:1868","0:116:5447","0:118:5512","0:121:5564","0:123:5646","0:126:1848","0:127:1849","0:128:1869","0:129:1870","0:130:1872","0:131:1873"],"is_stripped":false}}},"a:1:8249:11001-0:137:1682":{"id":"a:1:8249:11001-0:137:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:11001","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:137:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"17:6935:10029":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:30232:5429":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:44283:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:9813:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"18:9098:9919":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:8124:9713":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"5:6739:6312":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"18:10026:9959":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:11910:789":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"7:7491:8882":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:10377:6660":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"24:1139:16444":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"12:731:9597":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"7:573:7965":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"7:6545:8714":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"7:4920:8416":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:1454:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:6999:5911":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:11895:1481":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"18:13469:7286":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:3129:33849":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:8843:32489":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:8134:9737":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"23:260:5436":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"6:11887:936":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"0:198:5803":{"crate_id":0,"path":["sha2","sha256","soft","schedule_rounds4"],"kind":"macro"},"18:9748:6609":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:40277:9714":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"19:624:38473":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:21083:16422":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:2206:129":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"6:11461:37330":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:4336:6300":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:1716:6214":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"18:11832:6871":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"1:44164:11090":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"18:13024:7174":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"24:1249:5382":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"18:10270:9970":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:10942:6264":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:5910:6236":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:41243:9255":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:265:6276":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:55:7680":{"crate_id":17,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:3152:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:42917:5346":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:2208:10107":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"18:9653:9937":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:783:6279":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"7:7485:8881":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:43525:9774":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"23:123:16415":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"18:12646:7018":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"26:179:1667":{"crate_id":26,"path":["const_oid","ObjectIdentifier"],"kind":"struct"},"19:736:27131":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:4761:389":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:2515:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:585:16623":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:8170:9587":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:6061:22326":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"15:187:22301":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"18:9545:6575":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:2833:7597":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"22:48:16470":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"6:7693:10153":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"7:4398:8198":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:30288:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"18:13240:7227":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"7:6016:8659":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:1785:10100":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"24:5750:5273":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"18:10598:6699":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:41445:5910":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"12:305:9594":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:7757:9575":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"12:1009:10078":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"11:0:1964":{"crate_id":11,"path":["adler"],"kind":"module"},"5:1228:10078":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"18:13744:7377":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"14:0:1967":{"crate_id":14,"path":["std_detect"],"kind":"module"},"1:47862:9355":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:880:5317":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"18:11946:6888":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"1:46682:9331":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:7652:198":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:12799:7040":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:6597:6320":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"18:11821:6868":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"17:2594:7441":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:41538:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"7:1532:7990":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:2668:7444":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"18:13219:7222":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"7:4653:8292":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:6943:23217":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:13233:7225":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:5499:8668":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"18:9641:9936":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"7:6002:8654":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:7266:10220":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:11901:742":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"10:445:22207":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:12295:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:2684:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"18:8823:6586":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:11672:1995":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:43425:9770":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:353:5283":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"1:44108:9818":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:2477:10108":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"7:123:16909":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"22:12:1822":{"crate_id":22,"path":["crypto_common","Block"],"kind":"typedef"},"17:3815:7486":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"18:8788:6585":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"18:13433:7277":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:4818:7503":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:6485:16811":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"24:2362:16422":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"6:8166:10168":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"24:609:1831":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"6:2614:10110":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:10804:5337":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"18:12835:7071":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:8485:8970":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"7:4377:8189":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:6768:10977":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:41911:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:5998:23212":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:0:1389":{"crate_id":6,"path":["std"],"kind":"module"},"5:5642:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:5418:7515":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:2087:9650":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:40315:9720":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:1242:10084":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:11886:371":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"18:10491:9983":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:3266:9917":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:436:1977":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"17:5847:9470":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:6146:194":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:8360:23272":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"6:9003:8982":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:2701:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:3197:10896":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:9370:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:12512:6244":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:45459:9298":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:42421:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:1667:1087":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:3446:7482":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"12:744:9598":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:9142:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"24:1004:16462":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"6:8387:9279":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"18:9596:6606":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:2839:10884":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"18:13821:7399":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"19:766:27132":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:11726:9406":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:3169:10893":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:6578:6307":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"19:644:6464":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"7:4619:8289":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"19:727:6488":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"0:163:5744":{"crate_id":0,"path":["sha2","sha256","soft","sha256load"],"kind":"function"},"1:43301:9282":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"18:12085:6908":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:7244:38458":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:5811:9464":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"4:499:5288":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"7:4851:8375":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"7:4784:8348":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:2298:22327":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"6:11015:8972":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:8180:23223":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:2242:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:2470:7436":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:5798:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:2546:7439":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:901:6294":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:6907:6254":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"19:590:6472":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:3458:16678":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"23:317:5321":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"1:44076:9810":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"7:4790:8351":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:9453:23293":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:44376:9292":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"18:11556:6795":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"6:8147:5321":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"5:7164:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:40459:9737":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"24:1262:5386":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"6:6236:206":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:10826:7885":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"18:10428:9978":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"0:137:1682":{"crate_id":0,"path":["sha2","core_api","Sha512VarCore"],"kind":"struct"},"6:9184:10102":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"23:382:5424":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"17:8129:10061":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"23:362:5354":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"4:433:1976":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"6:4642:16743":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:22227:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:21088:16137":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:11308:6268":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:7572:38456":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:2764:7448":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"7:6598:8743":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5502:16797":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"1:44273:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:45844:9312":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"24:1865:16431":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"5:5485:6307":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"18:11011:6701":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"1:42683:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"24:1079:16426":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"1:45521:9300":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:7859:23222":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"18:12307:6959":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:1577:9599":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:40149:9711":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:4818:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"7:4383:8191":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:3987:16721":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:39961:9698":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"12:1540:10086":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:12019:6627":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"15:221:7775":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:1544:6233":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"4:168:1676":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"18:10465:9981":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:8072:9580":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:9803:16422":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:11879:6877":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:2780:7592":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:4845:7504":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:7571:16422":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"10:481:22206":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:30266:5428":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"18:8953:6591":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"1:40399:9730":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"12:1866:9600":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"7:6724:8790":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:43741:11083":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"7:1555:8000":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"22:33:1826":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"24:6162:5361":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"18:8283:23270":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"7:1752:8121":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:8242:8950":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"18:10761:23281":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"17:4568:7496":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:2524:7438":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:10771:5336":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:5693:10140":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:5708:9456":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:9322:38469":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:43969:9806":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:7042:9566":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:8075:6452":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"18:8683:6582":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:635:10092":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:43343:6588":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:43579:9777":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:2746:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:4042:10919":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:30360:28275":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:3184:9602":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:8838:16817":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"19:660:9899":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"10:174:22273":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:5719:10141":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:43656:9703":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:6728:9537":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:4789:7502":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:3931:6233":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"6:8091:8945":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"18:9895:9953":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"22:75:6459":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"7:4449:8226":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:7767:23221":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:11424:9766":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:40684:9743":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"18:13121:7198":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:9155:5974":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"12:2076:10078":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"12:1035:10080":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:46528:9328":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:45561:9302":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:11615:6818":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"7:4767:8337":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"0:197:5802":{"crate_id":0,"path":["sha2","sha256","soft","rounds4"],"kind":"macro"},"1:40708:6338":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"12:1847:6294":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:7211:9664":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:45938:9314":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"7:4472:8234":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"18:13399:7269":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"7:5935:8626":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"7:5747:8523":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:6919:38454":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:2784:10876":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:2404:7433":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:8800:5911":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:4480:7493":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"18:10712:23391":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"18:13257:7230":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"18:11813:6866":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"17:6506:9529":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:6904:7576":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"7:6553:8719":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:6442:9520":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:47464:9338":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"7:474:7907":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"17:5630:9989":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:5380:6233":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:47072:9334":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:867:5911":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:9062:8984":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"19:699:9404":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:6164:9509":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:3157:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:21879:28257":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:930:10071":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:9624:6348":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:676:16626":{"crate_id":6,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:7211:5716":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:11903:744":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"6:7665:9605":{"crate_id":6,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:3210:10117":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:39161:9695":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"0:238:5834":{"crate_id":0,"path":["sha2","sha512","soft","sha512_digest_block_u64"],"kind":"function"},"1:10053:5338":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:11493:9643":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:7616:6262":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"1:20804:16148":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:41462:5318":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"0:110:5444":{"crate_id":0,"path":["sha2","consts","STATE_LEN"],"kind":"constant"},"1:4007:10223":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"18:9534:9932":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:40438:9733":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:7449:10052":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:527:1827":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"1:6585:1860":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:2808:7450":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:7148:16500":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:40448:9734":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:6764:6325":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:7572:8902":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:43649:9782":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:11168:10198":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"18:9488:9928":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:2851:10887":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:12308:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"18:8443:23275":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"12:867:10077":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:6321:10028":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"7:5058:8486":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:5067:191":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"19:548:141":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:3142:5310":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:5035:6305":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"7:1588:8023":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:11544:6794":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"6:3465:16696":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"6:9374:129":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"7:6116:8682":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"12:279:9591":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:3547:5318":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"24:912:16439":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"17:8256:7699":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"7:7275:8879":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:5677:23210":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"18:9839:9946":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:46111:9320":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4854:16769":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:10422:10118":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:8784:5317":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:12449:6980":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:10670:6675":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:2805:7593":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:917:10085":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:2981:10889":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:42695:9279":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"6:638:10094":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:8907:10174":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"7:4486:8242":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"24:5716:5272":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"19:636:6484":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"0:118:5512":{"crate_id":0,"path":["sha2","consts","K32X4"],"kind":"constant"},"18:11502:6789":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"10:52:22225":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:4386:5983":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"6:857:5318":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"12:1144:10084":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:2933:9915":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:6607:6322":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:9295:10232":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"5:6367:5911":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"18:8521:23277":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"26:82:1666":{"crate_id":26,"path":["const_oid","AssociatedOid"],"kind":"trait"},"5:7014:6294":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:9577:6604":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:6336:9512":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:45681:9307":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:10462:6262":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"12:638:5317":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:1197:9568":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:3911:16715":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:8264:8747":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:11434:6774":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"18:13265:7232":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:8160:10166":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:41454:5317":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"18:13443:7280":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"7:5809:8551":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"24:1119:16428":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"4:348:5281":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"1:43255:5330":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:46716:9332":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"24:1190:5367":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"18:10452:9980":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"18:13169:7205":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:4728:7500":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:11891:6879":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"6:5556:206":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"12:2204:38433":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"7:4466:8232":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:12388:6969":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:10142:23364":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:21839:30947":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:10416:9977":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"0:128:1869":{"crate_id":0,"path":["sha2","consts","H512_224"],"kind":"constant"},"1:39334:10236":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:680:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:2812:10881":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:7781:6531":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"22:54:16472":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"17:2357:7431":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"1:49668:16154":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"7:541:7949":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"7:4890:8395":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"24:1039:16424":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"1:42153:5972":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"7:4947:8434":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"18:13316:7245":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:47770:9351":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"18:1034:9909":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"24:1059:16425":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"1:11717:10230":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"12:1126:10083":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"12:2219:9660":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:10692:130":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:2312:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:936:16633":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"24:1183:5383":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"18:13564:7336":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:7932:10159":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:6767:9549":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:10865:8973":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"24:642:5365":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"17:5693:9453":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8838:30891":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"19:681:9400":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"18:13145:7203":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:43184:5335":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"7:6057:8670":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"12:1561:10087":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"0:182:5768":{"crate_id":0,"path":["sha2","sha256","soft","sha256_digest_round_x2"],"kind":"function"},"0:132:1681":{"crate_id":0,"path":["sha2","core_api","Sha256VarCore"],"kind":"struct"},"1:41711:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4074:38034":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"22:0:1974":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"6:7257:36563":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"18:13159:7204":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"12:1050:22288":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:7590:10149":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"1:32060:9694":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"24:2586:1672":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"typedef"},"6:2372:16675":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"7:4318:8145":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4564:16718":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:5021:10128":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:12542:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:7366:23219":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"18:10923:9438":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"6:11900:745":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"15:215:9588":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"7:6587:8738":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"14:110:38440":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"18:13053:7181":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:10722:36813":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:953:10076":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:44347:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:42713:9760":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"15:7:10065":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"7:7520:8889":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"7:7443:8880":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"19:80:27121":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:8730:10171":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"18:13426:7276":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:9265:9922":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:21945:9687":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"7:4882:1001":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:4679:16729":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:3753:6214":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"18:11471:6780":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"1:41597:5911":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:4782:31793":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:4137:6233":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:6558:9531":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"24:5694:5275":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"6:10357:6261":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"21:92:16412":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"19:0:1972":{"crate_id":19,"path":["memchr"],"kind":"module"},"6:3925:16716":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:40286:9715":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"24:1172:5369":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"7:5870:8582":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"0:145:1286":{"crate_id":0,"path":["sha2","sha256","soft","shl"],"kind":"function"},"15:40:6744":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:2387:16551":{"crate_id":6,"path":["std","io"],"kind":"module"},"7:4546:8273":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:1366:5318":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"18:11355:6762":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"12:1852:6214":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:8792:10173":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:47526:9339":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"18:12483:6993":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:4872:7505":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"18:12033:6902":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"12:783:6218":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:11889:1515":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"24:823:16420":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"6:947:10074":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"12:60:38434":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:39192:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"7:6668:8767":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:43561:9776":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:10822:10153":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:7862:9604":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"24:600:5366":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"17:4757:7501":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"4:344:1828":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"1:40424:6482":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:13721:7376":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:23037:9040":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"12:97:9590":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:8776:8973":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"1:32056:10154":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"7:1908:18256":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"7:1594:8025":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:43778:9790":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:43084:10246":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:488:1675":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"7:4527:8264":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"12:675:10069":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:2786:7449":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:2151:589":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:11468:8996":{"crate_id":6,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:9117:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:21114:16144":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:6854:7571":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"7:1668:8081":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"12:1859:9599":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:1078:36189":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:2317:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"7:7578:8900":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:12194:6924":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"24:977:16419":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"1:30302:28274":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"7:4911:8410":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:4406:5868":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:2692:5860":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:2929:5309":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"0:130:1872":{"crate_id":0,"path":["sha2","consts","H512_384"],"kind":"constant"},"6:10835:10136":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:280:1985":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:4110:10224":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:11907:1497":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"6:1080:10084":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:731:142":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:46416:9326":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:45391:9295":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:8971:129":{"crate_id":18,"path":["object","read","any","File"],"kind":"struct"},"18:9138:9920":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"7:119:16908":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"10:352:22222":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"18:9628:9935":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:45644:9305":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"18:10823:6552":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"6:9081:9623":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:3673:9604":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"7:1564:8006":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:3975:6294":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:546:1984":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"1:46036:9318":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:44326:10247":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"18:13015:7170":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:10670:9632":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:2879:7453":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:397:1988":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"1:6977:6239":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"6:10050:10186":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"5:3117:5317":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"18:13292:7236":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:2843:10885":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:47732:9349":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"7:1736:8116":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:3688:10210":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"18:9340:9924":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:11888:419":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"1:2847:10886":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:11913:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"5:4005:6276":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:43327:9763":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"7:1721:8109":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"12:393:38438":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:7626:10060":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:3585:7483":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"1:46158:9321":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:3383:8948":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"1:41309:30945":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"24:2478:1669":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"typedef"},"17:6376:7457":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"7:4865:8383":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"8:0:1543":{"crate_id":8,"path":["unwind"],"kind":"module"},"5:2636:9005":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"23:369:5423":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"24:995:16460":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"6:1821:10101":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"7:6755:8817":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:45367:9294":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"7:579:7968":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"18:11600:6812":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"18:8310:23271":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"18:12536:6997":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:2502:7437":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"4:455:1982":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"1:43611:9778":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"18:11163:6716":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"5:7255:9667":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:40324:9721":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"18:13612:7337":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:13033:7175":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:41260:10995":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:11837:10204":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:3644:5911":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"7:5755:8525":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:9592:6343":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"23:300:5439":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"7:7252:8866":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:3225:7480":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"18:13041:7176":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"1:1821:9017":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"18:10967:6699":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"25:36:1841":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"1:12501:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:41631:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:3933:16717":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:9098:10183":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:3401:10121":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:6249:126":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"18:9822:9944":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"18:8490:23276":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"12:828:16633":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"7:6651:8766":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"7:526:7940":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"7:4509:8255":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"15:0:1968":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"17:6361:7529":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"24:986:16421":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"1:7240:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"18:8420:23274":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"1:44291:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"18:13376:7261":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:40196:6332":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"26:174:9562":{"crate_id":26,"path":["const_oid","parser","Parser"],"kind":"struct"},"0:142:1371":{"crate_id":0,"path":["sha2","sha256","soft"],"kind":"module"},"6:8479:5317":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"7:4344:8165":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:13659:7354":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:41831:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"7:5015:8461":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"10:502:7888":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:40246:10239":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"18:13812:7397":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:8142:10064":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:3899:7488":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:7338:6315":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:3079:5311":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"24:1260:5393":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"18:11628:6822":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:11243:9640":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:6721:27813":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:22392:5307":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"7:500:7920":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"6:6373:10144":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"0:20:1673":{"crate_id":0,"path":["sha2","core_api"],"kind":"module"},"1:39365:10237":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:7588:10918":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:6621:10143":{"crate_id":6,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:3047:22355":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"26:0:1665":{"crate_id":26,"path":["const_oid"],"kind":"module"},"6:501:6222":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:2337:7425":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:2116:9652":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"18:12236:6945":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"7:506:7923":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"7:5862:8577":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"0:212:274":{"crate_id":0,"path":["sha2","sha512","soft","add"],"kind":"function"},"1:4183:5981":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"18:10354:6659":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:6538:16813":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"18:10705:6676":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:14:1940":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:4104:16739":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"18:11060:6672":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"21:66:16410":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"6:11892:312":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"6:5686:10137":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"18:13488:7291":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:43956:9802":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:10652:9626":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"18:10681:9434":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"7:1525:7987":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:47572:9340":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:2695:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:5367:22325":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"0:108:1706":{"crate_id":0,"path":["sha2","Sha512"],"kind":"typedef"},"17:7488:9572":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:43265:5331":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:6188:6236":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"12:2198:7824":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:2691:5710":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:2362:16670":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"6:8082:8944":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"1:2898:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:43763:9784":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:530:6223":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"24:1209:5412":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"1:2518:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"6:1783:10099":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"18:9617:9934":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:10682:8904":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"7:4492:8245":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"12:399:38435":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:1583:9600":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:6482:10145":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:11906:1496":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"17:6488:9521":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:5908:6233":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:40356:9726":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"18:9772:6614":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:7005:9658":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:47686:9345":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:8496:9620":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"7:4813:8360":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:43989:9808":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:8226:10169":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"18:420:6538":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"18:12980:7169":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:20549:32261":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"19:599:38472":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:40699:9746":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"14:226:7822":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:3973:16719":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:7942:16704":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"18:487:9907":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"7:5077:8494":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"7:5071:8491":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"25:85:5352":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"17:4510:7494":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"18:13453:7283":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"7:1657:8073":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:8214:7632":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"1:25847:9041":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"18:13678:7360":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"18:9696:6602":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"25:77:1820":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"7:6569:8731":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:13411:7272":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:7241:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:41470:5911":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:43333:9764":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:2550:6227":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:926:10070":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:7519:9574":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:9038:219":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"12:452:142":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"19:113:27123":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"7:5065:8489":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:42498:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:21337:16151":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"7:6110:8681":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"7:4875:8389":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"7:5717:8498":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"24:921:16452":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"6:11195:8994":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"18:10092:9968":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"12:665:5911":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:45413:9296":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:9424:6599":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:3875:16714":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:7467:9569":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:9108:38463":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"7:4331:8155":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:11339:6758":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"7:5857:8576":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"24:773:16449":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"6:10657:9611":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:5643:9451":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:7595:10986":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:40022:9701":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:42705:9759":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:1568:6294":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:9670:9940":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:43921:9797":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:9157:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:47721:9348":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:10092:5322":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"7:7532:8891":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:11899:643":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"7:5816:8555":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:1433:144":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:2738:5862":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:3872:7487":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:2696:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"18:9178:9921":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:643:16625":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:43631:9780":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:2905:9648":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:10897:6697":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:9526:6340":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"18:11109:6709":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"18:10334:6609":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:30864:5876":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:47402:9337":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:9312:9923":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:3163:33850":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:5926:206":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:5834:16527":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:911:6214":{"crate_id":6,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:4141:9668":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"7:4559:8277":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:2856:10888":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"0:84:1677":{"crate_id":0,"path":["sha2","sha256"],"kind":"module"},"18:10545:6667":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"18:12224:6943":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"7:7230:8865":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"7:4732:8319":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:12510:6995":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:21771:9021":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"0:123:5646":{"crate_id":0,"path":["sha2","consts","K64X2"],"kind":"constant"},"7:4667:8293":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:4904:7506":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"18:9959:9417":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:6819:7567":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:6990:7581":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"7:1514:7982":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"0:159:274":{"crate_id":0,"path":["sha2","sha256","soft","add"],"kind":"function"},"6:11859:16629":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"26:132:9279":{"crate_id":26,"path":["const_oid","encoder","State"],"kind":"enum"},"1:5987:9671":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"0:88:1679":{"crate_id":0,"path":["sha2","sha256","compress256"],"kind":"function"},"4:442:1979":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"7:5988:8651":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:6022:23213":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:40473:9738":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"7:4743:8325":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"0:207:1371":{"crate_id":0,"path":["sha2","sha512","soft"],"kind":"module"},"18:10283:6654":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:180:22307":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:5557:7456":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:2967:22354":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"7:7258:8868":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"24:1186:5371":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"1:2822:10883":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:40226:5333":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:39280:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:32020:5857":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"18:12403:6973":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:1443:10070":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:4096:16738":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:1916:9018":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:5944:9991":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"7:1614:8039":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"19:719:6485":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"18:9907:6617":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:11783:11077":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"0:103:1696":{"crate_id":0,"path":["sha2","Sha224"],"kind":"typedef"},"18:12563:7001":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:7030:33847":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:21559:16422":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:3534:5317":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:21900:28262":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"15:202:16524":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"8:79:22200":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:8718:6583":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"7:4845:8373":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"7:1546:7995":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:8912:107":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:5797:9463":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"12:0:1965":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"18:13419:7275":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:39258:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"7:4307:8137":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:11331:10122":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:6294:6276":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"12:991:9568":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"23:0:1876":{"crate_id":23,"path":["generic_array"],"kind":"module"},"6:9043:8983":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"6:10702:119":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:8141:6588":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"1:20982:16422":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"24:0:1830":{"crate_id":24,"path":["typenum"],"kind":"module"},"6:7677:16650":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"18:11532:6793":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"1:5528:9669":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:8632:23258":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"6:888:9598":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:7786:10155":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"6:11854:36543":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"19:481:9395":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"18:12592:7004":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"1:40050:9703":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:6369:9743":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"18:8979:38461":{"crate_id":18,"path":["object","read","any","FileInternal"],"kind":"enum"},"24:1156:5410":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"6:844:5317":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:1594:9602":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:6332:10143":{"crate_id":6,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"5:963:6276":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:5334:10132":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"6:1071:10080":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"0:177:5755":{"crate_id":0,"path":["sha2","sha256","soft","sha256msg2"],"kind":"function"},"1:47785:9352":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:7335:38459":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:11909:1495":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"18:10798:23282":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"6:10226:36692":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"0:202:1618":{"crate_id":0,"path":["sha2","sha256","soft","compress"],"kind":"function"},"1:42174:5974":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"18:12358:6964":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:39982:28265":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:7937:10160":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"1:12330:27881":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"18:12959:7164":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:40487:9739":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:43407:9769":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:2163:10857":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"18:13367:7258":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:8925:36795":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:7557:7637":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:42031:10231":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:8356:10230":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"18:10626:9431":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"18:13857:7403":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:10080:9967":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:11484:9772":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:1351:5317":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:11870:36808":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"7:4521:8261":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:3440:5970":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"6:3615:16712":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"7:4726:8316":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:2512:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"18:11282:6744":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"12:821:10071":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:11091:8983":{"crate_id":6,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"18:12372:6967":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:11894:1397":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"1:2161:10856":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"12:1839:5317":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:21332:16141":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:39236:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:11145:6266":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:7529:7471":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:863:6284":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:9161:5976":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:2862:7452":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:6327:9511":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"12:840:10074":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:7044:5911":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:1572:6214":{"crate_id":6,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"24:2490:1670":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"typedef"},"6:2346:16665":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"7:482:7912":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:2932:5714":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:41581:5317":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:8736:186":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"6:2832:6232":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:11924:6887":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"7:7538:8892":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"12:1688:144":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:10165:5325":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:20922:16422":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:42476:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:10203:5326":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:47648:9342":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"18:1787:9910":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:5439:10136":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"1:2788:10880":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"24:1229:5414":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"7:7509:8885":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"7:5947:8631":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:21561:16139":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:10257:9969":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:7543:7472":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:12496:6994":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:1589:9601":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:4037:7489":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:12331:6962":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:2509:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"5:7089:5911":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"7:4757:8331":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:20990:16140":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:6865:38005":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"18:9028:9918":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:2407:9001":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:5386:6580":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"24:1219:5413":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"17:6132:9506":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"18:11193:6720":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:1382:5911":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:11265:5302":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"19:521:27133":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"7:4478:8237":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"24:816:16445":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"12:1634:6219":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"12:768:6214":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:11003:8971":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:2694:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:8918:10176":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"22:36:16467":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"1:11737:11068":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"0:131:1873":{"crate_id":0,"path":["sha2","consts","H512_512"],"kind":"constant"},"5:2912:33621":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:9961:5317":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"18:12138:6915":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"7:5051:8483":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"7:5974:8640":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"7:5785:8542":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"7:6628:8765":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:7635:7641":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:41345:9613":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:3510:6294":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:7498:9573":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:5976:9442":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:3983:16720":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"7:4538:8268":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:3170:10115":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:6757:16820":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"23:346:5440":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"17:8047:7691":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:10000:36691":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"18:10125:6622":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:1756:9014":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:42674:6059":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:39970:9699":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"13:0:1966":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:7743:7462":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"12:1873:9601":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:8675:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:2800:10879":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:11372:6764":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"18:9038:38462":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:44104:9817":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"7:4416:8210":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:9826:9945":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:2354:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:20564:32261":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"18:10052:9964":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:6243:38457":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:7195:30944":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:3995:16723":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"23:422:5425":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"17:2572:7440":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:8208:9613":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:43163:5327":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:4047:5318":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:4332:5982":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"18:10580:9428":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:47800:9353":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"27:0:1708":{"crate_id":27,"path":["cfg_if"],"kind":"module"},"6:11908:1498":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"1:3163:10891":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:2426:7434":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"7:4609:8288":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:445:1980":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"17:2642:7443":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"7:5843:8575":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:46014:9317":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:11136:6710":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"18:1947:9911":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"18:11520:6790":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"1:2763:7591":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:43884:9796":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:3622:6276":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:21827:9685":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"18:10000:6683":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"19:491:9396":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"7:4459:8229":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:1612:6276":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"18:9946:9416":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:2574:10109":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:8762:8972":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:22260:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:6097:16532":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:4019:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"5:5239:16519":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:7846:10157":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:3939:16718":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:3292:16701":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:5571:7459":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"18:10478:9982":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:47747:9350":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:7791:9611":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:3775:6276":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:10743:9986":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"23:163:5435":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"7:4681:8294":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"24:6318:5271":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"0:228:5828":{"crate_id":0,"path":["sha2","sha512","soft","sha512_digest_round"],"kind":"function"},"17:7317:38455":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"0:114:1868":{"crate_id":0,"path":["sha2","consts","State512"],"kind":"typedef"},"18:0:1971":{"crate_id":18,"path":["object"],"kind":"module"},"6:3449:37034":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"7:1700:8099":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:5346:7514":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:1931:653":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"7:1715:8108":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"7:4499:8248":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"15:160:10065":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"7:532:7943":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"6:554:10090":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"18:10527:23389":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:8154:9778":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"24:1162:5411":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"6:3881:16713":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"18:11410:6770":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:7808:9612":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"1:41521:11006":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:5032:7510":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:44096:9815":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"7:5798:8543":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:41368:9263":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"18:9796:6616":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:40408:9731":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:439:1978":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"7:1709:8105":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:6575:23215":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:13803:7393":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"22:46:1821":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"7:6605:8747":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:4683:16732":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:13698:7363":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:8171:16711":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"7:6136:8696":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:451:1981":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"1:12597:11114":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:308:16422":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"5:2908:9004":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"7:6830:8856":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"18:13461:7284":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:11319:6757":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:9523:9931":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:4400:7491":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:13135:7202":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"23:403:1877":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"17:8269:128":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"17:6671:7555":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:7052:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"21:11:16404":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"1:20577:32766":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:21862:9027":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:5179:190":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"18:9350:38465":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"0:216:5819":{"crate_id":0,"path":["sha2","sha512","soft","sha512load"],"kind":"function"},"18:9188:38464":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:39998:9247":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:13082:7189":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:8825:8975":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"18:247:9905":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:4681:16731":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:40376:9728":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"7:4932:8425":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:41203:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"22:39:16468":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"7:7544:8893":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4576:8760":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:13689:7361":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:689:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:42433:7667":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"21:46:128":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"1:40116:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:43507:9773":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"20:0:1031":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"1:40163:10951":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"6:1895:10104":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"6:618:10091":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:7644:16627":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"18:8753:6584":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:43245:5332":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:9106:210":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"6:1565:5911":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"18:13667:7355":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:43315:9762":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:22557:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:5963:9481":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"12:1524:22289":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"18:11844:6873":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"18:10721:6677":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"18:13181:7208":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"12:757:6294":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:5305:7513":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"25:0:1819":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"24:1141:16441":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"6:10419:10116":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:5655:7460":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:2774:10875":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:6101:6247":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:13211:7219":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:1846:10103":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"18:386:9906":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"18:10015:9958":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:9149:5971":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:45990:9316":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"7:6024:8661":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"7:5880:8589":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:42898:9280":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:3300:7481":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:2749:5866":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"6:7821:130":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"5:3521:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:1432:10069":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:11449:8995":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"17:5104:7512":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"0:199:5810":{"crate_id":0,"path":["sha2","sha256","soft","sha256_digest_block_u32"],"kind":"function"},"1:2506:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:2344:9013":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"18:12126:6914":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:11902:6880":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"18:13356:7254":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"25:93:128":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"1:4808:795":{"crate_id":1,"path":["core","iter"],"kind":"module"},"12:2212:7826":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:43857:9795":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:8109:9586":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:6254:7524":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:39955:9697":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:42403:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:45968:9315":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:6520:7532":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:6218:10017":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"12:2192:7823":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:3063:6492":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"7:4439:8220":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"18:13625:7343":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"18:10735:6680":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:5402:6581":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"22:44:1989":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"7:5967:8639":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:45543:9301":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:4508:16761":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:2603:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"18:12318:6960":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:6876:7465":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:9734:9943":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:40042:9697":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"15:31:10065":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"7:4707:8308":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"26:111:6445":{"crate_id":26,"path":["const_oid","arcs","RootArcs"],"kind":"struct"},"24:630:5397":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"18:9228:38468":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:2931:22353":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:7460:6704":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:4260:10226":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"18:13879:7409":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:1413:9598":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:535:9440":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:13791:7391":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:8948:10179":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:21:681":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"0:151:1005":{"crate_id":0,"path":["sha2","sha256","soft","or"],"kind":"function"},"17:6201:10013":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:3142:9916":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:9877:9752":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"18:11391:6769":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"5:35:6273":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"18:11770:6855":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"7:6785:8834":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"12:119:6208":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"7:4294:8128":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:6890:7466":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"18:13309:7244":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:45347:9293":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:4366:6233":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:0:1970":{"crate_id":17,"path":["gimli"],"kind":"module"},"1:45822:9311":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:41512:10240":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:7711:7644":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:44088:9813":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:3124:9600":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"10:0:1963":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"1:8251:10229":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:13332:7247":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:41751:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:43135:5316":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"7:6691:8774":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:43479:5319":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"15:165:22294":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"19:507:6464":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:8410:8964":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"0:155:5743":{"crate_id":0,"path":["sha2","sha256","soft","xor"],"kind":"function"},"1:43946:9798":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"7:5829:8564":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4414:16743":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:2360:16669":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"18:11037:23284":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:40121:9710":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5563:6236":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:8817:668":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:22359:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:41791:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:10647:9624":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:2245:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:40306:9718":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:2694:7445":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:9386:6260":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:6696:23216":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:40069:9705":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:5724:9458":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:21854:9026":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"7:6776:8831":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"7:4970:8447":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:211:6275":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"18:10440:9979":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:7321:6214":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:21107:16422":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"19:614:38471":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:6431:9519":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:7103:8979":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:1048:9568":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:39379:9117":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"7:1682:8092":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:7263:5715":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"7:4423:8214":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:11911:1553":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"5:2189:9655":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"24:1194:5368":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"5:1058:33635":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:8256:23257":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"18:11585:6806":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"6:8870:16818":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"21:79:16411":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"18:12059:6905":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:40034:9702":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:21431:5312":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"19:538:6469":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"18:9853:9947":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:3158:9599":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"7:1539:7992":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:10747:128":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"4:342:1824":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"typedef"},"17:5000:7509":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"24:832:16442":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"1:2469:16422":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:3150:9601":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:21978:10707":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"7:6700:8778":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:46189:9322":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"18:11299:6747":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:39552:28141":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:6409:6251":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:6296:166":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"12:2087:10080":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:12357:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:11904:740":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"18:12902:7126":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4328:10127":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:9973:9418":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:11249:5300":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:11279:11070":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:11258:6743":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:10847:36809":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:3317:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:3234:10897":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"7:5995:8653":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"0:116:5447":{"crate_id":0,"path":["sha2","consts","K32"],"kind":"constant"},"1:20841:16149":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:45622:9304":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"7:62:16854":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"7:6821:8853":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"19:574:6464":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:20596:16430":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:10416:10114":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:1042:36191":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:3749:7484":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:6717:9536":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"12:1879:9602":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:20770:10856":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"5:4207:5317":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:8215:9614":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:2768:7589":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:11210:9637":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:45491:9299":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:11035:8992":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:6868:7573":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:2792:10878":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:11393:10124":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"18:12259:6954":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"7:4688:8296":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4639:16770":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:3276:6214":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:355:10088":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:2706:5353":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:40677:9742":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:4377:6331":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:22326:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"18:10505:9984":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"18:10885:9437":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"7:1650:8069":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"12:2060:9568":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:41871:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"18:9478:9927":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:12770:7020":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"7:4952:8436":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"7:4371:8188":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"7:1519:7984":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"22:42:16469":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"6:3325:9746":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"18:10316:6657":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:959:10077":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"25:106:5284":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"1:2926:5713":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:9033:218":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"21:118:16414":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"19:531:9397":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:7659:16628":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"26:15:1994":{"crate_id":26,"path":["const_oid","arcs","Arcs"],"kind":"struct"},"6:8319:16779":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:1919:23322":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"10:234:9279":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:11938:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:20938:16136":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:45662:9306":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"19:652:6464":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"0:104:1698":{"crate_id":0,"path":["sha2","Sha256"],"kind":"typedef"},"7:4571:8286":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4578:8762":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:44334:9289":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:480:6221":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:11072:8993":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"0:111:5445":{"crate_id":0,"path":["sha2","consts","BLOCK_LEN"],"kind":"constant"},"7:5773:8538":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:30041:10673":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:39114:10895":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:41589:5318":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"10:388:22208":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:6133:10142":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:4112:16740":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"18:10649:9432":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:42449:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:780:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"18:8909:6588":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"1:40268:9644":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"7:4803:8356":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"18:9469:9926":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"12:816:10085":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:10516:6662":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"0:167:5747":{"crate_id":0,"path":["sha2","sha256","soft","sha256swap"],"kind":"function"},"7:4827:8364":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:46060:9319":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:9986:9419":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:7318:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"7:5779:8541":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:8955:10180":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"7:6814:8850":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"0:95:1680":{"crate_id":0,"path":["sha2","sha512","compress512"],"kind":"function"},"1:21803:9022":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"7:4751:8329":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"18:8651:6580":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:11905:1499":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"1:21665:9679":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:40057:10940":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"24:1267:5370":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"1:39075:10898":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:46212:9323":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:9721:9942":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:2916:33622":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"7:4553:8275":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:6179:9998":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"18:9566:9922":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"7:5900:8605":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:12382:10234":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"18:8858:6587":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:10138:16799":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"18:11641:6823":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"5:2169:36165":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:7165:10987":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"18:13249:7228":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"21:0:1973":{"crate_id":21,"path":["blobby"],"kind":"module"},"6:9028:167":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:4845:16768":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:7198:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:5818:6305":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:9683:9941":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:8598:23280":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:45699:9308":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:6248:6294":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:20869:16143":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"18:9409:23292":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"1:11535:5338":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"12:1091:10082":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:4903:16775":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"17:8156:7476":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:44092:9814":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:2963:10894":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:10286:5320":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"0:0:1707":{"crate_id":0,"path":["sha2"],"kind":"module"},"6:8806:8974":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:20579:32768":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"7:4991:8454":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5370:10134":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"17:6460:7458":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:7136:9660":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:1213:10080":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"24:1178:5364":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"6:3135:37061":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"21:105:16413":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"1:43144:5314":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:1637:9010":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:7202:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:5071:7511":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"7:1576:8015":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:10660:6672":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:3129:36529":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"7:6706:8779":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:3677:10122":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:43792:9793":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:1733:10868":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"7:547:7952":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"18:12072:6906":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:9917:6618":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"7:4898:8400":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"18:12178:6919":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:47610:9341":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:10615:9430":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"12:326:6210":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:7411:7634":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:2753:10705":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:43173:5328":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2522:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:20760:16142":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:21443:32259":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"24:1019:16423":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"18:8931:6590":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"1:43621:9779":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:10314:10171":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:2540:6229":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:11898:642":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"18:13477:7287":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:7670:9608":{"crate_id":6,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:42666:9758":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:9410:6058":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:9380:23291":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:305:5289":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"4:517:5290":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"4:355:1829":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"19:671:9903":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:2758:10706":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"19:582:5876":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:11027:36806":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:8670:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"0:220:5821":{"crate_id":0,"path":["sha2","sha512","soft","sha512_schedule_x2"],"kind":"function"},"1:46446:9327":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"18:12550:7000":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:2869:128":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"18:9876:6530":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:20742:16146":{"crate_id":1,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"1:40012:9700":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:4624:7498":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"7:4797:8353":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:8260:10170":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:8748:8971":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"5:5712:6294":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"7:595:7978":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"1:2741:5711":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"18:12419:6974":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"7:4980:8448":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:8234:10166":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:7596:23220":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:47666:9343":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:4969:7508":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:9107:5970":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"0:107:1704":{"crate_id":0,"path":["sha2","Sha384"],"kind":"typedef"},"17:6981:10030":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:4167:6233":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:4914:6233":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:41332:9755":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:42167:5973":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:1239:5415":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"18:12046:6903":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"24:6142:5360":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"6:8960:10181":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"0:129:1870":{"crate_id":0,"path":["sha2","consts","H512_256"],"kind":"constant"},"17:7437:7635":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:7798:8904":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"18:13842:7402":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:11422:6773":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"18:13385:7262":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"0:127:1849":{"crate_id":0,"path":["sha2","consts","H256_256"],"kind":"constant"},"1:9147:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"6:6085:6244":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"7:7526:8890":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:6552:6252":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:43210:5333":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:11372:10123":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"7:4392:8196":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"22:22:1823":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"0:170:5749":{"crate_id":0,"path":["sha2","sha256","soft","sha256msg1"],"kind":"function"},"6:8103:16679":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"1:20729:16145":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:2378:7432":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"18:13506:7294":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:6544:7463":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:12607:7008":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"5:4321:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"24:802:16437":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"1:43665:9697":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:12113:6913":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:350:5282":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"1:45892:9313":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:0:443":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"5:7224:9666":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:8025:7690":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:39302:5308":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"12:1843:5911":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:9405:6057":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:2911:5430":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:0:497":{"crate_id":1,"path":["core"],"kind":"module"},"1:4322:6330":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:20909:16150":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"18:11969:6893":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"18:12006:6897":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"18:8548:23278":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:43461:5323":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:46652:9330":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:6400:9517":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"10:325:7865":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:3247:10118":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:5320:10129":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"0:112:1838":{"crate_id":0,"path":["sha2","consts","State256"],"kind":"typedef"},"1:10010:5321":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"7:5022:8464":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:11688:6272":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"7:4431:8217":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"26:125:124":{"crate_id":26,"path":["const_oid","encoder","Encoder"],"kind":"struct"},"17:4327:7490":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"7:4698:8303":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:5235:5440":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:2720:7446":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:3060:10111":{"crate_id":6,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"12:859:10076":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:32147:5867":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:11893:1367":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"6:7595:8903":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"18:11861:6876":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:46370:9325":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"23:437:5426":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"1:11461:9771":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:39176:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4125:16741":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"0:191:5801":{"crate_id":0,"path":["sha2","sha256","soft","schedule"],"kind":"function"},"1:9153:5973":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:7669:7473":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:4596:7497":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:20879:10856":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:8968:8979":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:3030:7477":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4737:6234":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"7:6848:8859":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:3782:10124":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"7:7503:8884":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:6390:9516":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:1981:9604":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"18:13777:7384":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:2906:33632":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:41479:9267":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"24:5784:5276":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"5:1404:9597":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:6236:10025":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:975:9908":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:10712:8945":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"18:13865:7406":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"18:9866:9948":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:40347:9725":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:39372:5982":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"7:6685:8772":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"24:1099:16427":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"17:3640:6496":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:44112:8992":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:40255:9713":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:3132:37062":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:1463:10209":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"0:109:1668":{"crate_id":0,"path":["sha2","consts"],"kind":"module"},"4:507:1674":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"18:9218:6609":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:43935:11084":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:1062:10078":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:7509:6256":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:10209:10135":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:6674:10990":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"18:12576:7002":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:6474:7475":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:43153:5315":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:3355:6233":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"18:12158:6918":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"19:755:9413":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:9120:37300":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:4574:8758":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:21966:9690":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:1924:16660":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"7:494:7918":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"0:91:1678":{"crate_id":0,"path":["sha2","sha512"],"kind":"module"},"3:0:1960":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:8250:11000":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:7161:5395":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:9381:10155":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"7:1609:8037":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"0:105:1700":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"typedef"},"5:5191:6276":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:41951:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:6793:9550":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"19:690:9403":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:361:10089":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"9:0:1708":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"1:47675:9344":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:9557:6609":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"18:11220:6728":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:1747:9011":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:2589:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:42393:9270":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"23:295:5438":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"7:4999:8456":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:3382:10221":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"17:5616:9447":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:43357:5321":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"7:4773:8340":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:21004:9019":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"7:4404:8201":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:8893:8978":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:11234:6729":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:372:1664":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"18:9512:9930":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:2319:7423":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"1:41530:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"6:8047:10161":{"crate_id":6,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"7:568:7963":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"6:6586:217":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:2985:10890":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:8337:8961":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"18:10589:9429":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"12:652:5318":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"24:1892:16433":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"1:20594:16429":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"18:13194:7214":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:42913:9761":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:41394:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"18:8195:23259":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"24:641:5398":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"1:40133:30944":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:40102:9248":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:4445:7492":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"7:1622:8044":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:22491:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:1630:588":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"18:11785:6859":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"0:148:1289":{"crate_id":0,"path":["sha2","sha256","soft","shr"],"kind":"function"},"4:371:1833":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"7:4821:8363":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:45592:9303":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"18:10555:9420":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:11446:6777":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"6:11225:10148":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:30466:28263":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"19:707:9406":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:0:1969":{"crate_id":16,"path":["addr2line"],"kind":"module"},"18:9443:9925":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"7:554:7955":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"18:12522:6996":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"18:8667:6581":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"5:4399:6300":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"7:4629:8290":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:47324:9336":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:1978:9914":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:2215:16662":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"1:11500:9775":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"7:4836:8367":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:10303:9972":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"11:36:7828":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:229:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"18:12345:6963":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:9985:5318":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:0:1663":{"crate_id":4,"path":["digest"],"kind":"module"},"1:46606:9329":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"8:32:22193":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:11653:6826":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"22:16:186":{"crate_id":22,"path":["crypto_common","Output"],"kind":"typedef"},"6:8854:16816":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:6351:23214":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:11902:743":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"17:7837:9576":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"7:0:816":{"crate_id":7,"path":["libc"],"kind":"module"},"1:3995:10222":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:413:165":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:21787:9681":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:12433:6976":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:11712:11063":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"18:12894:7123":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"24:2778:1832":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"typedef"},"1:40083:10941":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"18:12622:6672":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"5:2077:6222":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:3088:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:4990:10128":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2264:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"7:6008:8657":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"18:11800:6864":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:21116:9019":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:2827:7596":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:922:10069":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"22:51:16471":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"18:9933:9414":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:1422:10085":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:44131:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:10851:1818":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"1:6917:6452":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:3249:10119":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:7838:119":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:2830:7451":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:4602:10934":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"18:11090:6706":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:45792:9310":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:9068:38467":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:2922:5712":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:7060:9659":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:346:1825":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"1:2470:5858":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4760:16728":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:3208:10116":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:242:9904":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:43375:5325":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:22425:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:7509:7470":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:6446:6276":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:7528:6258":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"24:599:5287":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"6:8220:16742":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:2211:6326":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"7:6578:8737":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:2817:10882":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:44152:9819":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"18:13324:7246":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:40076:9706":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:40338:9724":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:8249:11001":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:40367:9727":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:11500:9643":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:5886:9472":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:6695:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:11573:6803":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"1:11732:11069":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:40389:9729":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:13344:7253":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:12461:6982":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:39216:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:7632:30892":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:3370:10870":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"17:6307:7455":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:47706:9347":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:41991:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"24:601:182":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"7:6151:8707":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:2867:210":{"crate_id":6,"path":["std","io","error","Result"],"kind":"typedef"},"17:5779:7517":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:7016:9560":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:6990:9007":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:13101:7190":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:13516:7299":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:20984:16138":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:13066:7186":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:537:1834":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"6:5354:10133":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"0:243:1618":{"crate_id":0,"path":["sha2","sha512","soft","compress"],"kind":"function"},"7:6800:8841":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:7077:23218":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:633:10207":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"7:7497:8883":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:41606:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"7:4857:8378":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:44364:9822":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:5920:9478":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"7:6047:8667":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:3168:10114":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:46292:9324":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:7591:10985":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5764:6238":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"18:9886:9950":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:41226:9253":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:40718:9249":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"18:13499:7292":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:11237:9639":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:5570:6237":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:9148:38466":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"12:703:10070":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:47695:9346":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:39358:7632":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"12:1071:38439":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:41289:9262":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"7:4960:8441":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:3182:33037":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"18:8573:23279":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"18:13651:7351":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:11891:1049":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"18:8389:23273":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"17:8090:9583":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:11162:9633":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:47823:9354":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"24:5672:5274":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"5:815:6282":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:39341:9116":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:10244:5323":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:9159:5975":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:43223:5334":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:44100:9816":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:10635:6671":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:21718:9680":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:11721:6830":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:7854:10158":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:4433:5984":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:22590:9039":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:30836:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:43809:9794":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:10931:1989":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"24:6227:5304":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"17:7478:7469":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:8427:16792":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"18:10569:9424":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:10272:5324":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:42458:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:21952:9038":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"18:9498:6602":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:44080:9811":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"24:771:16418":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"19:96:27122":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"18:12282:6955":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"1:43236:5329":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"7:5959:8638":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"4:463:1983":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"6:6009:6240":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:30272:9044":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:42658:6060":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:2796:10877":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:40726:9747":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:41671:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:12293:6957":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:20768:30365":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"5:6180:6312":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:9981:10101":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:2616:7442":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:47214:9335":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:6535:6206":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"22:56:16473":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"18:10691:23390":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:9362:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:4176:10125":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:12923:7134":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:2744:5864":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:21916:28267":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:43674:9702":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:40693:9744":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"25:22:16422":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"0:126:1848":{"crate_id":0,"path":["sha2","consts","H256_224"],"kind":"constant"},"6:8982:36527":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"24:2538:1671":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"typedef"},"24:6205:5303":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"6:8469:9615":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"1:4251:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"18:10039:9962":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"19:564:6471":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:7697:7464":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"23:143:5433":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"24:603:5377":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"18:9275:38460":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:43640:9781":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:7588:10059":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:3680:10123":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:42160:5971":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:7029:9563":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:10948:6265":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"26:142:128":{"crate_id":26,"path":["const_oid","error","Error"],"kind":"enum"},"17:6662:9535":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:5741:23211":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:2742:7447":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"7:7555:8897":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:4540:7495":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:40296:9717":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:44389:9823":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:2905:7454":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:20536:5876":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:2448:7435":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"7:488:7915":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"7:4641:8291":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"0:121:5564":{"crate_id":0,"path":["sha2","consts","K64"],"kind":"constant"},"18:12915:7133":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:22458:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"4:472:9008":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"17:6293:7527":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:45746:9309":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:2348:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:10628:10194":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"18:10840:6695":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"7:7568:8898":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:1768:610":{"crate_id":6,"path":["std","env"],"kind":"module"},"18:10402:9973":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"7:653:17266":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:9151:5972":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"5:7022:6286":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:46866:9333":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"18:13639:7349":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:13763:7382":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"18:11069:23285":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:40206:10238":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"18:10989:6667":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"17:3782:7485":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"7:1692:8098":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:7803:7653":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:11459:6779":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"17:5594:7461":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:40670:9741":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:7697:10154":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"7:4590:8287":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:154:6203":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:4932:7507":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:10130:5339":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"7:4941:8431":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:7471:10201":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"10:421:22209":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"7:4719:8315":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:10258:5319":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:8286:8951":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"0:106:1702":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"typedef"},"18:11993:6894":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:5586:9670":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:22524:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:7015:38028":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:12634:7011":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:4:1014":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"19:515:6467":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:5247:120":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"1:44084:9812":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:219:22312":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:11912:1126":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"7:587:7973":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"24:6271:5270":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"1:9609:6227":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"23:195:5432":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"6:4256:10126":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"24:1264:5373":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"7:1728:8112":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:11054:8984":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:22293:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"7:5032:8469":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"11:44:7829":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:41380:9264":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:11484:6781":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"7:562:7960":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"6:1561:5317":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"24:930:16454":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"12:359:6212":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:562:6704":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"17:4702:7499":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"18:10936:6698":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:1982:185":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4436:16744":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:5468:6233":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:7259:9267":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"24:1199:5285":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"18:10857:23283":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"17:7293:7614":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:5385:10135":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"18:10068:9966":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:1985:184":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:7081:5911":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:7181:9661":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:1844:10102":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"17:7065:9567":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"7:4288:8127":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:875:9597":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"19:609:9898":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:198:22308":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"18:10104:6620":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"24:809:16447":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"18:12098:6910":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:4255:10225":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:7683:7474":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:1995:10210":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:45437:9297":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"}},"external_crates":{"26":{"name":"const_oid","html_root_url":"https://docs.rs/const-oid/0.9.0/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.15.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}