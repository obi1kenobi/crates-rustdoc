{"root":"0:0:2067","crate_version":"0.3.9","includes_private":true,"index":{"2:12107:31465":{"id":"2:12107:31465","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8132"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11737:8127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:31458":{"id":"2:12093:31458","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11712:8132","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::rmatch_indices":"2:12096:31459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43507:8147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:31460":{"id":"2:12099:31460","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:31462":{"id":"2:12103:31462","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12049:23667":{"id":"2:12049:23667","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5382":{"id":"5:5382","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5383:32123","5:5384:8476","5:5387:32124","5:5390:32125","5:5398:32126","5:5399:32127","5:5400:2608","5:5401:23512","5:5402:23511"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12105:31463":{"id":"2:12105:31463","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12119:31467":{"id":"2:12119:31467","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8132"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12022:24238":{"id":"2:12022:24238","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12043:24279":{"id":"2:12043:24279","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12032:31451":{"id":"2:12032:31451","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11894:1397","crate::ops::IndexMut":"2:2985:2479","str::slice_unchecked":"2:12031:31450"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12034:24263":{"id":"2:12034:24263","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12033:24262"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12081:31455":{"id":"2:12081:31455","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12063:24271":{"id":"2:12063:24271","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11535:8123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12113:21436":{"id":"2:12113:21436","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8132"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12010":{"id":"2:12010","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12011:811","2:12012:21767","2:12013:31446","2:12014:31447","2:12016:31448","2:12019:24129","2:12020:31449","2:12021:314","2:12022:24238","2:12023:24234","2:12025:24235","2:12027:24236","2:12029:24237","2:12031:31450","2:12032:31451","2:12033:24262","2:12034:24263","2:12035:28871","2:12036:28844","2:12037:20093","2:12038:28866","2:12039:28855","2:12040:22549","2:12041:31452","2:12042:28872","2:12043:24279","2:12046:23665","2:12049:23667","2:12052:19886","2:12056:19887","2:12060:22548","2:12063:24271","2:12066:24273","2:12069:31453","2:12072:31454","2:12075:24275","2:12078:24277","2:12081:31455","2:12084:31456","2:12087:2287","2:12090:31457","2:12093:31458","2:12096:31459","2:12099:31460","2:12101:31461","2:12103:31462","2:12105:31463","2:12106:31464","2:12107:31465","2:12110:31466","2:12113:21436","2:12116:24280","2:12119:31467","2:12122:31468","2:12125:31469","2:12128:31470","2:12130:23513","2:12131:24133","2:12132:23514","2:12133:23510","2:12134:23509","2:12135:31471","2:12137:2396","2:12138:31472"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12135:31471":{"id":"2:12135:31471","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4535:31471"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43656:8143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5384:8476":{"id":"5:5384:8476","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12090:31457":{"id":"2:12090:31457","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11712:8132","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::matches":"2:12087:2287"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43579:8150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:23665":{"id":"2:12046:23665","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12084:31456":{"id":"2:12084:31456","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12014:31447":{"id":"2:12014:31447","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:2396":{"id":"2:12137:2396","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4536:2396"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43665:2397","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12031:31450":{"id":"2:12031:31450","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11894:1397","str::slice_mut_unchecked":"2:12032:31451","crate::ops::Index":"2:2981:2478"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12069:31453":{"id":"2:12069:31453","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11712:8132","str::split":"2:12060:22548","prim@char":"1:11888:419","`DoubleEndedIterator`":"2:7240:121","str::rsplit_terminator":"2:12072:31454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43407:8152","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5383:32123":{"id":"5:5383:32123","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:2318","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:2318","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12042:28872":{"id":"2:12042:28872","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43649:8133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12011:811":{"id":"2:12011:811","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11888:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12052:19886":{"id":"2:12052:19886","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41396:179","prim@char":"1:11888:419","self::pattern":"2:11712:8132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12131:24133":{"id":"2:12131:24133","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39552:24128","Self::is_ascii":"2:12130:23513"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39552:24128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5387:32124":{"id":"5:5387:32124","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12021:314":{"id":"2:12021:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12022:24238","`u8`":"1:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12013:31446":{"id":"2:12013:31446","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12125:31469":{"id":"2:12125:31469","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8132"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5402:23511":{"id":"5:5402:23511","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12134:23509"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2067":{"id":"0:0:2067","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":[],"is_stripped":false}}},"2:12040:22549":{"id":"2:12040:22549","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43611:2580","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:24280":{"id":"2:12116:24280","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8132"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5401:23512":{"id":"5:5401:23512","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12133:23510"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:31461":{"id":"2:12101:31461","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:24234":{"id":"2:12023:24234","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12060:22548":{"id":"2:12060:22548","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11712:8132","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::split_whitespace":"2:12038:28866","str::rsplit":"2:12066:24273"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43357:2584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12128:31470":{"id":"2:12128:31470","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11673:127","`FromStr`":"2:11672:2752"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11672:2752","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11672:2752","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12134:23509":{"id":"2:12134:23509","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:31472":{"id":"2:12138:31472","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4533:31472"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43674:8144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5399:32127":{"id":"5:5399:32127","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:280:2318","`String`":"5:7241:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:2318","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:31468":{"id":"2:12122:31468","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8132"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12016:31448":{"id":"2:12016:31448","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12014:31447"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12036:28844":{"id":"2:12036:28844","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43333:8138","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:31466":{"id":"2:12110:31466","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8132"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:28855":{"id":"2:12039:28855","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12038:28866"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43640:8134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12041:31452":{"id":"2:12041:31452","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43621:8146","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12020:31449":{"id":"2:12020:31449","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12130:23513":{"id":"2:12130:23513","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12056:19887":{"id":"2:12056:19887","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41396:179","prim@char":"1:11888:419","self::pattern":"2:11712:8132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12027:24236":{"id":"2:12027:24236","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5400:2608":{"id":"5:5400:2608","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12029:24237":{"id":"2:12029:24237","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:24277":{"id":"2:12078:24277","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11888:419","str::splitn":"2:12075:24275","self::pattern":"2:11712:8132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43479:8119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12035:28871":{"id":"2:12035:28871","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43327:8139","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12038:28866":{"id":"2:12038:28866","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12039:28855"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43631:8135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12037:20093":{"id":"2:12037:20093","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43343:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12066:24273":{"id":"2:12066:24273","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11712:8132","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::split":"2:12060:22548"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43375:8117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5390:32125":{"id":"5:5390:32125","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12072:31454":{"id":"2:12072:31454","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11712:8132","str::split":"2:12060:22548","prim@char":"1:11888:419","str::split_terminator":"2:12069:31453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43425:8151","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:31459":{"id":"2:12096:31459","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11712:8132","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::match_indices":"2:12093:31458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43525:8148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5398:32126":{"id":"5:5398:32126","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12033:24262":{"id":"2:12033:24262","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12034:24263"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:31464":{"id":"2:12106:31464","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:24275":{"id":"2:12075:24275","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8132","str::rsplitn":"2:12078:24277"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43461:8121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12025:24235":{"id":"2:12025:24235","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:23514":{"id":"2:12132:23514","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12012:21767":{"id":"2:12012:21767","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12019:24129":{"id":"2:12019:24129","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11279:8136"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12133:23510":{"id":"2:12133:23510","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:2287":{"id":"2:12087:2287","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11712:8132","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::matches":"2:12087:2287"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43561:8149","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"18:96:19874":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:6132:15594":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:6990:2468":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:7538:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:22425:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:5032:15353":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:42476:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:7670:2441":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:21107:2557":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:4803:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:7821:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:10142:15925":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:11535:8123":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:47666:8022":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:2822:8495":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:7588:2451":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:1404:2424":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:43135:8106":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:5051:12779":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:42449:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:1454:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:10010:2584":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4619:12734":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:7932:23258":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:10416:2603":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:6990:15633":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:44131:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:5320:2757":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:3208:2605":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:4757:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:45822:2923":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:11468:23133":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:8925:21439":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:573:9266":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:2589:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:43792:8165":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4732:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:2985:2479":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:2348:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"14:160:14580":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7335:33715":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:9822:15829":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4707:12741":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:30266:8192":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:5920:15588":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:12597:2467":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:5677:15579":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:43884:8168":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:21443:30473":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:41631:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:7161:8435":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6321:15602":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:1947:15817":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:20760:2860":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:40376:8440":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:8953:15755":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:2116:30948":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:4757:15294":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:10692:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:40684:2408":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:44283:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:8410:2747":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:41831:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:43621:8146":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4553:12729":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:9148:34572":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:11600:18546":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:11372:2631":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:10416:15965":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:3547:2422":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:40163:2041":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:5764:2797":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:13367:19823":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:1514:10168":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:10050:23270":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:6935:15630":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11832:15927":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:21839:29566":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:1366:2422":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:13842:19858":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:9159:8070":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:44100:8640":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:11893:1367":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:2502:14659":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"18:727:19896":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:5071:15368":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:5834:8856":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:43333:8138":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:2817:8494":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:4019:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:12512:2992":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"11:991:2436":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:12158:19055":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"11:1688:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:9933:15846":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:7411:15638":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:5870:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"18:574:34589":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11532:18541":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:11891:1049":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:47721:8027":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:6367:2423":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:2404:14655":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"14:0:2178":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:40057:8256":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:3047:14680":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:1667:1087":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:953:2434":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:491:34608":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:7509:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:9721:15819":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:43763:8163":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"9:388:14450":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:1747:28537":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:3158:2442":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:633:31024":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:10822:2506":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:6538:2799":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:9149:8064":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:6605:2717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:40121:2524":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:46606:2884":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:6482:2794":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:21916:28551":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:13477:19835":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:2426:14656":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:9628:15796":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"14:202:8173":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:5642:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:6061:14622":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:20729:2863":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:13612:19841":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:7318:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:3370:8201":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:11015:2768":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:47675:8023":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10660:15777":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:9003:20481":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:10649:15973":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"10:44:14557":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:242:34580":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:14:2290":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:55:14618":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"16:2830:14673":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:7065:33623":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13821:19857":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:1594:2445":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:4322:8233":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:10226:21076":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:880:2421":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:40356:8459":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:10835:2762":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:7198:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11902:19039":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10334:15760":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10635:15963":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:43649:8133":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:41711:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:11243:21963":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6351:15605":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:4702:15287":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:8082:2612":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:5926:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:43407:8152":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:8427:2748":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:10272:8122":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:5798:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:41203:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:4207:2421":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:3142:15888":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:361:2393":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:46036:2950":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:3063:14681":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:22524:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:9157:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:6552:2800":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:10080:15923":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:10130:8124":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:4251:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"11:744:2425":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:7503:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:3644:2423":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:7164:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:4818:15307":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"12:0:2177":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:5067:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"11:828:2432":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:2911:2457":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:2862:14674":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"11:1847:2426":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4827:12756":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:43640:8134":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:2720:14668":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:1721:2673":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:4596:15229":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"11:97:33401":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:9839:15815":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:4857:12760":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:21787:30076":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:13376:19824":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:1728:10190":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:2470:14658":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:5998:15592":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"10:0:2175":{"crate_id":10,"path":["adler"],"kind":"module"},"1:10948:22904":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:154:14628":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:5797:33677":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:2843:8500":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:3135:22329":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:5829:13370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:8485:2750":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:10652:25542":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:11732:8129":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:10092:8110":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12634:19085":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:7224:2522":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:2847:8501":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:8792:2810":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:4818:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:47572:2897":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:5179:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:47823:8033":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:4510:15215":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11234:18523":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:10691:15975":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:3060:2613":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"5:1242:2439":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:40069:8257":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:3124:2443":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:11585:18545":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:1532:10171":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:4307:12703":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:7029:33497":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:4176:2682":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:13332:19820":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:39372:8234":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:21978:2642":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:7837:15662":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:7578:14405":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:8047:15665":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:10244:8121":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:2694:14667":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:1588:10177":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:4104:2679":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11422:18533":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"11:638:2421":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:0:2181":{"crate_id":17,"path":["object"],"kind":"module"},"17:12835:19788":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:21332:2859":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:9469:15791":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:7136:2419":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:41512:2731":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:30836:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:5886:15587":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:1589:2444":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:9098:23248":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:4726:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12178:19056":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:8124:2581":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:43631:8135":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:5305:15554":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:12330:28113":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:8788:15752":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:8598:15750":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5747:13402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:500:9257":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:7460:15739":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:43479:8119":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:1916:2465":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4499:12723":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:43507:8147":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:1042:32231":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:1821:2496":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:5900:13414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:2077:2368":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:42674:8287":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:6575:15619":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:4904:15321":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4377:12708":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:9062:2561":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:40670:8426":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:40347:8450":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:1519:10169":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:568:9265":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"11:2087:2438":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:7509:15645":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"11:359:33398":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13181:19807":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:564:19904":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:8968:15635":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"11:665:2423":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:7854:2595":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:888:2425":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:10743:15764":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:45543:2922":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:39192:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:13678:19847":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:44334:2991":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:22590:2641":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"11:2212:33409":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:2832:21078":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:42917:8099":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:39216:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13426:19829":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:10462:2378":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"13:0:2171":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:5557:15572":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:13698:19849":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:30864:8275":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:9424:15788":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:13516:19839":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6431:15610":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:47464:2925":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:10681:15974":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"18:707:8130":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:42683:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"14:7:14580":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:8838:29498":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12563:19081":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:7259:2730":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:7148:2420":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:6296:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:10000:15919":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:3615:2628":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:5402:14617":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:3168:2603":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:4183:8085":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:6696:15621":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:3129:31234":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:9696:15805":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:11449:8040":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:5967:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:20768:29150":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:10026:15921":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:11913:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:21718:28280":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:6854:15626":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:9151:8063":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:3622:31099":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:420:14625":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4970:12772":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:12382:8283":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:2319:14651":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:8156:15671":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:2932:2315":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:6218:15597":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:12357:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:2929:2314":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:521:19898":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:757:2426":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:8496:2751":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:6558:15618":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:9488:15806":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:23037:2635":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:43969:8153":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:7803:15661":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:9985:2422":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:8469:2749":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"10:36:33395":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"4:0:2172":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:3881:2646":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13488:19836":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:2372:2543":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:5693:15580":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8387:2746":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11011:15724":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:46014:2944":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:43144:8105":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:5719:2789":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:12282:19061":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:4932:15325":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"14:221:14590":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:13433:19830":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:6785:13841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:2768:8486":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:11372:18530":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:42713:30058":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10491:15937":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:20982:2557":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4559:12730":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"11:652:2422":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:10465:15939":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:40022:8263":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:11500:8646":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:8420:15744":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:6943:15631":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:766:19890":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:1572:2427":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:41479:2730":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10885:15770":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:1555:10174":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:39358:15674":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:43265:8115":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:41380:2627":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:21879:28424":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:609:34619":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:35:2481":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:7520:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:8443:15745":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:1091:14570":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12293:19062":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:20938:2853":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"5:6446:31099":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:6201:15596":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:11912:1126":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:9028:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13024:19796":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"9:0:2174":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:8147:2584":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:45491:2911":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:5616:15575":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:42174:8073":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:8762:2768":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:11895:1481":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:9381:2549":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:9038:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2163:8519":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:11737:8127":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:4679:2662":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:680:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6236:15598":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:43255:8114":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:22458:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:5843:13371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:10580:15970":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:7572:2394":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:6757:2849":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:11844:19035":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:6607:8198":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:4568:15225":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4851:12759":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:10402:15953":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13812:19856":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:3401:2553":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:9107:2519":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:3939:2651":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:10053:8123":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:30041:2637":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:4256:2683":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:3465:2578":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:4767:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12388:19069":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12607:19084":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:2763:8487":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4980:12773":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11163:15984":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:4932:12767":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:6116:12617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:45391:2910":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:41530:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10989:15775":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:7528:22908":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:8718:15726":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:2407:31006":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:13194:19808":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:3150:2444":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:922:2429":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:2696:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:47610:2931":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:9028:15756":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:7781:2548":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:9374:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:21337:2869":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:9946:15844":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:1539:10172":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:10657:2546":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:4509:12724":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7635:15653":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:4318:12704":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4947:12769":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:1544:2569":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:12345:19066":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:9410:8286":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:10015:15920":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:6047:13425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:7443:14376":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:2509:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:11339:18528":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:4564:2651":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:10705:15976":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:5798:13407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:7937:20488":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:1078:32229":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:40448:8441":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:10936:15773":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:43084:28873":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:10826:21526":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:11672:2752":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:13763:19852":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:41243:2623":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:22293:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:4336:31104":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7711:15657":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:857:2422":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11037:15776":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"11:399:33417":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:10804:8112":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"9:481:14448":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:4836:12757":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:2344:2532":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4478:12720":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:10257:15886":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:488:9255":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:9557:15760":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:39341:8209":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:47706:8026":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"7:32:14421":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:1895:2517":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11410:18532":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:40012:8262":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:1785:2486":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"18:636:34595":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:25847:2636":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"18:582:8275":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:4872:15313":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"9:502:14452":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:11892:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:3673:2460":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"11:326:33402":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:9826:15816":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:1931:653":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:4480:15209":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:8823:15753":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:12576:19082":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:21665:28283":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:11225:20092":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:7555:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:40399:8453":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:8134:2582":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:2204:33408":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:6336:15604":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:10052:15901":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:20594:30821":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:40459:2582":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:7838:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"11:1009:2437":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:2774:8489":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:547:9262":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5935:13415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:2614:2596":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:6520:15616":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:1783:2485":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:20536:8275":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:45968:2889":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:10670:21659":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:211:8062":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:6136:13454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:22326:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:2869:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:40034:8144":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:2298:14623":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:3182:30874":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:10303:15881":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:9038:34565":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:9866:15836":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:4760:2661":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:265:31099":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:4:1014":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"18:690:19894":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4719:12742":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:43425:8151":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:3899:14748":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"11:1873:2444":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:2812:8493":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:6830:13845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3782:2633":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7557:15649":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:5354:2759":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:11653:18550":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:22491:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:3911:2648":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11282:18525":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:1351:2421":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:1657:10183":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:42898:8626":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:9917:15868":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:2879:14675":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:9370:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:2522:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7437:15639":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5773:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:10258:8119":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:42421:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:9545:15798":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:2378:14654":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:45413:2915":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:7077:15634":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:44112:8653":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:6890:15628":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:4903:2722":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:40306:8446":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:46528:2878":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:5857:13410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:7014:2426":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:7659:2406":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4911:12765":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:4639:2714":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:39075:8221":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:9617:15797":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4449:12716":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11060:15777":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:6768:8424":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:7791:2546":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:590:30081":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:863:2448":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:20984:2855":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:4047:2422":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:10682:2550":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"7:0:1543":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:49668:2872":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:40076:8258":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10068:15922":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:8948:23277":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"11:1839:2421":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:3142:8505":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:11911:1553":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:3458:2555":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:10823:15767":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:7859:15663":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4845:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:44088:8637":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:5809:13408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:6662:15620":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:20579:30820":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:1733:8530":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"14:165:14581":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:4007:29021":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:7786:2549":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:22392:2384":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:1432:2429":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:41751:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:2906:31010":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"11:2192:33411":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:6553:10108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:7526:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:6814:13843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:21083:2557":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:280:2318":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:42433:28560":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:43778:8164":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:4737:2667":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:5367:14621":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:11726:8130":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"19:0:1031":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:32147:8467":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:9362:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:20879:8518":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:6917:2610":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:6598:13833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:8226:2676":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"11:840:2433":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:45792:2917":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12331:19065":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:3157:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:5779:13405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:8776:2769":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:43223:8097":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13564:19840":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:7317:33553":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"14:31:14580":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4688:12739":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:9295:30833":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"5:5035:2785":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:7595:2381":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:40206:2525":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:11461:23261":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:911:2427":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:39280:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:45644:2888":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:6376:15607":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:20564:30475":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:43461:8121":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:11904:740":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:7683:15655":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:7266:8175":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:6009:22896":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:41871:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"18:515:19901":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:47747:8029":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:9592:30014":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:2898:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:11279:8136":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:12419:19071":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:40367:8451":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:43674:8144":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:10505:15968":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11520:18540":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:11249:8596":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4486:12721":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:7644:2405":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:9218:15760":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:1228:2437":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6390:15608":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:11909:1495":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:8736:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:5015:12776":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:6307:15601":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:10628:2716":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:3152:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:2706:2383":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13135:19803":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:7241:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2515:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:2922:2312":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:11899:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:11910:789":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:45437:2875":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:43245:8116":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:3775:31099":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:46682:2896":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"18:624:34601":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:5528:8448":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:926:2430":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:47402:2891":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:9498:15805":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"9:52:14468":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:43935:8170":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:11837:21584":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:8166:2629":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:5104:15377":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:2931:14677":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:5862:13411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:2346:2533":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11861:19036":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:10377:15887":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:7532:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:39334:8506":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:2833:8498":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:9350:34571":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:4331:12705":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:719:19888":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:40315:8447":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"9:234:2746":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:3534:2421":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:5818:2785":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:40149:8572":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:1034:15807":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:859:2434":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:5418:33678":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:5370:2760":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:9380:15786":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:6764:31140":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:8907:20473":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:43327:8139":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:6587:13832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:4112:2680":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:4642:2687":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:3249:2602":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:3931:2569":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:474:9253":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:5058:12780":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:4423:12713":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:5944:15589":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:45561:2928":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10670:15964":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:4681:2665":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:6848:13846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4991:12774":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:12646:19086":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:1197:2436":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:10712:2552":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:12550:19080":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:3440:2519":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:40699:2611":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:8870:2809":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:20596:30823":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12959:19793":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12510:19077":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:45622:2882":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:9961:2421":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:12542:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:7595:8433":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:30466:28502":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:0:816":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11800:19034":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:1565:2423":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:8242:2686":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:2808:14672":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:13411:19827":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:39236:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:1071:2438":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:676:2404":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:8025:15664":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:47648:2952":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:43989:8154":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:4574:25557":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:10516:15933":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:39552:24128":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"11:703:2430":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:12046:19047":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:12915:19791":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12461:19074":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10527:15969":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:5779:15584":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:11712:8132":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:43561:8149":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11090:15779":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:21:681":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:5811:15585":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:2796:8490":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:42666:30063":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:44364:8046":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10931:22902":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:9959:15872":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:7596:15651":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:39258:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:2764:14670":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:1126:14571":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:6151:13455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4890:12763":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:8160:2630":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:10722:21676":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:39998:8260":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:8047:2551":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"9:352:14465":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:21827:2638":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:4037:14862":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:45347:2909":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:40424:8455":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:653:9316":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:7572:33557":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:4790:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:8360:15742":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:7862:2460":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:11901:742":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:41470:2423":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:6535:33568":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:386:15737":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:43375:8117":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:247:34554":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13249:19813":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:4521:12725":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:3276:2427":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:9566:15761":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:8142:15670":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:4255:8227":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:46446:2930":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:12308:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:5485:8196":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:2839:8499":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:20922:2557":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:43153:8109":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:8264:2717":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:4294:12702":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:1844:2502":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:9772:15824":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:40083:8259":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:8109:15668":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:9108:34568":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:11898:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:6585:8436":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10967:15774":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:9803:2557":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:43809:8166":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:3925:2649":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13506:19838":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:41581:2421":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:6821:13844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4882:1001":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:6373:2791":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:1048:2436":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:7798:2550":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:11003:2767":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:4681:2645":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:9120:23141":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:39302:2413":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:11145:22893":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:40487:8458":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:5976:15591":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:7519:15646":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:8573:15749":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:46189:28536":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:20804:2866":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:2312:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:13033:19797":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6243:33564":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:10203:8118":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:44326:2990":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:9981:2496":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:13857:19859":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:44096:8639":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4821:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:2744:8054":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:5032:12778":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:7543:15648":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:45990:2895":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4288:12701":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10428:15966":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:9641:15809":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:10316:15882":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:5959:13417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:2448:14657":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:22260:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:4990:23236":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4571:12731":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:5847:15586":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4952:12770":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:43525:8148":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:7195:29552":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11069:15778":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:8730:2766":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:554:2375":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:480:22751":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:13453:19832":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:7693:2506":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:4096:2678":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:3382:8205":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"5:2908:30988":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:11393:2633":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:9624:27928":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:638:2402":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:5755:13403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:9043:2811":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:43343:2583":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:40042:2397":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:5988:13420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:963:31099":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:10419:2605":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:2512:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:2746:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:7258:14216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:3749:14694":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:6442:15611":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:11905:1499":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:901:2426":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:9312:15762":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:6544:15617":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:755:19897":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:5947:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:7497:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:45459:2881":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:13066:19800":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:1443:2430":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:13689:19848":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:9734:15818":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:40133:29552":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:8753:15751":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:11907:1497":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:11889:1515":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:652:34589":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:699:19895":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:47214:2885":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:21431:2850":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:9512:15801":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:5346:15571":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:9877:21906":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:45681:2943":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:1692:10186":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13159:19805":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:39970:8261":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:45699:2949":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"11:821:2431":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:2360:2537":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:4332:8234":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:10354:15889":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13211:19809":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11870:21662":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"11:1879:2445":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:9596:15802":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:3983:2653":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:7669:15654":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:11854:20443":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:8260:2715":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12536:19079":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:6180:31115":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"5:7044:2423":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:8195:15722":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:9138:15758":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8479:2421":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:4898:12764":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:3995:29023":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11446:18535":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:305:33414":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:4366:2569":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:3640:14686":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6488:15614":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:11894:1397":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:1630:588":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:46370:2918":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:9265:15761":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:4125:2681":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:9147:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:8670:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:3585:14685":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:7089:2423":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:2636:31196":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12126:19053":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:2518:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:10598:15774":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:11237:25545":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:1612:31099":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:9670:15821":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:2242:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10735:15978":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:4344:12706":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:4377:8235":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13233:19811":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:6597:8197":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:8256:15720":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:11903:744":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:2616:14664":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:2695:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:6819:15625":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:5630:15576":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:10440:15967":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:7081:2423":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:530:2373":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:2694:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:9178:15759":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:13461:19833":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:3688:2461":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:11091:2811":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:5239:8090":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:393:33420":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:44108:8635":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:41538:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:532:9260":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:20577:30818":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:6904:15629":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:42393:28413":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:46716:2945":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:21945:30068":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:1866:2443":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:43611:2580":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:47526:2946":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:42913:27844":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:5502:2765":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:2208:2527":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:46652:2890":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"18:113:19875":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:13082:19801":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:8632:15721":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:6361:15606":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:21862:28569":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:8090:15667":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:30288:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:41394:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:7568:14404":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:7052:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:6739:31115":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"11:731:2424":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:2753:2844":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:10039:15879":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:12113:19052":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:4433:8237":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:13101:19785":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10923:15772":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:40268:8437":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:39379:8218":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:4508:2705":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:2470:8279":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12236:19059":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:8283:15740":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:32060:8552":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:6400:15609":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:11500:14607":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13053:19799":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11891:19038":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13041:19798":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:11308:21081":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:689:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:7338:8193":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:3680:2631":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"11:119:33400":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:40277:8438":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4653:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:4782:30093":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:45746:2852":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:3169:8222":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:6254:15599":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9228:34581":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12894:19789":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:0:1389":{"crate_id":1,"path":["std"],"kind":"module"},"2:2827:8497":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"18:660:19891":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:43163:8107":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11193:15985":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:10589:15971":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:21803:28540":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:44389:30059":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:8319:2726":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:45592:2876":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"11:1035:2438":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:1614:10180":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11785:19033":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:4141:8240":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:10847:21666":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:6717:14595":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:7471:23226":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:45938:2883":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:47770:8030":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:5468:2569":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:10209:2761":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:3521:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12449:19073":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:614:34594":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:11195:20043":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:46158:28562":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:41911:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:2926:2313":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:9068:34579":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:39161:8504":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:42167:8072":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:9609:22748":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:7591:2454":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:45521:2916":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:40438:8456":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:4576:25559":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"8:0:2173":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:6685:13834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:40408:8454":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:2981:2478":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:6506:15615":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:7181:2523":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:41991:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:9577:15804":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:10712:15977":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:9409:15787":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:3234:8057":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:8286:2664":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:1594:10178":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:11162:20447":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:2206:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:2851:8502":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:20990:2857":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:6293:15600":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:12224:19058":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:8337:2745":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:6800:13842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:11210:20101":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"15:0:2179":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:9322:34583":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:2780:8488":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:4383:12709":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:39176:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:9478:15808":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:8893:2790":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:11900:745":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"13:226:33468":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8982:20151":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:10942:22905":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:535:33688":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:8918:2372":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"11:783:14567":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:40389:8452":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:5974:13419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4459:12717":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:3079:2480":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:1752:10192":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11459:18536":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4492:12722":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12522:19078":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:5191:31099":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:11027:21655":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:6755:13839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:8234:2630":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:3030:14679":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:6569:9138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:2742:14669":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:9153:8072":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12138:19054":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:8838:2808":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:3987:2654":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:4751:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:2784:2845":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:1213:2438":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:9895:15842":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:844:2421":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:2550:22748":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:11938:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:8960:20490":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:562:9264":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:8250:2733":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:6793:15624":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:3677:2632":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:6706:13837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:2967:14678":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:11556:18543":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:8548:15748":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:46111:28567":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:8129:15669":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12483:19075":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:11887:936":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:8214:15674":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:7321:2427":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:6868:33509":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:1637:8415":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13399:19826":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:10761:15765":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:41289:28410":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:40324:28697":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:10798:15766":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:1756:8529":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:40116:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:4371:12707":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:41309:29560":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:21561:2856":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:8389:15743":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:2905:8048":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:1995:2461":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:10092:15924":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4466:12718":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:42658:8288":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:10286:8120":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:40255:2581":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10104:15880":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:11035:8653":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:4578:25561":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"18:80:19873":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:44080:8636":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:5686:2787":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"15:219:14603":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:3266:15906":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:11888:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:815:2447":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:30272:8479":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:41671:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13344:19821":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:7767:15660":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:930:2431":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"7:79:14428":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:4260:8228":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:7467:15641":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:9188:34570":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:30232:2456":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:11424:8645":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"18:0:2182":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:5655:15578":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12085:19050":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:9453:15790":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:2805:8496":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:506:9258":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:1564:10175":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:39982:28548":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:7942:2597":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"18:538:19903":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:6724:13838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11641:18549":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:4969:15338":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:4137:2569":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:11544:18542":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6700:13836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:1715:10189":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:32020:2770":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:13651:19844":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:4414:2687":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:8072:15666":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:3446:14684":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:6721:28044":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:1682:10185":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:8806:2807":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:8075:2610":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:4042:8053":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:47785:8031":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:20742:2864":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"6:4920:12766":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:7616:2378":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:1609:10179":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6691:13835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:6097:2994":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:4865:12761":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:4797:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:21116:2858":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:5910:2801":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:2867:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:4386:8236":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:13316:19818":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:1422:2428":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:10165:8117":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4641:12736":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11355:18529":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:9683:15820":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:8651:14619":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:9405:8285":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:5908:2569":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12072:19049":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:41791:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13744:19851":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:8215:2684":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:0:2180":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:39955:2397":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:11502:18539":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:40693:8428":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:3815:14712":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6179:15595":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:12902:19790":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:12295:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:13324:19819":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:526:9259":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:42160:8064":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:1924:2518":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:5247:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:2905:14676":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:13639:19843":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:1525:10170":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12318:19064":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:6133:20457":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:13292:19816":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:7757:15659":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:2668:14666":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:32056:21374":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:11813:15928":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:4914:2569":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:917:2428":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:562:15739":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:9876:15870":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:3753:2427":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:11821:15926":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:40050:8143":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:7509:22891":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:11688:22911":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4546:12728":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4999:12775":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:7485:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:8931:15723":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:4743:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:780:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:7846:22325":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12259:19060":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:2506:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:6474:15613":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:6668:10112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4698:12740":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:44376:8044":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:20770:8518":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:7211:2317":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:21771:28539":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11391:18531":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:44164:8654":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:44347:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"11:816:2428":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:1382:2423":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:11461:8647":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:7491:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:2792:8491":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:1463:2459":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:46292:2912":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:40246:2476":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:6999:2423":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:11946:19041":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:7697:15656":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:12592:19083":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11721:19031":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:11168:2773":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:11859:2407":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:6024:33291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13667:19846":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:8103:2556":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:9813:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:8251:2732":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:11484:8644":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:41454:2421":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:8979:34564":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:6981:15632":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:7015:27161":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:22227:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:7665:2440":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:1650:10182":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:2916:30987":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:11902:743":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:39365:28713":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"5:7030:31226":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11879:19037":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:5880:13413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:3225:14682":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:5385:2761":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:40726:8432":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:46060:2951":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:9098:15757":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:3117:2421":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:40338:8449":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:8180:15673":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:3383:2554":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:3247:2601":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:7165:8434":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4813:12754":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:6578:13831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:959:2435":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:7202:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:40296:8445":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:6085:2992":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:6409:2798":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:6776:13840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:3292:2590":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:47862:8034":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:2264:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:8843:30540":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:6332:23263":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:8683:15725":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:2169:32205":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4538:12727":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:4328:2677":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:8310:15741":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:21854:28414":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:8141:2583":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:4399:31104":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:5439:2762":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:8667:14617":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11993:19043":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:6188:2801":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:11072:20095":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"11:2060:2436":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:42031:2786":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:8208:2625":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:5724:15582":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"14:215:14589":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:279:33404":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:7588:15650":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:4416:12712":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:20909:2868":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:482:9254":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:867:2423":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:7366:15637":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13309:19817":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:3184:2445":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:42153:8063":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:7211:2521":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:12019:19045":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:2362:2538":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:44291:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:43210:8096":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:4590:12732":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:41606:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:6294:31099":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:3872:14745":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"11:1071:33421":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13791:19854":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:3875:2647":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:4005:31099":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4773:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:42498:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:9534:15799":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:7677:2505":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:42458:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:13865:19860":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:2572:14662":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:2691:2310":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:4875:12762":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:2317:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:2574:2586":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"11:675:2429":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"9:421:14451":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:8220:2685":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:44152:2848":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:4431:12714":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5816:13409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:9161:8071":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12980:19794":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:2758:2846":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:7498:15644":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:20869:2861":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:5235:8089":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:1736:10191":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:44104:8634":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:41445:8509":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:5741:15583":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:3973:2652":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:9443:15789":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:13659:19845":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:11258:18524":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:1700:10187":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:13721:19850":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:12433:19072":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:10138:2772":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:13625:19842":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"13:110:33467":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:6728:15622":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:1787:15823":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:7478:15642":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:618:2399":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:4321:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:2642:14665":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:41462:2422":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:3197:8056":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:9117:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:2151:589":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:8912:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:3449:22168":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:3325:2611":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4404:12711":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"11:1843:2423":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:6545:9304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:7743:15658":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4629:12735":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12098:19051":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"18:481:19899":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4609:12733":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:2469:2557":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:5021:23236":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2692:8055":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:4624:15233":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:2477:2593":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:7275:14217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:5693:2788":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:7449:15640":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:10452:15940":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:43184:8098":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:47324:2919":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:9796:15822":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:5643:15577":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:6236:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:43656:8143":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5022:12777":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"18:531:19902":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:6248:2426":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:41368:2626":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"0:0:2067":{"crate_id":0,"path":["winapi"],"kind":"module"},"17:12372:19068":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:6865:25784":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:8170:15672":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:5571:15573":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:1634:33412":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:681:19893":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:44092:8641":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:7257:20489":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:40677:28885":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:4941:12768":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:4808:795":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:21900:28437":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11471:18537":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:6164:33520":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:2933:15883":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:123:8937":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:11265:8598":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:41521:8582":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:8784:2421":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12307:19063":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:40196:2526":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:6460:15612":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:5594:15574":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:541:9261":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:7590:2379":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"11:1852:2427":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:5785:13406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"11:60:33416":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:13219:19810":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:46866:2879":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:1576:10176":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6628:10135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:22359:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:494:9256":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:6022:15593":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"11:1540:14573":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:10422:2601":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:40286:8444":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:12770:19786":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:8171:2621":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:30302:28568":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:5987:8460":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:6016:13424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:9973:15845":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:4845:2712":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:8858:15754":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13499:19837":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10897:15771":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"18:599:34598":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:936:2432":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:4540:15221":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:21966:2639":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:4392:12710":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6057:13426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:9386:21072":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:5586:8439":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11924:19040":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:21088:2854":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:9155:8073":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:13803:19855":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:20549:30475":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:43357:2584":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12059:19048":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:7103:15635":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13240:19812":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12006:19044":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"18:644:34589":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:6369:2408":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:11054:2561":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:2912:30986":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:10569:15936":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:5065:12781":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:5334:2758":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:947:2433":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:1821:2464":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:4406:2382":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:6101:22910":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:585:2395":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:43857:8167":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:9653:15835":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:2211:2528":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:43956:8172":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:2337:14652":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:11331:2632":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:10865:2769":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:2161:8518":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:9523:15800":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:12501:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:5563:2801":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:6876:15627":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:10626:15972":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:2963:8058":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:2354:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"11:867:2435":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:13385:19825":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:975:15803":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11573:18544":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:10000:21071":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:7255:8174":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:13443:19831":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:7005:2449":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:10125:15900":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:21559:2557":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"11:0:2176":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:10545:15775":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:2741:2311":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:10357:22906":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"18:736:19889":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7293:15636":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:5708:15581":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:8825:2805":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:9033:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:4854:2713":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:9986:15873":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:2215:2529":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:5712:2426":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:13879:19861":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"11:2219:2419":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"9:325:14504":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:44084:8638":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:7632:29499":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:635:2401":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"11:1050:14569":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:7263:2316":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:501:2368":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:1583:2443":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:3210:2606":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:43579:8150":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11220:15986":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:13469:19834":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:8490:15746":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:1908:10335":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:8154:2580":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:7060:30944":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:2540:2594":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:3163:31239":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:579:9267":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:1919:15857":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:2357:14653":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:3132:22330":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12358:19067":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:7042:33687":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:40473:8457":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:7244:33570":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:3088:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:40718:8430":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:3782:14703":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:1981:2460":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:9886:15843":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:47800:8032":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:11886:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:9853:15869":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:1709:10188":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:6008:13423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:4445:15198":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:8256:15675":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:4436:2688":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:4472:12719":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11628:18548":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:42695:2746":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"11:2076:2437":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:13265:19815":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:2788:2847":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:1080:2439":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:6586:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:40708:8429":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:21004:2858":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:3933:2650":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:22557:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:487:15738":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:6327:15603":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"9:445:14449":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:3995:2656":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:1062:2437":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:5077:12783":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:43236:8113":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:41345:2625":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:643:2403":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:6695:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:10721:15941":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:11615:18547":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4398:12552":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:41332:2634":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:44273:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:9142:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"15:180:14598":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11434:18534":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:9340:15763":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1668:10184":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13145:19804":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:4167:2569":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:5380:2569":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:11484:18538":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13015:19795":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:43946:8171":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:2524:14660":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:6977:2780":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3355:2569":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:10771:8111":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4439:12715":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4667:12738":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:7252:14215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:4074:27167":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:43665:2397":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:5499:2763":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:3975:2426":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:875:2424":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:11109:15780":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:21952:2640":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:768:2427":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:4784:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:41589:2422":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:119:8936":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:39114:8059":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"11:1561:14574":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:47686:8024":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:4960:12771":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:3300:14683":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:12194:19057":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:2749:8466":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:8854:2806":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:43173:8108":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11299:18526":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:11906:1496":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"11:452:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:3510:2426":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:4602:8249":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:41226:2622":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"11:1859:2442":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:30360:28575":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:9081:2843":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:6651:10109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4527:12726":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:9526:8609":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:46416:2924":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:2546:14661":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:2087:31235":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:43741:8162":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:4761:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:10283:15885":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:13777:19853":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:671:19892":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:6485:2795":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:6907:21582":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:5995:13421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6919:33503":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11969:19042":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:783:2446":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:10647:21916":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:6110:13453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:3163:8223":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:47072:2913":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:42403:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"15:198:14599":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:45367:2874":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"18:507:34589":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:62:8882":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:42705:30057":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:2800:8492":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:10478:15938":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:10314:2766":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"16:7529:15647":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:13121:19802":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:11493:14607":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13419:19828":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:2245:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:8748:2767":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:1577:2442":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:7544:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:355:2392":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:7016:33729":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:13356:19822":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:7022:2450":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:11717:8128":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:6767:15623":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:2684:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:20841:2867":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:12496:19076":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:41597:2423":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:1622:10181":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12799:19787":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:7230:9214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:1846:2503":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:6674:8443":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13257:19814":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:7808:2547":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"14:187:14588":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:11908:1498":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:41260:2624":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:10615:15962":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:40102:8255":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:1058:31013":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:1978:15841":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:8091:2552":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:5000:15345":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:8249:2734":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:4327:15128":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:4110:8239":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:1716:2427":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:8800:2423":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:2594:14663":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:7488:15643":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:40226:8096":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:43315:8142":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:1568:2426":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:4683:2666":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:8356:8128":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:10702:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:1546:10173":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:46212:28566":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:45892:2877":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:45844:2929":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:7571:2557":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:11770:19032":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:4789:15302":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:2701:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:45662:2894":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:9275:34557":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:9748:15760":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:2198:30495":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:5556:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:43301:8145":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"14:40:18525":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:2603:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:8955:20471":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:5570:2802":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12403:19070":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12923:19792":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12033:19046":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:1524:14572":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13169:19806":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:3129:20374":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:11783:8156":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:6578:8196":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:21114:2862":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:47695:8025":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:3170:2604":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:10555:15934":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:6002:13422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:6621:23263":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"9:174:14552":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:4845:15310":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:41951:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:9907:15871":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:10857:15769":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:554:9263":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:4400:15177":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:595:9269":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:2387:2188":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:8521:15747":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:39961:8225":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:11136:15983":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5071:12782":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:1413:2425":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:47732:8028":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:2786:14671":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"11:1144:2439":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:5963:15590":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11319:18527":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:7626:15652":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:9184:2502":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:43921:8169":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:2189:30950":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:8909:2583":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:8675:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:587:9268":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12622:15777":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:4728:15289":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:10270:15884":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:7240:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:1561:2421":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10840:15768":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:2856:8503":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:5386:14619":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:6671:14596":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:44076:8633":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:7697:21374":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:5717:13342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}